'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var assert$1 = _interopDefault(require('assert'));

function _initializerDefineProperty(target, property, descriptor, context) {
  if (!descriptor) return;
  Object.defineProperty(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

var initializerDefineProperty = _initializerDefineProperty;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var classCallCheck = _classCallCheck;

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var assertThisInitialized = _assertThisInitialized;

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var setPrototypeOf = createCommonjsModule(function (module) {
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;
});

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

var inherits = _inherits;

var _typeof_1 = createCommonjsModule(function (module) {
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
});

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

var possibleConstructorReturn = _possibleConstructorReturn;

var getPrototypeOf = createCommonjsModule(function (module) {
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;
});

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object.keys(descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object.defineProperty(target, property, desc);
    desc = null;
  }

  return desc;
}

var applyDecoratedDescriptor = _applyDecoratedDescriptor;

var lodash = createCommonjsModule(function (module, exports) {
(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined$1;

  /** Used as the semantic version number. */
  var VERSION = '4.17.20';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined$1 : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined$1 : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined$1) {
        result = result === undefined$1 ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined$1 : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined$1,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined$1,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined$1,
        symIterator = Symbol ? Symbol.iterator : undefined$1,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined$1;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined$1,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined$1,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1,
        symbolToString = symbolProto ? symbolProto.toString : undefined$1;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined$1;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined$1;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined$1 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined$1;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined$1) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined$1) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined$1 : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined$1;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined$1 && !eq(object[key], value)) ||
          (value === undefined$1 && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined$1 && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined$1 : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined$1) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined$1) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined$1) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined$1 : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined$1 && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined$1, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined$1
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined$1 || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined$1;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined$1 ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined$1;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined$1 : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined$1 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined$1
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined$1 && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined$1;

          if (newValue === undefined$1) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined$1;

      var isCommon = newValue === undefined$1;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined$1;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
          if (newValue === undefined$1) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined$1;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined$1,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined$1;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined$1 ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined$1,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined$1,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined$1;

        if (newValue === undefined$1) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined$1,
            guard = length > 2 ? sources[2] : undefined$1;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined$1;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined$1 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined$1;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined$1,
            args, holders, undefined$1, undefined$1, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined$1;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined$1;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined$1 : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined$1 && other === undefined$1) {
          return defaultValue;
        }
        if (value !== undefined$1) {
          result = value;
        }
        if (other !== undefined$1) {
          if (result === undefined$1) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined$1 ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined$1;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined$1) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined$1 ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined$1,
          newHoldersRight = isCurry ? undefined$1 : holders,
          newPartials = isCurry ? partials : undefined$1,
          newPartialsRight = isCurry ? undefined$1 : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined$1, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined$1;
      }
      ary = ary === undefined$1 ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined$1 ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined$1;
      }
      var data = isBindKey ? undefined$1 : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined$1
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined$1, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined$1 ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined$1 : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined$1;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined$1) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined$1
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined$1, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined$1;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined$1;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined$1,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined$1 || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined$1 ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined$1;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined$1, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined$1 ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined$1)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined$1;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined$1;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined$1, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined$1) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined$1) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined$1) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined$1 ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined$1;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined$1;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined$1;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined$1, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined$1;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined$1) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined$1;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined$1, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined$1 ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined$1) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined$1) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined$1;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined$1;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined$1;
      return (array && array.length) ? baseUniq(array, undefined$1, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined$1, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined$1;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined$1;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined$1;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined$1;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined$1
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined$1);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined$1) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined$1 : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined$1;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined$1
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined$1;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined$1 ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined$1 : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined$1)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined$1;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined$1 : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined$1;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined$1 : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined$1 : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined$1;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined$1 || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined$1;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined$1;
        return result;
      }

      function cancel() {
        if (timerId !== undefined$1) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined$1;
      }

      function flush() {
        return timerId === undefined$1 ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined$1) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined$1) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined$1 ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      var result = customizer ? customizer(value, other) : undefined$1;
      return result === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined$1;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined$1;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined$1 ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined$1, customDefaultsMerge);
      return apply(mergeWith, undefined$1, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined$1 : baseGet(object, path);
      return result === undefined$1 ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined$1;
      }
      while (++index < length) {
        var value = object == null ? undefined$1 : object[toKey(path[index])];
        if (value === undefined$1) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined$1;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined$1) {
        upper = lower;
        lower = undefined$1;
      }
      if (upper !== undefined$1) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined$1) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined$1) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined$1;
      }
      if (floating === undefined$1) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined$1;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined$1;
        }
      }
      if (lower === undefined$1 && upper === undefined$1) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined$1) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined$1
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined$1)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined$1;
      }
      limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined$1;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined$1, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined$1)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined$1)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined$1)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined$1) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined$1 ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined$1 : pattern;

      if (pattern === undefined$1) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined$1, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined$1 : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined$1;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined$1;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined$1;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined$1;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined$1) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined$1 });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined$1
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(commonjsGlobal));
});

var runtime_1 = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   module.exports 
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}
});

var flowRuntime_umd = createCommonjsModule(function (module, exports) {
(function (global, factory) {
	 module.exports = factory() ;
}(commonjsGlobal, (function () {
/**
 * This file exports a dictionary of global primitive types that are shared by all contexts.
 * It is populated in [registerPrimitiveTypes()](./registerPrimitiveTypes.js).
 */

var primitiveTypes = {};

var _regeneratorRuntime = runtime_1;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};









var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};





var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();













var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

function makeJSONError(validation) {
  if (!validation.hasErrors()) {
    return;
  }
  var input = validation.input,
      context = validation.context;

  var errors = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = validation.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;

      var _ref2 = slicedToArray(_ref, 3);

      var path = _ref2[0];
      var message = _ref2[1];
      var expectedType = _ref2[2];

      var expected = expectedType ? expectedType.toString() : null;
      var actual = context.typeOf(_resolvePath(input, path)).toString();
      var field = stringifyPath(validation.path.concat(path));

      var pointer = '/' + path.join('/');

      errors.push({
        pointer: pointer,
        field: field,
        message: message,
        expected: expected,
        actual: actual
      });
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return errors;
}

// Tracks whether we're in validation of cyclic objects.
var cyclicValidation = new WeakMap();
// Tracks whether we're toString() of cyclic objects.


var cyclicToString = new WeakSet();

function inValidationCycle(type, input) {
  try {
    var tracked = cyclicValidation.get(type);
    if (!tracked) {
      return false;
    } else {
      return weakSetHas(tracked, input);
    }
  } catch (e) {
    // some exotic values cannot be checked
    return true;
  }
}

function startValidationCycle(type, input) {
  var tracked = cyclicValidation.get(type);
  if (!tracked) {
    tracked = new WeakSet();
    cyclicValidation.set(type, tracked);
  }
  weakSetAdd(tracked, input);
}

function endValidationCycle(type, input) {
  var tracked = cyclicValidation.get(type);
  if (tracked) {
    weakSetDelete(tracked, input);
  }
}

function inToStringCycle(type) {
  return cyclicToString.has(type);
}

function startToStringCycle(type) {
  cyclicToString.add(type);
}

function endToStringCycle(type) {
  cyclicToString.delete(type);
}

function weakSetHas(weakset, value) {
  try {
    return weakset.has(value);
  } catch (e) {
    return true;
  }
}

function weakSetAdd(weakset, value) {
  try {
    weakset.add(value);
  } catch (e) {}
}

function weakSetDelete(weakset, value) {
  try {
    weakset.delete(value);
  } catch (e) {}
}

var validIdentifierOrAccessor = /^[$A-Z_][0-9A-Z_$[\].]*$/i;

var Validation = function () {
  function Validation(context, input) {
    classCallCheck(this, Validation);
    this.path = [];
    this.prefix = '';
    this.errors = [];
    this.cyclic = new WeakMap();

    this.context = context;
    this.input = input;
  }

  // Tracks whether we're in validation of cyclic objects.


  createClass(Validation, [{
    key: 'inCycle',
    value: function inCycle(type, input) {
      var tracked = this.cyclic.get(type);
      if (!tracked) {
        return false;
      } else {
        return weakSetHas(tracked, input);
      }
    }
  }, {
    key: 'startCycle',
    value: function startCycle(type, input) {
      var tracked = this.cyclic.get(type);
      if (!tracked) {
        tracked = new WeakSet();
        this.cyclic.set(type, tracked);
      }
      weakSetAdd(tracked, input);
    }
  }, {
    key: 'endCycle',
    value: function endCycle(type, input) {
      var tracked = this.cyclic.get(type);
      if (tracked) {
        weakSetDelete(tracked, input);
      }
    }
  }, {
    key: 'hasErrors',
    value: function hasErrors(path) {
      if (path) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = this.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _ref = _step.value;

            var _ref2 = slicedToArray(_ref, 1);

            var candidate = _ref2[0];

            if (matchPath(path, candidate)) {
              return true;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        return false;
      } else {
        return this.errors.length > 0;
      }
    }
  }, {
    key: 'addError',
    value: function addError(path, expectedType, message) {
      this.errors.push([path, message, expectedType]);
      return this;
    }
  }, {
    key: 'clearError',
    value: function clearError(path) {
      var didClear = false;
      if (path) {
        var _errors = [];
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.errors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var error = _step2.value;

            if (matchPath(path, error[0])) {
              didClear = true;
            } else {
              _errors.push(error);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        this.errors = _errors;
      } else {
        didClear = this.errors.length > 0;
        this.errors = [];
      }
      return didClear;
    }
  }, {
    key: 'resolvePath',
    value: function resolvePath(path) {
      return _resolvePath(this.input, path);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return makeJSONError(this);
    }
  }]);
  return Validation;
}();

function stringifyPath(path) {
  if (!path.length) {
    return 'Value';
  }
  var length = path.length;

  var parts = new Array(length);
  for (var i = 0; i < length; i++) {
    var part = path[i];
    if (part === '[[Return Type]]') {
      parts[i] = 'Return Type';
    } else if (typeof part !== 'string' || !validIdentifierOrAccessor.test(part)) {
      parts[i] = '[' + String(part) + ']';
    } else if (i > 0) {
      parts[i] = '.' + String(part);
    } else {
      parts[i] = String(part);
    }
  }
  return parts.join('');
}

function _resolvePath(input, path) {
  var subject = input;
  var length = path.length;

  for (var i = 0; i < length; i++) {
    if (subject == null) {
      return undefined;
    }
    var part = path[i];
    if (part === '[[Return Type]]') {
      continue;
    }
    if (subject instanceof Map) {
      subject = subject.get(part);
    } else {
      subject = subject[part];
    }
  }
  return subject;
}

function matchPath(path, candidate) {
  var length = path.length;

  if (length > candidate.length) {
    return false;
  }
  for (var i = 0; i < length; i++) {
    if (candidate[i] !== path[i]) {
      return false;
    }
  }
  return true;
}

var RuntimeTypeError = function (_TypeError) {
  inherits(RuntimeTypeError, _TypeError);

  function RuntimeTypeError(message, options) {
    classCallCheck(this, RuntimeTypeError);

    var _this = possibleConstructorReturn(this, (RuntimeTypeError.__proto__ || Object.getPrototypeOf(RuntimeTypeError)).call(this, message));

    _this.name = "RuntimeTypeError";

    Object.assign(_this, options);
    return _this;
  }

  return RuntimeTypeError;
}(TypeError);

var delimiter = '\n-------------------------------------------------\n\n';

function makeTypeError(validation) {
  if (!validation.hasErrors()) {
    return;
  }
  var prefix = validation.prefix,
      input = validation.input,
      context = validation.context,
      errors = validation.errors;

  var collected = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;

      var _ref2 = slicedToArray(_ref, 3);

      var path = _ref2[0];
      var message = _ref2[1];
      var expectedType = _ref2[2];

      var expected = expectedType ? expectedType.toString() : "*";
      var actual = _resolvePath(input, path);
      var actualType = context.typeOf(actual).toString();

      var field = stringifyPath(validation.path.concat(path));

      var actualAsString = makeString(actual);

      if (typeof actualAsString === 'string') {
        collected.push(field + ' ' + message + '\n\nExpected: ' + expected + '\n\nActual Value: ' + actualAsString + '\n\nActual Type: ' + actualType + '\n');
      } else {
        collected.push(field + ' ' + message + '\n\nExpected: ' + expected + '\n\nActual: ' + actualType + '\n');
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  if (prefix) {
    return new RuntimeTypeError(prefix.trim() + ' ' + collected.join(delimiter), { errors: errors });
  } else {
    return new RuntimeTypeError(collected.join(delimiter), { errors: errors });
  }
}

function makeString(value) {
  if (value === null) {
    return 'null';
  }
  switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
    case 'string':
      return '"' + value + '"';
    // Issue
    case 'symbol':
    case 'number':
    case 'boolean':
    case 'undefined':
      return String(value);
    case 'function':
      return;
    default:
      if (Array.isArray(value) || value.constructor == null || value.constructor === Object) {
        try {
          return JSON.stringify(value, null, 2);
        } catch (e) {
          return;
        }
      }
      return;
  }
}

function makeError(expected, input) {
  var context = expected.context;

  var validation = context.validate(expected, input);
  return makeTypeError(validation);
}

/**
 * Given two types, A and B, compare them and return either -1, 0, or 1:
 *
 *   -1 if A cannot accept type B.
 *
 *    0 if the types are effectively identical.
 *
 *    1 if A accepts every possible B.
 */


function compareTypes(a, b) {
  var result = void 0;

  if (a === b) {
    return 0;
  }

  if (b instanceof TypeAlias || b instanceof TypeParameter || b instanceof TypeParameterApplication || b instanceof TypeTDZ) {
    b = b.unwrap();
  }

  if (a instanceof TypeAlias) {
    result = a.compareWith(b);
  } else if (a instanceof FlowIntoType || a instanceof TypeParameter || b instanceof FlowIntoType) {
    result = a.compareWith(b);
  } else if (a instanceof AnyType || a instanceof ExistentialType || a instanceof MixedType) {
    return 1;
  } else {
    result = a.compareWith(b);
  }

  if (b instanceof AnyType) {
    // Note: This check cannot be moved higher in the scope,
    // as this would prevent types from being propagated upwards.
    return 1;
  } else {
    return result;
  }
}

/**
 * # Type
 *
 * This is the base class for all types.
 */
var Type = function () {
  function Type(context) {
    classCallCheck(this, Type);
    this.typeName = 'Type';

    this.context = context;
  }

  createClass(Type, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var validation = new Validation(this.context, input);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.errors(validation, [], input)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var error = _step.value;
          // eslint-disable-line no-unused-vars
          return false;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return true;
    }
  }, {
    key: 'acceptsType',
    value: function acceptsType(input) {
      if (compareTypes(this, input) === -1) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return -1;
    }
  }, {
    key: 'assert',
    value: function assert(input) {
      var error = makeError(this, input);
      if (error) {
        if (typeof Error.captureStackTrace === 'function') {
          Error.captureStackTrace(error, this.assert);
        }
        throw error;
      }
      return input;
    }

    /**
     * Get the inner type.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Type';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return Type;
}();

var AnyType = function (_Type) {
  inherits(AnyType, _Type);

  function AnyType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, AnyType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = AnyType.__proto__ || Object.getPrototypeOf(AnyType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'AnyType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(AnyType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return 1;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'any';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return AnyType;
}(Type);

var errorMessages = {
  ERR_CONSTRAINT_VIOLATION: 'violated a constraint',
  ERR_EXPECT_ARRAY: 'must be an Array',
  ERR_EXPECT_TRUE: 'must be true',
  ERR_EXPECT_FALSE: 'must be false',
  ERR_EXPECT_BOOLEAN: 'must be true or false',
  ERR_EXPECT_EMPTY: 'must be empty',
  ERR_EXPECT_EXACT_VALUE: 'must be exactly $0',
  ERR_EXPECT_CALLABLE: 'must be callable',
  ERR_EXPECT_CLASS: 'must be a Class of $0',
  ERR_EXPECT_FUNCTION: 'must be a function',
  ERR_EXPECT_GENERATOR: 'must be a generator function',
  ERR_EXPECT_ITERABLE: 'must be iterable',
  ERR_EXPECT_ARGUMENT: 'argument "$0" must be: $1',
  ERR_EXPECT_RETURN: 'expected return type of: $0',
  ERR_EXPECT_N_ARGUMENTS: 'requires $0 argument(s)',
  ERR_EXPECT_INSTANCEOF: 'must be an instance of $0',
  ERR_EXPECT_KEY_TYPE: 'keys must be: $0',
  ERR_EXPECT_NULL: 'must be null',
  ERR_EXPECT_NUMBER: 'must be a number',
  ERR_EXPECT_OBJECT: 'must be an object',
  ERR_EXPECT_PROMISE: 'must be a promise of $0',
  ERR_EXPECT_STRING: 'must be a string',
  ERR_EXPECT_SYMBOL: 'must be a symbol',
  ERR_EXPECT_THIS: 'must be exactly this',
  ERR_EXPECT_VOID: 'must be undefined',
  ERR_INVALID_DATE: 'must be a valid date',
  ERR_MISSING_PROPERTY: 'does not exist on object',
  ERR_NO_INDEXER: 'is not one of the permitted indexer types',
  ERR_NO_UNION: 'must be one of: $0',
  ERR_UNKNOWN_KEY: 'should not contain the key: "$0"'
};

function getErrorMessage(key) {
  for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    params[_key - 1] = arguments[_key];
  }

  var message = errorMessages[key];
  if (params.length > 0) {
    return message.replace(/\$(\d+)/g, function (m, i) {
      return String(params[i]);
    });
  } else {
    return message;
  }
}

var TupleType = function (_Type) {
  inherits(TupleType, _Type);

  function TupleType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TupleType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TupleType.__proto__ || Object.getPrototypeOf(TupleType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TupleType', _this.types = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TupleType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var types, length, context, i;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              types = this.types;
              length = types.length;
              context = this.context;

              if (context.checkPredicate('Array', input)) {
                _context.next = 7;
                break;
              }

              _context.next = 6;
              return [path, getErrorMessage('ERR_EXPECT_ARRAY'), this];

            case 6:
              return _context.abrupt('return');

            case 7:
              i = 0;

            case 8:
              if (!(i < length)) {
                _context.next = 13;
                break;
              }

              return _context.delegateYield(types[i].errors(validation, path.concat(i), input[i]), 't0', 10);

            case 10:
              i++;
              _context.next = 8;
              break;

            case 13:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var types = this.types;
      var length = types.length;
      var context = this.context;


      if (!context.checkPredicate('Array', input) || input.length < length) {
        return false;
      }
      for (var i = 0; i < length; i++) {
        var type = types[i];
        if (!type.accepts(input[i])) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof TupleType)) {
        return -1;
      }
      var types = this.types;
      var inputTypes = input.types;
      if (inputTypes.length < types.length) {
        return -1;
      }
      var isGreater = false;
      for (var i = 0; i < types.length; i++) {
        var result = compareTypes(types[i], inputTypes[i]);
        if (result === 1) {
          isGreater = true;
        } else if (result === -1) {
          return -1;
        }
      }
      if (types.length < inputTypes.length) {
        return 0;
      } else if (isGreater) {
        return 1;
      } else {
        return 0;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '[' + this.types.join(', ') + ']';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        types: this.types
      };
    }
  }]);
  return TupleType;
}(Type);

var ArrayType = function (_Type) {
  inherits(ArrayType, _Type);

  function ArrayType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ArrayType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ArrayType.__proto__ || Object.getPrototypeOf(ArrayType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ArrayType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ArrayType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var context, elementType, length, i;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              context = this.context;

              if (context.checkPredicate('Array', input)) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_ARRAY'), this];

            case 4:
              return _context.abrupt('return');

            case 5:
              if (!validation.inCycle(this, input)) {
                _context.next = 7;
                break;
              }

              return _context.abrupt('return');

            case 7:
              validation.startCycle(this, input);
              elementType = this.elementType;
              length = input.length;
              i = 0;

            case 11:
              if (!(i < length)) {
                _context.next = 16;
                break;
              }

              return _context.delegateYield(elementType.errors(validation, path.concat(i), input[i]), 't0', 13);

            case 13:
              i++;
              _context.next = 11;
              break;

            case 16:
              validation.endCycle(this, input);

            case 17:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var context = this.context;

      if (!context.checkPredicate('Array', input)) {
        return false;
      }
      if (inValidationCycle(this, input)) {
        return true;
      }
      startValidationCycle(this, input);
      var elementType = this.elementType;
      var length = input.length;

      for (var i = 0; i < length; i++) {
        if (!elementType.accepts(input[i])) {
          endValidationCycle(this, input);
          return false;
        }
      }
      endValidationCycle(this, input);
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var elementType = this.elementType;

      if (input instanceof TupleType) {
        var types = input.types;

        for (var i = 0; i < types.length; i++) {
          var result = compareTypes(elementType, types[i]);
          if (result === -1) {
            return -1;
          }
        }
        return 1;
      } else if (input instanceof ArrayType) {
        return compareTypes(elementType, input.elementType);
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var elementType = this.elementType;

      if (inToStringCycle(this)) {
        if (typeof elementType.name === 'string') {
          return 'Array<$Cycle<' + elementType.name + '>>';
        } else {
          return 'Array<$Cycle<Object>>';
        }
      }
      startToStringCycle(this);
      var output = 'Array<' + elementType.toString() + '>';
      endToStringCycle(this);
      return output;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        elementType: this.elementType
      };
    }
  }]);
  return ArrayType;
}(Type);

var BooleanLiteralType = function (_Type) {
  inherits(BooleanLiteralType, _Type);

  function BooleanLiteralType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, BooleanLiteralType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = BooleanLiteralType.__proto__ || Object.getPrototypeOf(BooleanLiteralType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'BooleanLiteralType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(BooleanLiteralType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(input !== this.value)) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage(this.value ? 'ERR_EXPECT_TRUE' : 'ERR_EXPECT_FALSE'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === this.value;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof BooleanLiteralType && input.value === this.value) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.value ? 'true' : 'false';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        type: this.typeName,
        value: this.value
      };
    }
  }]);
  return BooleanLiteralType;
}(Type);

var BooleanType = function (_Type) {
  inherits(BooleanType, _Type);

  function BooleanType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, BooleanType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = BooleanType.__proto__ || Object.getPrototypeOf(BooleanType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'BooleanType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(BooleanType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof input !== 'boolean')) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_BOOLEAN'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return typeof input === 'boolean';
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof BooleanLiteralType) {
        return 1;
      } else if (input instanceof BooleanType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'boolean';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return BooleanType;
}(Type);

var EmptyType = function (_Type) {
  inherits(EmptyType, _Type);

  function EmptyType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, EmptyType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = EmptyType.__proto__ || Object.getPrototypeOf(EmptyType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'EmptyType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(EmptyType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return [path, getErrorMessage('ERR_EXPECT_EMPTY'), this];

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return false; // empty types accepts nothing.
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof EmptyType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'empty';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return EmptyType;
}(Type);

var ExistentialType = function (_Type) {
  inherits(ExistentialType, _Type);

  function ExistentialType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ExistentialType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ExistentialType.__proto__ || Object.getPrototypeOf(ExistentialType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ExistentialType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ExistentialType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return 1;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '*';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return ExistentialType;
}(Type);

/**
 * # TypeParameterApplication
 *
 */
var TypeParameterApplication = function (_Type) {
  inherits(TypeParameterApplication, _Type);

  function TypeParameterApplication() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeParameterApplication);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeParameterApplication.__proto__ || Object.getPrototypeOf(TypeParameterApplication)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeParameterApplication', _this.typeInstances = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeParameterApplication, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var parent, typeInstances;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              parent = this.parent, typeInstances = this.typeInstances;
              return _context.delegateYield(parent.errors.apply(parent, [validation, path, input].concat(toConsumableArray(typeInstances))), 't0', 2);

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var parent = this.parent,
          typeInstances = this.typeInstances;

      return parent.accepts.apply(parent, [input].concat(toConsumableArray(typeInstances)));
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var _parent;

      return (_parent = this.parent).compareWith.apply(_parent, [input].concat(toConsumableArray(this.typeInstances)));
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      var inner = this.parent;
      if (inner && typeof inner.hasProperty === 'function') {
        var _ref2;

        return (_ref2 = inner).hasProperty.apply(_ref2, [name].concat(toConsumableArray(this.typeInstances)));
      } else {
        return false;
      }
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      var inner = this.parent;
      if (inner && typeof inner.getProperty === 'function') {
        var _ref3;

        return (_ref3 = inner).getProperty.apply(_ref3, [name].concat(toConsumableArray(this.typeInstances)));
      }
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _parent2;

      return (_parent2 = this.parent).unwrap.apply(_parent2, toConsumableArray(this.typeInstances));
    }
  }, {
    key: 'toString',
    value: function toString() {
      var parent = this.parent,
          typeInstances = this.typeInstances;
      var name = parent.name;

      if (typeInstances.length) {
        var items = [];
        for (var i = 0; i < typeInstances.length; i++) {
          var typeInstance = typeInstances[i];
          items.push(typeInstance.toString());
        }
        return name + '<' + items.join(', ') + '>';
      } else {
        return name;
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        typeInstances: this.typeInstances
      };
    }
  }]);
  return TypeParameterApplication;
}(Type);

var _marked = /*#__PURE__*/_regeneratorRuntime.mark(collectConstraintErrors);

/**
 * Add constraints to the given subject type.
 */
function addConstraints(subject) {
  var _subject$constraints;

  for (var _len = arguments.length, constraints = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    constraints[_key - 1] = arguments[_key];
  }

  (_subject$constraints = subject.constraints).push.apply(_subject$constraints, toConsumableArray(constraints));
}

/**
 * Collect any errors from constraints on the given subject type.
 */


function collectConstraintErrors(subject, validation, path) {
  for (var _len2 = arguments.length, input = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
    input[_key2 - 3] = arguments[_key2];
  }

  var constraints, length, i, constraint, violation;
  return _regeneratorRuntime.wrap(function collectConstraintErrors$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          constraints = subject.constraints;
          length = constraints.length;
          i = 0;

        case 3:
          if (!(i < length)) {
            _context.next = 12;
            break;
          }

          constraint = constraints[i];
          violation = constraint.apply(undefined, toConsumableArray(input));

          if (!(typeof violation === 'string')) {
            _context.next = 9;
            break;
          }

          _context.next = 9;
          return [path, violation, this];

        case 9:
          i++;
          _context.next = 3;
          break;

        case 12:
        case 'end':
          return _context.stop();
      }
    }
  }, _marked, this);
}

/**
 * Determine whether the input passes the constraints on the subject type.
 */
function constraintsAccept(subject) {
  var constraints = subject.constraints;
  var length = constraints.length;

  for (var _len3 = arguments.length, input = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    input[_key3 - 1] = arguments[_key3];
  }

  for (var i = 0; i < length; i++) {
    var constraint = constraints[i];
    if (typeof constraint.apply(undefined, toConsumableArray(input)) === 'string') {
      return false;
    }
  }
  return true;
}

var TypeAlias = function (_Type) {
  inherits(TypeAlias, _Type);

  function TypeAlias() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeAlias);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeAlias.__proto__ || Object.getPrototypeOf(TypeAlias)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeAlias', _this.constraints = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeAlias, [{
    key: 'addConstraint',
    value: function addConstraint() {
      for (var _len2 = arguments.length, constraints = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        constraints[_key2] = arguments[_key2];
      }

      addConstraints.apply(undefined, [this].concat(toConsumableArray(constraints)));
      return this;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 5;
              _iterator = type.errors(validation, path, input)[Symbol.iterator]();

            case 7:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 15;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 12;
              return error;

            case 12:
              _iteratorNormalCompletion = true;
              _context.next = 7;
              break;

            case 15:
              _context.next = 21;
              break;

            case 17:
              _context.prev = 17;
              _context.t0 = _context['catch'](5);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 21:
              _context.prev = 21;
              _context.prev = 22;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 24:
              _context.prev = 24;

              if (!_didIteratorError) {
                _context.next = 27;
                break;
              }

              throw _iteratorError;

            case 27:
              return _context.finish(24);

            case 28:
              return _context.finish(21);

            case 29:
              if (hasErrors) {
                _context.next = 31;
                break;
              }

              return _context.delegateYield(collectConstraintErrors(this, validation, path, input), 't1', 31);

            case 31:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[5, 17, 21, 29], [22,, 24, 28]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      if (!type.accepts(input)) {
        return false;
      } else if (!constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input === this) {
        return 0; // should never need this because it's taken care of by compareTypes.
      } else if (this.hasConstraints) {
        // if we have constraints the types cannot be the same
        return -1;
      } else {
        return compareTypes(this.type, input);
      }
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len3 = arguments.length, typeInstances = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        typeInstances[_key3] = arguments[_key3];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.hasProperty === 'function') {
        return inner.hasProperty(name);
      } else {
        return false;
      }
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.getProperty === 'function') {
        return inner.getProperty(name);
      }
    }
  }, {
    key: 'toString',
    value: function toString(withDeclaration) {
      var name = this.name,
          type = this.type;

      if (withDeclaration) {
        return 'type ' + name + ' = ' + type.toString() + ';';
      } else {
        return name;
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        name: this.name,
        type: this.type
      };
    }
  }, {
    key: 'properties',
    get: function get$$1() {
      return this.type.properties;
    }
  }, {
    key: 'hasConstraints',
    get: function get$$1() {
      return this.constraints.length > 0;
    }
  }]);
  return TypeAlias;
}(Type);

var FlowIntoSymbol = Symbol('FlowInto');

/**
 * # TypeParameter
 *
 * Type parameters allow polymorphic type safety.
 * The first time a type parameter is checked, it records the shape of its input,
 * this recorded shape is used to check all future inputs for this particular instance.
 */

var TypeParameter = function (_Type) {
  inherits(TypeParameter, _Type);

  function TypeParameter() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeParameter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeParameter.__proto__ || Object.getPrototypeOf(TypeParameter)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeParameter', _this[FlowIntoSymbol] = null, _temp), possibleConstructorReturn(_this, _ret);
  }

  // Issue 252


  createClass(TypeParameter, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var boundOrDefault, recorded, context, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              boundOrDefault = this.bound || this.default;
              recorded = this.recorded, context = this.context;

              if (!(boundOrDefault instanceof FlowIntoType || boundOrDefault instanceof TypeAlias)) {
                _context.next = 7;
                break;
              }

              return _context.delegateYield(boundOrDefault.errors(validation, path, input), 't0', 4);

            case 4:
              return _context.abrupt('return');

            case 7:
              if (!recorded) {
                _context.next = 12;
                break;
              }

              return _context.delegateYield(recorded.errors(validation, path, input), 't1', 9);

            case 9:
              return _context.abrupt('return');

            case 12:
              if (!boundOrDefault) {
                _context.next = 47;
                break;
              }

              if (!(boundOrDefault.typeName === 'AnyType' || boundOrDefault.typeName === 'ExistentialType')) {
                _context.next = 17;
                break;
              }

              return _context.abrupt('return');

            case 17:
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 21;
              _iterator = boundOrDefault.errors(validation, path, input)[Symbol.iterator]();

            case 23:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 31;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 28;
              return error;

            case 28:
              _iteratorNormalCompletion = true;
              _context.next = 23;
              break;

            case 31:
              _context.next = 37;
              break;

            case 33:
              _context.prev = 33;
              _context.t2 = _context['catch'](21);
              _didIteratorError = true;
              _iteratorError = _context.t2;

            case 37:
              _context.prev = 37;
              _context.prev = 38;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 40:
              _context.prev = 40;

              if (!_didIteratorError) {
                _context.next = 43;
                break;
              }

              throw _iteratorError;

            case 43:
              return _context.finish(40);

            case 44:
              return _context.finish(37);

            case 45:
              if (!hasErrors) {
                _context.next = 47;
                break;
              }

              return _context.abrupt('return');

            case 47:

              this.recorded = context.typeOf(input);

            case 48:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[21, 33, 37, 45], [38,, 40, 44]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var boundOrDefault = this.bound || this.default;
      var recorded = this.recorded,
          context = this.context;

      if (boundOrDefault instanceof FlowIntoType || boundOrDefault instanceof TypeAlias) {
        // We defer to the other type parameter so that values from this
        // one can flow "upwards".
        return boundOrDefault.accepts(input);
      } else if (recorded) {
        return recorded.accepts(input);
      } else if (boundOrDefault) {
        if (boundOrDefault.typeName === "AnyType" || boundOrDefault.typeName === "ExistentialType") {
          return true;
        } else if (!boundOrDefault.accepts(input)) {
          return false;
        }
      }

      this.recorded = context.typeOf(input);
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var boundOrDefault = this.bound || this.default;
      var recorded = this.recorded;

      if (input instanceof TypeParameter) {
        // We don't need to check for `recorded` or `bound` fields
        // because the input has already been unwrapped, so
        // if we got a type parameter it must be totally generic and
        // we treat it like Any.
        return 1;
      } else if (recorded) {
        return compareTypes(recorded, input);
      } else if (boundOrDefault) {
        return compareTypes(boundOrDefault, input);
      } else {
        // A generic type parameter accepts any input.
        return 1;
      }
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      var boundOrDefault = this.bound || this.default;
      var recorded = this.recorded;

      if (recorded) {
        return recorded.unwrap();
      } else if (boundOrDefault) {
        return boundOrDefault.unwrap();
      } else {
        return this;
      }
    }
  }, {
    key: 'toString',
    value: function toString(withBinding) {
      var id = this.id,
          bound = this.bound,
          defaultType = this.default;

      if (withBinding) {
        if (defaultType) {
          return id + ' = ' + defaultType.toString();
        } else if (bound) {
          return id + ': ' + bound.toString();
        }
      }
      return id;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        id: this.id,
        bound: this.bound,
        recorded: this.recorded
      };
    }
  }]);
  return TypeParameter;
}(Type);

function flowIntoTypeParameter(typeParameter) {
  var existing = typeParameter[FlowIntoSymbol];
  if (existing) {
    return existing;
  }

  var target = new FlowIntoType(typeParameter.context);
  target.typeParameter = typeParameter;
  typeParameter[FlowIntoSymbol] = target;
  return target;
}

/**
 * # FlowIntoType
 *
 * A virtual type which allows types it receives to "flow" upwards into a type parameter.
 * The type parameter will become of a union of any types seen by this instance.
 */

var FlowIntoType = function (_Type) {
  inherits(FlowIntoType, _Type);

  function FlowIntoType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, FlowIntoType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FlowIntoType.__proto__ || Object.getPrototypeOf(FlowIntoType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'FlowIntoType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(FlowIntoType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var typeParameter, context, recorded, bound, hasError, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error, _hasError, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              typeParameter = this.typeParameter, context = this.context;
              recorded = typeParameter.recorded, bound = typeParameter.bound;

              if (!(bound instanceof FlowIntoType)) {
                _context.next = 5;
                break;
              }

              return _context.delegateYield(bound.errors(validation, path, input), 't0', 4);

            case 4:
              return _context.abrupt('return');

            case 5:
              if (!recorded) {
                _context.next = 47;
                break;
              }

              if (!bound) {
                _context.next = 39;
                break;
              }

              hasError = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 11;
              _iterator = bound.errors(validation, path, input)[Symbol.iterator]();

            case 13:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 21;
                break;
              }

              error = _step.value;
              _context.next = 17;
              return error;

            case 17:
              hasError = true;

            case 18:
              _iteratorNormalCompletion = true;
              _context.next = 13;
              break;

            case 21:
              _context.next = 27;
              break;

            case 23:
              _context.prev = 23;
              _context.t1 = _context['catch'](11);
              _didIteratorError = true;
              _iteratorError = _context.t1;

            case 27:
              _context.prev = 27;
              _context.prev = 28;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 30:
              _context.prev = 30;

              if (!_didIteratorError) {
                _context.next = 33;
                break;
              }

              throw _iteratorError;

            case 33:
              return _context.finish(30);

            case 34:
              return _context.finish(27);

            case 35:
              if (!hasError) {
                _context.next = 37;
                break;
              }

              return _context.abrupt('return');

            case 37:
              _context.next = 45;
              break;

            case 39:
              if (!recorded.accepts(input)) {
                _context.next = 43;
                break;
              }

              return _context.abrupt('return');

            case 43:
              // we need to make a union
              typeParameter.recorded = context.union(recorded, context.typeOf(input));
              return _context.abrupt('return');

            case 45:
              _context.next = 82;
              break;

            case 47:
              if (!bound) {
                _context.next = 82;
                break;
              }

              if (!(bound.typeName === 'AnyType' || bound.typeName === 'ExistentialType')) {
                _context.next = 52;
                break;
              }

              return _context.abrupt('return');

            case 52:
              _hasError = false;
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context.prev = 56;
              _iterator2 = bound.errors(validation, path, input)[Symbol.iterator]();

            case 58:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context.next = 66;
                break;
              }

              _error = _step2.value;
              _context.next = 62;
              return _error;

            case 62:
              _hasError = true;

            case 63:
              _iteratorNormalCompletion2 = true;
              _context.next = 58;
              break;

            case 66:
              _context.next = 72;
              break;

            case 68:
              _context.prev = 68;
              _context.t2 = _context['catch'](56);
              _didIteratorError2 = true;
              _iteratorError2 = _context.t2;

            case 72:
              _context.prev = 72;
              _context.prev = 73;

              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }

            case 75:
              _context.prev = 75;

              if (!_didIteratorError2) {
                _context.next = 78;
                break;
              }

              throw _iteratorError2;

            case 78:
              return _context.finish(75);

            case 79:
              return _context.finish(72);

            case 80:
              if (!_hasError) {
                _context.next = 82;
                break;
              }

              return _context.abrupt('return');

            case 82:

              typeParameter.recorded = context.typeOf(input);

            case 83:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[11, 23, 27, 35], [28,, 30, 34], [56, 68, 72, 80], [73,, 75, 79]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var typeParameter = this.typeParameter,
          context = this.context;
      var recorded = typeParameter.recorded,
          bound = typeParameter.bound;


      if (bound instanceof FlowIntoType) {
        // We defer to the other type so that values from this
        // one can flow "upwards".
        return bound.accepts(input);
      }
      if (recorded) {
        // we've already recorded a value for this type parameter
        if (bound && !bound.accepts(input)) {
          return false;
        } else if (recorded.accepts(input)) {
          // our existing type already permits this value, there's nothing to do.
          return true;
        } else {
          // we need to make a union
          typeParameter.recorded = context.union(recorded, context.typeOf(input));
          return true;
        }
      } else if (bound) {
        if (bound.typeName === 'AnyType' || bound.typeName === 'ExistentialType') {
          return true;
        } else if (!bound.accepts(input)) {
          return false;
        }
      }

      typeParameter.recorded = context.typeOf(input);
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var typeParameter = this.typeParameter,
          context = this.context;
      var recorded = typeParameter.recorded,
          bound = typeParameter.bound;

      if (bound instanceof FlowIntoType) {
        // We defer to the other type so that values from this
        // one can flow "upwards".
        return bound.compareWith(input);
      }
      if (recorded) {
        if (bound && compareTypes(bound, input) === -1) {
          return -1;
        }
        var result = compareTypes(recorded, input);
        if (result === 0) {
          // our existing type already permits this value, there's nothing to do.
          return 0;
        }
        // we need to make a union
        typeParameter.recorded = context.union(recorded, input);
        return 1;
      } else if (bound) {
        if (bound.typeName === 'AnyType' || bound.typeName === 'ExistentialType') {
          return 1;
        }
        var _result = compareTypes(bound, input);
        if (_result === -1) {
          return -1;
        }
      }

      typeParameter.recorded = input;
      return 0;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.typeParameter.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString(withBinding) {
      return this.typeParameter.toString(withBinding);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this.typeParameter.toJSON();
    }
  }]);
  return FlowIntoType;
}(Type);

var FunctionTypeRestParam = function (_Type) {
  inherits(FunctionTypeRestParam, _Type);

  function FunctionTypeRestParam() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, FunctionTypeRestParam);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FunctionTypeRestParam.__proto__ || Object.getPrototypeOf(FunctionTypeRestParam)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'FunctionTypeRestParam', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(FunctionTypeRestParam, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;
              return _context.delegateYield(type.errors(validation, path, input), 't0', 2);

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      return type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof FunctionTypeParam || input instanceof FunctionTypeRestParam) {
        return compareTypes(this.type, input.type);
      } else {
        var result = compareTypes(this.type, input);
        if (result === -1) {
          return -1;
        } else {
          return 1;
        }
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var type = this.type;

      return '...' + this.name + ': ' + type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        name: this.name,
        type: this.type
      };
    }
  }]);
  return FunctionTypeRestParam;
}(Type);

var FunctionTypeParam = function (_Type) {
  inherits(FunctionTypeParam, _Type);

  function FunctionTypeParam() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, FunctionTypeParam);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FunctionTypeParam.__proto__ || Object.getPrototypeOf(FunctionTypeParam)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'FunctionTypeParam', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(FunctionTypeParam, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var optional, type;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              optional = this.optional, type = this.type;

              if (!(optional && input === undefined)) {
                _context.next = 5;
                break;
              }

              return _context.abrupt('return');

            case 5:
              return _context.delegateYield(type.errors(validation, path, input), 't0', 6);

            case 6:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var optional = this.optional,
          type = this.type;

      if (optional && input === undefined) {
        return true;
      } else {
        return type.accepts(input);
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof FunctionTypeParam || input instanceof FunctionTypeRestParam) {
        return compareTypes(this.type, input.type);
      } else {
        return compareTypes(this.type, input);
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var optional = this.optional,
          type = this.type;

      return '' + this.name + (optional ? '?' : '') + ': ' + type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        name: this.name,
        optional: this.optional,
        type: this.type
      };
    }
  }]);
  return FunctionTypeParam;
}(Type);

var FunctionTypeReturn = function (_Type) {
  inherits(FunctionTypeReturn, _Type);

  function FunctionTypeReturn() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, FunctionTypeReturn);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FunctionTypeReturn.__proto__ || Object.getPrototypeOf(FunctionTypeReturn)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'FunctionTypeReturn', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(FunctionTypeReturn, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;
              return _context.delegateYield(type.errors(validation, path.concat('[[Return Type]]'), input), 't0', 2);

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      return type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof FunctionTypeReturn) {
        return compareTypes(this.type, input.type);
      } else {
        var result = compareTypes(this.type, input);
        if (result === -1) {
          return -1;
        } else {
          return 1;
        }
      }
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type;
    }
  }, {
    key: 'toString',
    value: function toString() {
      var type = this.type;

      return type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return FunctionTypeReturn;
}(Type);

var ParentSymbol = Symbol('Parent');
var NameRegistrySymbol = Symbol('NameRegistry');
var ModuleRegistrySymbol = Symbol('ModuleRegistry');
var CurrentModuleSymbol = Symbol('CurrentModule');
var TypeConstructorRegistrySymbol = Symbol('TypeConstructorRegistry');
var InferrerSymbol = Symbol('Inferrer');


var TypeSymbol = Symbol('Type');
var TypeParametersSymbol = Symbol('TypeParameters');
var TypePredicateRegistrySymbol = Symbol('TypePredicateRegistry');

var FunctionType = function (_Type) {
  inherits(FunctionType, _Type);

  function FunctionType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, FunctionType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = FunctionType.__proto__ || Object.getPrototypeOf(FunctionType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'FunctionType', _this.params = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(FunctionType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var annotation, returnType, params, i, param, annotationParam, context, _i, _param;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof input !== 'function')) {
                _context.next = 4;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_FUNCTION'), this];

            case 3:
              return _context.abrupt('return');

            case 4:
              annotation = input[TypeSymbol];
              returnType = this.returnType, params = this.params;

              if (!annotation) {
                _context.next = 29;
                break;
              }

              if (annotation.params) {
                _context.next = 9;
                break;
              }

              return _context.abrupt('return');

            case 9:
              i = 0;

            case 10:
              if (!(i < params.length)) {
                _context.next = 24;
                break;
              }

              param = params[i];
              annotationParam = annotation.params[i];

              if (!(!annotationParam && !param.optional)) {
                _context.next = 18;
                break;
              }

              _context.next = 16;
              return [path, getErrorMessage('ERR_EXPECT_ARGUMENT', param.name, param.type.toString()), this];

            case 16:
              _context.next = 21;
              break;

            case 18:
              if (param.acceptsType(annotationParam)) {
                _context.next = 21;
                break;
              }

              _context.next = 21;
              return [path, getErrorMessage('ERR_EXPECT_ARGUMENT', param.name, param.type.toString()), this];

            case 21:
              i++;
              _context.next = 10;
              break;

            case 24:
              if (returnType.acceptsType(annotation.returnType)) {
                _context.next = 27;
                break;
              }

              _context.next = 27;
              return [path, getErrorMessage('ERR_EXPECT_RETURN', returnType.toString()), this];

            case 27:
              _context.next = 32;
              break;

            case 29:
              context = this.context;
              // We cannot safely check an unannotated function.
              // But we need to propagate `any` type feedback upwards.

              for (_i = 0; _i < params.length; _i++) {
                _param = params[_i];

                _param.acceptsType(context.any());
              }
              returnType.acceptsType(context.any());

            case 32:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      if (typeof input !== 'function') {
        return false;
      }
      var returnType = this.returnType,
          params = this.params;

      var annotation = input[TypeSymbol];
      if (annotation) {
        if (!annotation.params) {
          return true;
        }
        for (var i = 0; i < params.length; i++) {
          var param = params[i];
          var annotationParam = annotation.params[i];
          if (!annotationParam && !param.optional) {
            return false;
          } else if (!param.acceptsType(annotationParam)) {
            return false;
          }
        }
        if (!returnType.acceptsType(annotation.returnType)) {
          return false;
        }
        return true;
      } else {
        var context = this.context;
        // We cannot safely check an unannotated function.
        // But we need to propagate `any` type feedback upwards.

        for (var _i2 = 0; _i2 < params.length; _i2++) {
          var _param2 = params[_i2];
          _param2.acceptsType(context.any());
        }
        returnType.acceptsType(context.any());
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof FunctionType)) {
        return -1;
      }
      var returnType = this.returnType;
      var inputReturnType = input.returnType;
      var isGreater = false;
      var returnTypeResult = compareTypes(returnType, inputReturnType);
      if (returnTypeResult === -1) {
        return -1;
      } else if (returnTypeResult === 1) {
        isGreater = true;
      }

      var params = this.params;
      var inputParams = input.params;
      for (var i = 0; i < params.length; i++) {
        var param = params[i];
        var inputParam = i >= inputParams.length ? input.rest : inputParams[i];
        if (inputParam == null) {
          return -1;
        }
        var result = compareTypes(param, inputParam);
        if (result === -1) {
          return -1;
        } else if (result === 1) {
          isGreater = true;
        }
      }
      return isGreater ? 1 : 0;
    }
  }, {
    key: 'acceptsParams',
    value: function acceptsParams() {
      var params = this.params,
          rest = this.rest;

      var paramsLength = params.length;

      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var argsLength = args.length;
      for (var i = 0; i < paramsLength; i++) {
        var param = params[i];
        if (i < argsLength) {
          if (!param.accepts(args[i])) {
            return false;
          }
        } else if (!param.accepts(undefined)) {
          return false;
        }
      }

      if (argsLength > paramsLength && rest) {
        for (var _i3 = paramsLength; _i3 < argsLength; _i3++) {
          if (!rest.accepts(args[_i3])) {
            return false;
          }
        }
      }

      return true;
    }
  }, {
    key: 'acceptsReturn',
    value: function acceptsReturn(input) {
      return this.returnType.accepts(input);
    }
  }, {
    key: 'assertParams',
    value: function assertParams() {
      var params = this.params,
          rest = this.rest;

      var paramsLength = params.length;

      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var argsLength = args.length;
      for (var i = 0; i < paramsLength; i++) {
        var param = params[i];
        if (i < argsLength) {
          param.assert(args[i]);
        } else {
          param.assert(undefined);
        }
      }

      if (argsLength > paramsLength && rest) {
        for (var _i4 = paramsLength; _i4 < argsLength; _i4++) {
          rest.assert(args[_i4]);
        }
      }

      return args;
    }
  }, {
    key: 'assertReturn',
    value: function assertReturn(input) {
      this.returnType.assert(input);
      return input;
    }
  }, {
    key: 'invoke',
    value: function invoke() {
      var params = this.params,
          rest = this.rest,
          context = this.context;

      var paramsLength = params.length;

      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      var argsLength = args.length;
      for (var i = 0; i < paramsLength; i++) {
        var param = params[i];
        if (i < argsLength) {
          if (!param.acceptsType(args[i])) {
            return context.empty();
          }
        } else if (!param.accepts(undefined)) {
          return context.empty();
        }
      }

      if (argsLength > paramsLength && rest) {
        for (var _i5 = paramsLength; _i5 < argsLength; _i5++) {
          if (!rest.acceptsType(args[_i5])) {
            return context.empty();
          }
        }
      }

      return this.returnType.type;
    }
  }, {
    key: 'toString',
    value: function toString() {
      var params = this.params,
          rest = this.rest,
          returnType = this.returnType;

      var args = [];
      for (var i = 0; i < params.length; i++) {
        args.push(params[i].toString());
      }
      if (rest) {
        args.push(rest.toString());
      }
      return '(' + args.join(', ') + ') => ' + returnType.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        params: this.params,
        rest: this.rest,
        returnType: this.returnType
      };
    }
  }]);
  return FunctionType;
}(Type);

var GeneratorType = function (_Type) {
  inherits(GeneratorType, _Type);

  function GeneratorType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, GeneratorType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = GeneratorType.__proto__ || Object.getPrototypeOf(GeneratorType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'GeneratorType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(GeneratorType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var isValid;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              isValid = input && typeof input.next === 'function' && typeof input.return === 'function' && typeof input.throw === 'function';

              if (isValid) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_GENERATOR'), this];

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input && typeof input.next === 'function' && typeof input.return === 'function' && typeof input.throw === 'function';
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof GeneratorType)) {
        var _result = compareTypes(this.yieldType, input);
        if (_result === -1) {
          return -1;
        } else {
          return 1;
        }
      }
      var isGreater = false;
      var result = compareTypes(this.yieldType, input.yieldType);
      if (result === -1) {
        return -1;
      } else if (result === 1) {
        isGreater = true;
      }

      result = compareTypes(this.returnType, input.returnType);
      if (result === -1) {
        return -1;
      } else if (result === 1) {
        isGreater = true;
      }

      result = compareTypes(this.nextType, input.nextType);
      if (result === -1) {
        return -1;
      } else if (result === 1) {
        isGreater = true;
      }

      return isGreater ? 1 : 0;
    }
  }, {
    key: 'acceptsYield',
    value: function acceptsYield(input) {
      return this.yieldType.accepts(input);
    }
  }, {
    key: 'acceptsReturn',
    value: function acceptsReturn(input) {
      return this.returnType.accepts(input);
    }
  }, {
    key: 'acceptsNext',
    value: function acceptsNext(input) {
      return this.nextType.accepts(input);
    }
  }, {
    key: 'assertYield',
    value: function assertYield(input) {
      return this.yieldType.assert(input);
    }
  }, {
    key: 'assertReturn',
    value: function assertReturn(input) {
      return this.returnType.assert(input);
    }
  }, {
    key: 'assertNext',
    value: function assertNext(input) {
      return this.nextType.assert(input);
    }
  }, {
    key: 'toString',
    value: function toString() {
      var yieldType = this.yieldType,
          returnType = this.returnType,
          nextType = this.nextType;

      return 'Generator<' + yieldType.toString() + ', ' + returnType.toString() + ', ' + nextType.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        yieldType: this.yieldType,
        returnType: this.returnType,
        nextType: this.nextType
      };
    }
  }]);
  return GeneratorType;
}(Type);

var warnedInstances = new WeakSet();

var TypeConstructor = function (_Type) {
  inherits(TypeConstructor, _Type);

  function TypeConstructor() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeConstructor);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeConstructor.__proto__ || Object.getPrototypeOf(TypeConstructor)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeConstructor', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeConstructor, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var context = this.context,
          name = this.name;

      if (!warnedInstances.has(this)) {
        context.emitWarningMessage('TypeConstructor ' + name + ' does not implement accepts().');
        warnedInstances.add(this);
      }
      return false;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var context = this.context,
          name = this.name;

      if (!warnedInstances.has(this)) {
        context.emitWarningMessage('TypeConstructor ' + name + ' does not implement compareWith().');
        warnedInstances.add(this);
      }
      return -1;
    }
  }, {
    key: 'inferTypeParameters',
    value: function inferTypeParameters(input) {
      return [];
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.name;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        name: this.name
      };
    }
  }]);
  return TypeConstructor;
}(Type);

var GenericType = function (_TypeConstructor) {
  inherits(GenericType, _TypeConstructor);

  function GenericType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, GenericType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = GenericType.__proto__ || Object.getPrototypeOf(GenericType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = "GenericType", _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(GenericType, [{
    key: "errors",
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var name, impl;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              name = this.name, impl = this.impl;

              if (input instanceof impl) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage("ERR_EXPECT_INSTANCEOF", name), this];

            case 4:
            case "end":
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: "accepts",
    value: function accepts(input) {
      var impl = this.impl;

      return input instanceof impl;
    }
  }, {
    key: "compareWith",
    value: function compareWith(input) {
      var context = this.context,
          impl = this.impl;

      var annotation = context.getAnnotation(impl);
      if (annotation) {
        for (var _len2 = arguments.length, typeInstances = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          typeInstances[_key2 - 1] = arguments[_key2];
        }

        var expected = annotation.unwrap.apply(annotation, toConsumableArray(typeInstances));
        return compareTypes(input, expected);
      } else if (input instanceof GenericType && (input.impl === impl || impl && impl.isPrototypeOf(input.impl))) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: "unwrap",
    value: function unwrap() {
      var context = this.context,
          impl = this.impl;

      if (typeof impl !== "function") {
        return this;
      }
      var annotation = context.getAnnotation(impl);
      if (annotation != null) {
        return annotation.unwrap.apply(annotation, arguments);
      } else {
        return this;
      }
    }
  }, {
    key: "inferTypeParameters",
    value: function inferTypeParameters(input) {
      return [];
    }
  }]);
  return GenericType;
}(TypeConstructor);

function invariant(input, message) {
  if (!input) {
    var error = new Error(message);
    error.name = 'InvariantViolation';
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(error, invariant);
    }
    throw error;
  }
}

var NullLiteralType = function (_Type) {
  inherits(NullLiteralType, _Type);

  function NullLiteralType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, NullLiteralType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = NullLiteralType.__proto__ || Object.getPrototypeOf(NullLiteralType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'NullLiteralType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(NullLiteralType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(input !== null)) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_NULL'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === null;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof NullLiteralType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'null';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return NullLiteralType;
}(Type);

var VoidType = function (_Type) {
  inherits(VoidType, _Type);

  function VoidType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, VoidType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = VoidType.__proto__ || Object.getPrototypeOf(VoidType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'VoidType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(VoidType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(input !== undefined)) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_VOID'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === undefined;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof VoidType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'void';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return VoidType;
}(Type);

var NullableType = function (_Type) {
  inherits(NullableType, _Type);

  function NullableType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, NullableType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = NullableType.__proto__ || Object.getPrototypeOf(NullableType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'NullableType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(NullableType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(input != null)) {
                _context.next = 2;
                break;
              }

              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 2);

            case 2:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      if (input == null) {
        return true;
      } else {
        return this.type.accepts(input);
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof NullLiteralType || input instanceof VoidType) {
        return 1;
      } else if (input instanceof NullableType) {
        return compareTypes(this.type, input.type);
      } else {
        var result = compareTypes(this.type, input);
        if (result === -1) {
          return -1;
        } else {
          return 1;
        }
      }
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '? ' + this.type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return NullableType;
}(Type);

var ObjectTypeProperty = function (_Type) {
  inherits(ObjectTypeProperty, _Type);

  function ObjectTypeProperty() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ObjectTypeProperty);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ObjectTypeProperty.__proto__ || Object.getPrototypeOf(ObjectTypeProperty)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ObjectTypeProperty', _this['static'] = false, _this.constraints = [], _temp), possibleConstructorReturn(_this, _ret);
  }
  // Ignore


  createClass(ObjectTypeProperty, [{
    key: 'addConstraint',
    value: function addConstraint() {
      for (var _len2 = arguments.length, constraints = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        constraints[_key2] = arguments[_key2];
      }

      addConstraints.apply(undefined, [this].concat(toConsumableArray(constraints)));
      return this;
    }

    /**
     * Determine whether the property is nullable.
     */

  }, {
    key: 'isNullable',
    value: function isNullable() {
      return this.value instanceof NullableType;
    }

    /**
     * Determine whether the property exists on the given input or its prototype chain.
     */

  }, {
    key: 'existsOn',
    value: function existsOn(input) {
      // Ignore
      var key = this.key,
          isStatic = this.static;

      return key in (isStatic ? input.constructor : input) === true;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var optional, key, value, isStatic, target, targetPath, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // Ignore
              optional = this.optional, key = this.key, value = this.value, isStatic = this.static;
              target = void 0;
              targetPath = void 0;

              if (!isStatic) {
                _context.next = 18;
                break;
              }

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 8;
                break;
              }

              _context.next = 7;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 7:
              return _context.abrupt('return');

            case 8:
              targetPath = path.concat('constructor');

              if (!(typeof input.constructor !== 'function')) {
                _context.next = 14;
                break;
              }

              if (optional) {
                _context.next = 13;
                break;
              }

              _context.next = 13;
              return [targetPath, getErrorMessage('ERR_EXPECT_FUNCTION'), this];

            case 13:
              return _context.abrupt('return');

            case 14:
              targetPath.push(key);
              target = input.constructor[key];
              _context.next = 20;
              break;

            case 18:
              target = input[key];
              targetPath = path.concat(key);

            case 20:
              if (!(optional && target === undefined)) {
                _context.next = 22;
                break;
              }

              return _context.abrupt('return');

            case 22:
              if (!(this.isNullable() && !this.existsOn(input))) {
                _context.next = 26;
                break;
              }

              _context.next = 25;
              return [targetPath, getErrorMessage('ERR_MISSING_PROPERTY'), this];

            case 25:
              return _context.abrupt('return');

            case 26:
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 30;
              _iterator = value.errors(validation, targetPath, target)[Symbol.iterator]();

            case 32:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 40;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 37;
              return error;

            case 37:
              _iteratorNormalCompletion = true;
              _context.next = 32;
              break;

            case 40:
              _context.next = 46;
              break;

            case 42:
              _context.prev = 42;
              _context.t0 = _context['catch'](30);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 46:
              _context.prev = 46;
              _context.prev = 47;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 49:
              _context.prev = 49;

              if (!_didIteratorError) {
                _context.next = 52;
                break;
              }

              throw _iteratorError;

            case 52:
              return _context.finish(49);

            case 53:
              return _context.finish(46);

            case 54:
              if (hasErrors) {
                _context.next = 56;
                break;
              }

              return _context.delegateYield(collectConstraintErrors(this, validation, targetPath, target), 't1', 56);

            case 56:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[30, 42, 46, 54], [47,, 49, 53]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      // Ignore
      var optional = this.optional,
          key = this.key,
          value = this.value,
          isStatic = this.static;

      var target = void 0;
      if (isStatic) {
        if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
          return false;
        }
        if (typeof input.constructor !== 'function') {
          return optional ? true : false;
        }
        target = input.constructor[key];
      } else {
        target = input[key];
      }

      if (optional && target === undefined) {
        return true;
      }

      if (this.isNullable() && !this.existsOn(input)) {
        return false;
      }

      if (!value.accepts(target)) {
        return false;
      } else {
        return constraintsAccept(this, target);
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof ObjectTypeProperty)) {
        return -1;
      } else if (input.key !== this.key) {
        return -1;
      } else {
        return compareTypes(this.value, input.value);
      }
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.value.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      var key = this.key;
      // Issue 252
      if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'symbol') {
        key = '[' + key.toString() + ']';
      }
      if (this.static) {
        return 'static ' + key + (this.optional ? '?' : '') + ': ' + this.value.toString() + ';';
      } else {
        return '' + key + (this.optional ? '?' : '') + ': ' + this.value.toString() + ';';
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        key: this.key,
        value: this.value,
        optional: this.optional
      };
    }
  }]);
  return ObjectTypeProperty;
}(Type);

var ObjectTypeIndexer = function (_Type) {
  inherits(ObjectTypeIndexer, _Type);

  function ObjectTypeIndexer() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ObjectTypeIndexer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ObjectTypeIndexer.__proto__ || Object.getPrototypeOf(ObjectTypeIndexer)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ObjectTypeIndexer', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ObjectTypeIndexer, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, key, value) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // special case number types
              if (this.key.typeName === 'NumberType' || this.key.typeName === 'NumericLiteralType') {
                key = +key;
              }

              return _context.delegateYield(this.key.errors(validation, path.concat('[[Key]]'), key), 't0', 2);

            case 2:
              return _context.delegateYield(this.value.errors(validation, path.concat(key), value), 't1', 3);

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(value) {
      return this.value.accepts(value);
    }
  }, {
    key: 'acceptsKey',
    value: function acceptsKey(key) {
      // special case number types
      if (this.key.typeName === 'NumberType' || this.key.typeName === 'NumericLiteralType') {
        key = +key;
      }
      return this.key.accepts(key);
    }
  }, {
    key: 'acceptsValue',
    value: function acceptsValue(value) {
      return this.value.accepts(value);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof ObjectTypeProperty) {
        if (!this.key.accepts(input.key)) {
          return -1;
        } else {
          return compareTypes(this.value, input.value);
        }
      } else if (!(input instanceof ObjectTypeIndexer)) {
        return -1;
      }

      var keyResult = compareTypes(this.key, input.key);
      if (keyResult === -1) {
        return -1;
      }
      var valueResult = compareTypes(this.value, input.value);
      if (valueResult === -1) {
        return -1;
      }

      if (keyResult === 0 && valueResult === 0) {
        return 0;
      } else {
        return 1;
      }
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.value.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '[' + this.id + ': ' + this.key.toString() + ']: ' + this.value.toString() + ';';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        id: this.id,
        key: this.key,
        value: this.value
      };
    }
  }]);
  return ObjectTypeIndexer;
}(Type);

var ObjectTypeCallProperty = function (_Type) {
  inherits(ObjectTypeCallProperty, _Type);

  function ObjectTypeCallProperty() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ObjectTypeCallProperty);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ObjectTypeCallProperty.__proto__ || Object.getPrototypeOf(ObjectTypeCallProperty)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ObjectTypeCallProperty', _this['static'] = false, _temp), possibleConstructorReturn(_this, _ret);
  }
  // Ignore


  createClass(ObjectTypeCallProperty, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var value, isStatic, target, targetPath;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // Ignore
              value = this.value, isStatic = this.static;
              target = void 0;
              targetPath = void 0;

              if (!isStatic) {
                _context.next = 16;
                break;
              }

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 8;
                break;
              }

              _context.next = 7;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 7:
              return _context.abrupt('return');

            case 8:
              targetPath = path.concat('constructor');

              if (!(typeof input.constructor !== 'function')) {
                _context.next = 13;
                break;
              }

              _context.next = 12;
              return [targetPath, getErrorMessage('ERR_EXPECT_FUNCTION'), this];

            case 12:
              return _context.abrupt('return');

            case 13:
              target = input.constructor;
              _context.next = 18;
              break;

            case 16:
              target = input;
              targetPath = path;

            case 18:
              return _context.delegateYield(value.errors(validation, targetPath, target), 't0', 19);

            case 19:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      // Ignore
      var value = this.value,
          isStatic = this.static;

      var target = void 0;
      if (isStatic) {
        if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
          return false;
        }
        if (typeof input.constructor !== 'function') {
          return false;
        }
        target = input.constructor;
      } else {
        target = input;
      }
      return value.accepts(target);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof ObjectTypeCallProperty)) {
        return -1;
      }
      return compareTypes(this.value, input.value);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.value.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      if (this.static) {
        return 'static ' + this.value.toString() + ';';
      } else {
        return this.value.toString();
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        value: this.value
      };
    }
  }]);
  return ObjectTypeCallProperty;
}(Type);

var Declaration = function (_Type) {
  inherits(Declaration, _Type);

  function Declaration() {
    classCallCheck(this, Declaration);
    return possibleConstructorReturn(this, (Declaration.__proto__ || Object.getPrototypeOf(Declaration)).apply(this, arguments));
  }

  return Declaration;
}(Type);

var VarDeclaration = function (_Declaration) {
  inherits(VarDeclaration, _Declaration);

  function VarDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, VarDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = VarDeclaration.__proto__ || Object.getPrototypeOf(VarDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'VarDeclaration', _this.constraints = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(VarDeclaration, [{
    key: 'addConstraint',
    value: function addConstraint() {
      for (var _len2 = arguments.length, constraints = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        constraints[_key2] = arguments[_key2];
      }

      addConstraints.apply(undefined, [this].concat(toConsumableArray(constraints)));
      return this;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 5;
              _iterator = type.errors(validation, path, input)[Symbol.iterator]();

            case 7:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 15;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 12;
              return error;

            case 12:
              _iteratorNormalCompletion = true;
              _context.next = 7;
              break;

            case 15:
              _context.next = 21;
              break;

            case 17:
              _context.prev = 17;
              _context.t0 = _context['catch'](5);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 21:
              _context.prev = 21;
              _context.prev = 22;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 24:
              _context.prev = 24;

              if (!_didIteratorError) {
                _context.next = 27;
                break;
              }

              throw _iteratorError;

            case 27:
              return _context.finish(24);

            case 28:
              return _context.finish(21);

            case 29:
              if (hasErrors) {
                _context.next = 31;
                break;
              }

              return _context.delegateYield(collectConstraintErrors(this, validation, path, input), 't1', 31);

            case 31:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[5, 17, 21, 29], [22,, 24, 28]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      if (!type.accepts(input)) {
        return false;
      } else if (!constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.type, input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'declare var ' + this.name + ': ' + this.type.toString() + ';';
    }
  }]);
  return VarDeclaration;
}(Declaration);

var TypeDeclaration = function (_Declaration) {
  inherits(TypeDeclaration, _Declaration);

  function TypeDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeDeclaration.__proto__ || Object.getPrototypeOf(TypeDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeDeclaration', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeDeclaration, [{
    key: 'addConstraint',
    value: function addConstraint() {
      var _typeAlias;

      (_typeAlias = this.typeAlias).addConstraint.apply(_typeAlias, arguments);
      return this;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.typeAlias.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'apply',
    value: function apply() {
      var _typeAlias2;

      return (_typeAlias2 = this.typeAlias).apply.apply(_typeAlias2, arguments);
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.typeAlias.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.typeAlias, input);
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      var _typeAlias3;

      for (var _len2 = arguments.length, typeInstances = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        typeInstances[_key2 - 1] = arguments[_key2];
      }

      return (_typeAlias3 = this.typeAlias).hasProperty.apply(_typeAlias3, [name].concat(toConsumableArray(typeInstances)));
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      var _typeAlias4;

      for (var _len3 = arguments.length, typeInstances = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        typeInstances[_key3 - 1] = arguments[_key3];
      }

      return (_typeAlias4 = this.typeAlias).getProperty.apply(_typeAlias4, [name].concat(toConsumableArray(typeInstances)));
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _typeAlias5;

      return (_typeAlias5 = this.typeAlias).unwrap.apply(_typeAlias5, arguments);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'declare ' + this.typeAlias.toString(true) + ';';
    }
  }, {
    key: 'type',
    get: function get$$1() {
      return this.typeAlias.type;
    }
  }]);
  return TypeDeclaration;
}(Declaration);

var ModuleDeclaration = function (_Declaration) {
  inherits(ModuleDeclaration, _Declaration);

  function ModuleDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ModuleDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ModuleDeclaration.__proto__ || Object.getPrototypeOf(ModuleDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ModuleDeclaration', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ModuleDeclaration, [{
    key: 'get',
    value: function get$$1(name) {
      var moduleExports = this.moduleExports;

      if (moduleExports) {
        var exporting = moduleExports.unwrap();
        if (typeof exporting.getProperty === 'function') {
          var prop = exporting.getProperty(name);
          if (prop) {
            return prop.unwrap();
          }
        }
      } else {
        var declaration = this.declarations[name];
        if (declaration) {
          return declaration.unwrap();
        }
      }
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'import',
    value: function _import(moduleName) {
      if (/^\.\//.test(moduleName)) {
        moduleName = '' + this.name + moduleName.slice(1);
      }
      return this.innerContext.import(moduleName);
    }
  }, {
    key: 'toString',
    value: function toString() {
      var name = this.name,
          declarations = this.declarations,
          modules = this.modules,
          moduleExports = this.moduleExports;

      var body = [];
      for (var _name in declarations) {
        // eslint-disable-line guard-for-in
        var declaration = declarations[_name];
        body.push(declaration.toString(true));
      }
      if (modules) {
        for (var _name2 in modules) {
          // eslint-disable-line guard-for-in
          var module = modules[_name2];
          body.push(module.toString());
        }
      }
      if (moduleExports) {
        body.push(moduleExports.toString());
      }
      return 'declare module "' + name + '" {\n' + indent$1(body.join('\n\n')) + '}';
    }
  }, {
    key: 'moduleType',
    get: function get$$1() {
      if (this.moduleExports) {
        return 'commonjs';
      } else {
        return 'es6';
      }
    }
  }, {
    key: 'isCommonJS',
    get: function get$$1() {
      return this.moduleExports ? true : false;
    }
  }, {
    key: 'isES6',
    get: function get$$1() {
      return this.moduleExports ? false : true;
    }
  }, {
    key: 'declarations',
    get: function get$$1() {
      var innerContext = this.innerContext;

      return innerContext[NameRegistrySymbol];
    }
  }, {
    key: 'modules',
    get: function get$$1() {
      var innerContext = this.innerContext;

      return innerContext[ModuleRegistrySymbol];
    }
  }]);
  return ModuleDeclaration;
}(Declaration);

function indent$1(input) {
  var lines = input.split('\n');
  var length = lines.length;

  for (var i = 0; i < length; i++) {
    lines[i] = '  ' + lines[i];
  }
  return lines.join('\n');
}

var ModuleExports = function (_Declaration) {
  inherits(ModuleExports, _Declaration);

  function ModuleExports() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ModuleExports);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ModuleExports.__proto__ || Object.getPrototypeOf(ModuleExports)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ModuleExports', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ModuleExports, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'declare module.exports: ' + this.type.toString() + ';';
    }
  }]);
  return ModuleExports;
}(Declaration);

var ClassDeclaration = function (_Declaration) {
  inherits(ClassDeclaration, _Declaration);

  function ClassDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ClassDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ClassDeclaration.__proto__ || Object.getPrototypeOf(ClassDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ClassDeclaration', _this.shapeID = Symbol(), _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ClassDeclaration, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var body, superClass, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _ref2, _ref3, errorPath, errorMessage, expectedType, propertyName;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              body = this.body;
              superClass = this.superClass && this.superClass.unwrap();

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 6;
                break;
              }

              _context.next = 5;
              return [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', this.name), this];

            case 5:
              return _context.abrupt('return');

            case 6:
              if (!superClass) {
                _context.next = 42;
                break;
              }

              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 10;
              _iterator = superClass.errors(validation, path, input)[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 28;
                break;
              }

              _ref2 = _step.value;
              _ref3 = slicedToArray(_ref2, 3);
              errorPath = _ref3[0];
              errorMessage = _ref3[1];
              expectedType = _ref3[2];
              propertyName = errorPath[path.length];

              if (!body.getProperty(propertyName)) {
                _context.next = 23;
                break;
              }

              return _context.abrupt('continue', 25);

            case 23:
              _context.next = 25;
              return [errorPath, errorMessage, expectedType];

            case 25:
              _iteratorNormalCompletion = true;
              _context.next = 12;
              break;

            case 28:
              _context.next = 34;
              break;

            case 30:
              _context.prev = 30;
              _context.t0 = _context['catch'](10);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 34:
              _context.prev = 34;
              _context.prev = 35;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 37:
              _context.prev = 37;

              if (!_didIteratorError) {
                _context.next = 40;
                break;
              }

              throw _iteratorError;

            case 40:
              return _context.finish(37);

            case 41:
              return _context.finish(34);

            case 42:
              return _context.delegateYield(body.errors(validation, path, input), 't1', 43);

            case 43:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[10, 30, 34, 42], [35,, 37, 41]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var body = this.body;

      var superClass = this.superClass && this.superClass.unwrap();
      if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
        return false;
      } else if (superClass && !superClass.accepts(input)) {
        return false;
      } else if (!body.accepts(input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof ClassDeclaration) {
        if (input === this) {
          return 0;
        } else if (this.isSuperClassOf(input)) {
          return 1;
        } else {
          return -1;
        }
      }
      return compareTypes(this.body, input);
    }

    /**
     * Get a property with the given name, or undefined if it does not exist.
     */

  }, {
    key: 'getProperty',
    value: function getProperty(key) {
      var body = this.body,
          superClass = this.superClass;

      var prop = body.getProperty(key);
      if (prop) {
        return prop;
      } else if (superClass && typeof superClass.getProperty === 'function') {
        return superClass.getProperty(key);
      }
    }

    /**
     * Determine whether a property with the given name exists.
     */

  }, {
    key: 'hasProperty',
    value: function hasProperty(key) {
      var body = this.body,
          superClass = this.superClass;

      if (body.hasProperty(key)) {
        return true;
      } else if (superClass && typeof superClass.hasProperty === 'function') {
        return superClass.hasProperty(key);
      } else {
        return false;
      }
    }

    /**
     * Determine whether this class declaration represents a super class of
     * the given type.
     */

  }, {
    key: 'isSuperClassOf',
    value: function isSuperClassOf(candidate) {
      var body = this.body,
          shapeID = this.shapeID;

      var current = candidate;

      while (current != null) {
        if (current === this || current === body || current.shapeID === shapeID) {
          return true;
        }
        if (current instanceof ClassDeclaration) {
          current = current.superClass;
        } else {
          current = current.unwrap();
        }
      }
      return false;
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }
  }, {
    key: 'toString',
    value: function toString(withDeclaration) {
      var name = this.name,
          superClass = this.superClass,
          body = this.body;

      if (withDeclaration) {
        var superClassName = superClass && (typeof superClass.name === 'string' && superClass.name || superClass.toString());
        return 'declare class ' + name + (superClassName ? ' extends ' + superClassName : '') + ' ' + body.toString();
      } else {
        return name;
      }
    }
  }, {
    key: 'properties',
    get: function get$$1() {
      var body = this.body,
          superClass = this.superClass;

      if (superClass == null) {
        return body.properties;
      }
      var bodyProps = body.properties;
      var superProps = superClass.unwrap().properties;
      if (superProps == null) {
        return bodyProps;
      }
      var seen = {};
      var seenStatic = {};
      var props = [];
      for (var i = 0; i < superProps.length; i++) {
        var prop = superProps[i];
        props.push(prop);
        if (prop.static) {
          seenStatic[prop.key] = i;
        } else {
          seen[prop.key] = i;
        }
      }
      for (var _i = 0; _i < bodyProps.length; _i++) {
        var _prop = bodyProps[_i];
        if (seen[_prop.key]) {
          props[_i] = _prop;
        } else {
          props.push(_prop);
        }
      }
      return props;
    }
  }]);
  return ClassDeclaration;
}(Declaration);

var PartialType = function (_Type) {
  inherits(PartialType, _Type);

  function PartialType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, PartialType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = PartialType.__proto__ || Object.getPrototypeOf(PartialType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'PartialType', _this.typeParameters = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(PartialType, [{
    key: 'typeParameter',
    value: function typeParameter(id, bound, defaultType) {
      var target = new TypeParameter(this.context);
      target.id = id;
      target.bound = bound;
      target.default = defaultType;
      this.typeParameters.push(target);
      return target;
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var constraints, type, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              constraints = this.constraints, type = this.type;
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 5;
              _iterator = type.errors(validation, path, input)[Symbol.iterator]();

            case 7:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 15;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 12;
              return error;

            case 12:
              _iteratorNormalCompletion = true;
              _context.next = 7;
              break;

            case 15:
              _context.next = 21;
              break;

            case 17:
              _context.prev = 17;
              _context.t0 = _context['catch'](5);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 21:
              _context.prev = 21;
              _context.prev = 22;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 24:
              _context.prev = 24;

              if (!_didIteratorError) {
                _context.next = 27;
                break;
              }

              throw _iteratorError;

            case 27:
              return _context.finish(24);

            case 28:
              return _context.finish(21);

            case 29:
              if (!(!hasErrors && constraints)) {
                _context.next = 31;
                break;
              }

              return _context.delegateYield(collectConstraintErrors(this, validation, path, input), 't1', 31);

            case 31:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[5, 17, 21, 29], [22,, 24, 28]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var constraints = this.constraints,
          type = this.type;

      if (!type.accepts(input)) {
        return false;
      } else if (constraints && !constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input === this) {
        return 0;
      } else {
        return compareTypes(this.type, input);
      }
    }
  }, {
    key: 'toString',
    value: function toString(expand) {
      var type = this.type;

      return type.toString(expand);
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        typeParameters: this.typeParameters,
        type: this.type
      };
    }
  }]);
  return PartialType;
}(Type);

var ParameterizedClassDeclaration = function (_Declaration) {
  inherits(ParameterizedClassDeclaration, _Declaration);

  function ParameterizedClassDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ParameterizedClassDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ParameterizedClassDeclaration.__proto__ || Object.getPrototypeOf(ParameterizedClassDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ParameterizedClassDeclaration', _this.shapeID = Symbol(), _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ParameterizedClassDeclaration, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      for (var _len2 = arguments.length, typeInstances = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
        typeInstances[_key2 - 3] = arguments[_key2];
      }

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(getPartial.apply(undefined, [this].concat(toConsumableArray(typeInstances))).errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      for (var _len3 = arguments.length, typeInstances = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        typeInstances[_key3 - 1] = arguments[_key3];
      }

      return getPartial.apply(undefined, [this].concat(toConsumableArray(typeInstances))).accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return getPartial(this).compareWith(input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      for (var _len4 = arguments.length, typeInstances = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        typeInstances[_key4] = arguments[_key4];
      }

      return getPartial.apply(undefined, [this].concat(toConsumableArray(typeInstances))).type;
    }
  }, {
    key: 'isSuperClassOf',
    value: function isSuperClassOf(candidate) {
      return getPartial(this).type.isSuperClassOf(candidate);
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len5 = arguments.length, typeInstances = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        typeInstances[_key5] = arguments[_key5];
      }

      target.typeInstances = typeInstances;
      return target;
    }
  }, {
    key: 'toString',
    value: function toString(withDeclaration) {
      if (!withDeclaration) {
        return this.name;
      }
      var partial = getPartial(this);
      var type = partial.type,
          typeParameters = partial.typeParameters;

      if (typeParameters.length === 0) {
        return partial.toString(true);
      }
      var items = [];
      for (var i = 0; i < typeParameters.length; i++) {
        var typeParameter = typeParameters[i];
        items.push(typeParameter.toString(true));
      }
      var superClass = type.superClass,
          body = type.body;

      var superClassName = superClass && (typeof superClass.name === 'string' && superClass.name || superClass.toString());
      return 'declare class ' + this.name + '<' + items.join(', ') + '>' + (superClassName ? ' extends ' + superClassName : '') + ' ' + body.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return getPartial(this).toJSON();
    }
  }, {
    key: 'superClass',
    get: function get$$1() {
      return getPartial(this).type.superClass;
    }
  }, {
    key: 'body',
    get: function get$$1() {
      return getPartial(this).type.body;
    }
  }, {
    key: 'properties',
    get: function get$$1() {
      return getPartial(this).type.properties;
    }
  }, {
    key: 'typeParameters',
    get: function get$$1() {
      return getPartial(this).typeParameters;
    }
  }]);
  return ParameterizedClassDeclaration;
}(Declaration);

function getPartial(parent) {
  var context = parent.context,
      bodyCreator = parent.bodyCreator;

  var partial = new PartialType(context);
  var body = bodyCreator(partial);
  if (Array.isArray(body)) {
    partial.type = context.class.apply(context, [parent.name].concat(toConsumableArray(body)));
  } else {
    partial.type = context.class(parent.name, body);
  }

  partial.type.shapeID = parent.shapeID;

  var typeParameters = partial.typeParameters;

  for (var _len6 = arguments.length, typeInstances = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
    typeInstances[_key6 - 1] = arguments[_key6];
  }

  var limit = Math.min(typeInstances.length, typeParameters.length);
  for (var i = 0; i < limit; i++) {
    var typeParameter = typeParameters[i];
    var typeInstance = typeInstances[i];
    if (typeParameter.bound && typeParameter.bound !== typeInstance) {
      // if the type parameter is already bound we need to
      // create an intersection type with this one.
      typeParameter.bound = context.intersect(typeParameter.bound, typeInstance);
    } else {
      typeParameter.bound = typeInstance;
    }
  }

  return partial;
}

var ExtendsDeclaration = function (_Declaration) {
  inherits(ExtendsDeclaration, _Declaration);

  function ExtendsDeclaration() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ExtendsDeclaration);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ExtendsDeclaration.__proto__ || Object.getPrototypeOf(ExtendsDeclaration)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ExtendsDeclaration', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ExtendsDeclaration, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString(withDeclaration) {
      var type = this.type;

      if (withDeclaration) {
        return 'extends ' + type.toString();
      } else {
        return type.toString();
      }
    }
  }]);
  return ExtendsDeclaration;
}(Declaration);

var _marked$1 = /*#__PURE__*/_regeneratorRuntime.mark(collectErrorsWithIndexers);
var _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(collectErrorsWithoutIndexers);
var _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(collectErrorsExact);

var ObjectType = function (_Type) {
  inherits(ObjectType, _Type);

  function ObjectType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ObjectType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ObjectType.__proto__ || Object.getPrototypeOf(ObjectType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ObjectType', _this.properties = [], _this.indexers = [], _this.callProperties = [], _this.exact = false, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ObjectType, [{
    key: 'getProperty',


    /**
     * Get a property with the given name, or undefined if it does not exist.
     */
    value: function getProperty(key) {
      var properties = this.properties;
      var length = properties.length;

      for (var i = 0; i < length; i++) {
        var property = properties[i];
        if (property.key === key) {
          return property;
        }
      }
      return this.getIndexer(key);
    }
  }, {
    key: 'setProperty',
    value: function setProperty(key, value) {
      var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var context = this.context,
          properties = this.properties;
      var length = properties.length;

      var newProp = new ObjectTypeProperty(context);
      newProp.key = key;
      newProp.value = value;
      newProp.optional = optional;

      for (var i = 0; i < length; i++) {
        var property = properties[i];
        if (property.key === key) {
          properties[i] = newProp;
          return;
        }
      }
      properties.push(newProp);
    }

    /**
     * Determine whether a property with the given name exists.
     */

  }, {
    key: 'hasProperty',
    value: function hasProperty(key) {
      var properties = this.properties;
      var length = properties.length;

      for (var i = 0; i < length; i++) {
        var property = properties[i];
        if (property.key === key) {
          return true;
        }
      }
      return this.hasIndexer(key);
    }

    /**
     * Get an indexer with which matches the given key type.
     */

  }, {
    key: 'getIndexer',
    value: function getIndexer(key) {
      var indexers = this.indexers;
      var length = indexers.length;

      for (var i = 0; i < length; i++) {
        var indexer = indexers[i];
        if (indexer.acceptsKey(key)) {
          return indexer;
        }
      }
    }

    /**
     * Determine whether an indexer exists which matches the given key type.
     */

  }, {
    key: 'hasIndexer',
    value: function hasIndexer(key) {
      var indexers = this.indexers;
      var length = indexers.length;

      for (var i = 0; i < length; i++) {
        var indexer = indexers[i];
        if (indexer.acceptsKey(key)) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var hasCallProperties;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(input === null)) {
                _context.next = 4;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 3:
              return _context.abrupt('return');

            case 4:
              hasCallProperties = this.callProperties.length > 0;

              if (!hasCallProperties) {
                _context.next = 11;
                break;
              }

              if (acceptsCallProperties(this, input)) {
                _context.next = 9;
                break;
              }

              _context.next = 9;
              return [path, getErrorMessage('ERR_EXPECT_CALLABLE'), this];

            case 9:
              _context.next = 15;
              break;

            case 11:
              if (!((typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object')) {
                _context.next = 15;
                break;
              }

              _context.next = 14;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 14:
              return _context.abrupt('return');

            case 15:
              if (!validation.inCycle(this, input)) {
                _context.next = 17;
                break;
              }

              return _context.abrupt('return');

            case 17:
              validation.startCycle(this, input);

              if (!(this.indexers.length > 0)) {
                _context.next = 26;
                break;
              }

              if (!(input instanceof Object && Array.isArray(input))) {
                _context.next = 23;
                break;
              }

              _context.next = 22;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 22:
              return _context.abrupt('return');

            case 23:
              return _context.delegateYield(collectErrorsWithIndexers(this, validation, path, input), 't0', 24);

            case 24:
              _context.next = 27;
              break;

            case 26:
              return _context.delegateYield(collectErrorsWithoutIndexers(this, validation, path, input), 't1', 27);

            case 27:
              if (!this.exact) {
                _context.next = 29;
                break;
              }

              return _context.delegateYield(collectErrorsExact(this, validation, path, input), 't2', 29);

            case 29:
              validation.endCycle(this, input);

            case 30:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      if (input === null) {
        return false;
      }
      var hasCallProperties = this.callProperties.length > 0;

      if (hasCallProperties) {
        if (!acceptsCallProperties(this, input)) {
          return false;
        }
      } else if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object') {
        return false;
      }
      if (inValidationCycle(this, input)) {
        return true;
      }
      startValidationCycle(this, input);

      var result = void 0;
      if (this.indexers.length > 0) {
        result = acceptsWithIndexers(this, input);
      } else {
        result = acceptsWithoutIndexers(this, input);
      }
      if (result && this.exact) {
        result = acceptsExact(this, input);
      }
      endValidationCycle(this, input);
      return result;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof ObjectType || input instanceof ClassDeclaration || input instanceof ParameterizedClassDeclaration)) {
        return -1;
      }
      var hasCallProperties = this.callProperties.length > 0;

      var isGreater = false;
      if (hasCallProperties) {
        var _result = compareTypeCallProperties(this, input);
        if (_result === -1) {
          return -1;
        } else if (_result === 1) {
          isGreater = true;
        }
      }

      var result = void 0;
      if (this.indexers.length > 0) {
        result = compareTypeWithIndexers(this, input);
      } else {
        result = compareTypeWithoutIndexers(this, input);
      }

      if (result === -1) {
        return -1;
      } else if (isGreater) {
        return 1;
      } else {
        return result;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var callProperties = this.callProperties,
          properties = this.properties,
          indexers = this.indexers;

      if (inToStringCycle(this)) {
        return '$Cycle<Object>';
      }
      startToStringCycle(this);
      var body = [];
      for (var i = 0; i < callProperties.length; i++) {
        body.push(callProperties[i].toString());
      }
      for (var _i = 0; _i < properties.length; _i++) {
        body.push(properties[_i].toString());
      }
      for (var _i2 = 0; _i2 < indexers.length; _i2++) {
        body.push(indexers[_i2].toString());
      }
      endToStringCycle(this);
      if (this.exact) {
        return '{|\n' + indent(body.join('\n')) + '\n|}';
      } else {
        return '{\n' + indent(body.join('\n')) + '\n}';
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        callProperties: this.callProperties,
        properties: this.properties,
        indexers: this.indexers,
        exact: this.exact
      };
    }
  }]);
  return ObjectType;
}(Type);

function acceptsCallProperties(type, input) {
  var callProperties = type.callProperties;

  for (var i = 0; i < callProperties.length; i++) {
    var callProperty = callProperties[i];
    if (callProperty.accepts(input)) {
      return true;
    }
  }
  return false;
}

function compareTypeCallProperties(type, input) {
  var callProperties = type.callProperties;

  var inputCallProperties = input.callProperties;
  var identicalCount = 0;
  loop: for (var i = 0; i < callProperties.length; i++) {
    var callProperty = callProperties[i];

    for (var j = 0; j < inputCallProperties.length; j++) {
      var inputCallProperty = inputCallProperties[j];
      var result = compareTypes(callProperty, inputCallProperty);
      if (result === 0) {
        identicalCount++;
        continue loop;
      } else if (result === 1) {
        continue loop;
      }
    }
    // If we got this far, nothing accepted.
    return -1;
  }
  if (identicalCount === callProperties.length) {
    return 0;
  } else {
    return 1;
  }
}

function acceptsWithIndexers(type, input) {
  var properties = type.properties,
      indexers = type.indexers;

  var seen = [];
  for (var i = 0; i < properties.length; i++) {
    var property = properties[i];
    if (!property.accepts(input)) {
      return false;
    }
    seen.push(property.key);
  }
  loop: for (var key in input) {
    if (seen.indexOf(key) !== -1) {
      continue;
    }
    var value = input[key];
    for (var _i3 = 0; _i3 < indexers.length; _i3++) {
      var indexer = indexers[_i3];
      if (indexer.acceptsKey(key) && indexer.acceptsValue(value)) {
        continue loop;
      }
    }

    // if we got this far the key / value did not accepts any indexers.
    return false;
  }
  return true;
}

function compareTypeWithIndexers(type, input) {
  var indexers = type.indexers,
      properties = type.properties;

  var inputIndexers = input.indexers;
  var inputProperties = input.properties;
  var isGreater = false;
  loop: for (var i = 0; i < properties.length; i++) {
    var property = properties[i];
    for (var j = 0; j < inputProperties.length; j++) {
      var inputProperty = inputProperties[j];
      if (inputProperty.key === property.key) {
        var result = compareTypes(property, inputProperty);
        if (result === -1) {
          return -1;
        } else if (result === 1) {
          isGreater = true;
        }
        continue loop;
      }
    }
  }
  loop: for (var _i4 = 0; _i4 < indexers.length; _i4++) {
    var indexer = indexers[_i4];
    for (var _j = 0; _j < inputIndexers.length; _j++) {
      var inputIndexer = inputIndexers[_j];
      var _result2 = compareTypes(indexer, inputIndexer);
      if (_result2 === 1) {
        isGreater = true;
        continue loop;
      } else if (_result2 === 0) {
        continue loop;
      }
    }
    // if we got this far, nothing accepted
    return -1;
  }
  return isGreater ? 1 : 0;
}

function acceptsWithoutIndexers(type, input) {
  var properties = type.properties;

  for (var i = 0; i < properties.length; i++) {
    var property = properties[i];
    if (!property.accepts(input)) {
      return false;
    }
  }
  return true;
}

function acceptsExact(type, input) {
  var properties = type.properties;

  var _loop = function _loop(key) {
    // eslint-disable-line guard-for-in
    if (!properties.some(function (property) {
      return property.key === key;
    })) {
      return {
        v: false
      };
    }
  };

  for (var key in input) {
    var _ret2 = _loop(key);

    if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
  }
  return true;
}

function compareTypeWithoutIndexers(type, input) {
  var properties = type.properties;

  var inputProperties = input.properties;
  var isGreater = false;
  loop: for (var i = 0; i < properties.length; i++) {
    var property = properties[i];
    for (var j = 0; j < inputProperties.length; j++) {
      var inputProperty = inputProperties[j];
      if (inputProperty.key === property.key) {
        var result = compareTypes(property.value, inputProperty.value);
        if (result === -1) {
          return -1;
        } else if (result === 1) {
          isGreater = true;
        }
        continue loop;
      }
    }
    return -1;
  }
  return isGreater ? 1 : 0;
}

function collectErrorsWithIndexers(type, validation, path, input) {
  var properties, indexers, seen, i, property, key, value, _i5, indexer;

  return _regeneratorRuntime.wrap(function collectErrorsWithIndexers$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          properties = type.properties, indexers = type.indexers;
          seen = [];
          i = 0;

        case 3:
          if (!(i < properties.length)) {
            _context2.next = 10;
            break;
          }

          property = properties[i];
          return _context2.delegateYield(property.errors(validation, path, input), 't0', 6);

        case 6:
          seen.push(property.key);

        case 7:
          i++;
          _context2.next = 3;
          break;

        case 10:
          _context2.t1 = _regeneratorRuntime.keys(input);

        case 11:
          if ((_context2.t2 = _context2.t1()).done) {
            _context2.next = 28;
            break;
          }

          key = _context2.t2.value;

          if (!(seen.indexOf(key) !== -1)) {
            _context2.next = 15;
            break;
          }

          return _context2.abrupt('continue', 11);

        case 15:
          value = input[key];
          _i5 = 0;

        case 17:
          if (!(_i5 < indexers.length)) {
            _context2.next = 24;
            break;
          }

          indexer = indexers[_i5];

          if (!(indexer.acceptsKey(key) && indexer.acceptsValue(value))) {
            _context2.next = 21;
            break;
          }

          return _context2.abrupt('continue', 11);

        case 21:
          _i5++;
          _context2.next = 17;
          break;

        case 24:
          _context2.next = 26;
          return [path.concat(key), getErrorMessage('ERR_NO_INDEXER'), type];

        case 26:
          _context2.next = 11;
          break;

        case 28:
        case 'end':
          return _context2.stop();
      }
    }
  }, _marked$1, this);
}

function collectErrorsWithoutIndexers(type, validation, path, input) {
  var properties, i, property;
  return _regeneratorRuntime.wrap(function collectErrorsWithoutIndexers$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          properties = type.properties;
          i = 0;

        case 2:
          if (!(i < properties.length)) {
            _context3.next = 8;
            break;
          }

          property = properties[i];
          return _context3.delegateYield(property.errors(validation, path, input), 't0', 5);

        case 5:
          i++;
          _context3.next = 2;
          break;

        case 8:
        case 'end':
          return _context3.stop();
      }
    }
  }, _marked2, this);
}

function collectErrorsExact(type, validation, path, input) {
  var _this2 = this;

  var properties, _loop2, key;

  return _regeneratorRuntime.wrap(function collectErrorsExact$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          properties = type.properties;
          _loop2 = /*#__PURE__*/_regeneratorRuntime.mark(function _loop2(key) {
            return _regeneratorRuntime.wrap(function _loop2$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    if (properties.some(function (property) {
                      return property.key === key;
                    })) {
                      _context4.next = 3;
                      break;
                    }

                    _context4.next = 3;
                    return [path, getErrorMessage('ERR_UNKNOWN_KEY', key), type];

                  case 3:
                  case 'end':
                    return _context4.stop();
                }
              }
            }, _loop2, _this2);
          });
          _context5.t0 = _regeneratorRuntime.keys(input);

        case 3:
          if ((_context5.t1 = _context5.t0()).done) {
            _context5.next = 8;
            break;
          }

          key = _context5.t1.value;
          return _context5.delegateYield(_loop2(key), 't2', 6);

        case 6:
          _context5.next = 3;
          break;

        case 8:
        case 'end':
          return _context5.stop();
      }
    }
  }, _marked3, this);
}

function indent(input) {
  var lines = input.split('\n');
  var length = lines.length;

  for (var i = 0; i < length; i++) {
    lines[i] = '  ' + lines[i];
  }
  return lines.join('\n');
}

var IntersectionType = function (_Type) {
  inherits(IntersectionType, _Type);

  function IntersectionType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, IntersectionType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = IntersectionType.__proto__ || Object.getPrototypeOf(IntersectionType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'IntersectionType', _this.types = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(IntersectionType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var types, length, i;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              types = this.types;
              length = types.length;
              i = 0;

            case 3:
              if (!(i < length)) {
                _context.next = 8;
                break;
              }

              return _context.delegateYield(types[i].errors(validation, path, input), 't0', 5);

            case 5:
              i++;
              _context.next = 3;
              break;

            case 8:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })

    /**
     * Get a property with the given name, or undefined if it does not exist.
     */

  }, {
    key: 'getProperty',
    value: function getProperty(key) {
      var types = this.types;
      var length = types.length;

      for (var i = length - 1; i >= 0; i--) {
        var type = types[i];
        if (typeof type.getProperty === 'function') {
          var prop = type.getProperty(key);
          if (prop) {
            return prop;
          }
        }
      }
    }

    /**
     * Determine whether a property with the given name exists.
     */

  }, {
    key: 'hasProperty',
    value: function hasProperty(key) {
      var types = this.types;
      var length = types.length;

      for (var i = 0; i < length; i++) {
        var type = types[i];
        if (typeof type.hasProperty === 'function' && type.hasProperty(key)) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var types = this.types;
      var length = types.length;

      for (var i = 0; i < length; i++) {
        var type = types[i];
        if (!type.accepts(input)) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var types = this.types;
      var identicalCount = 0;
      if (input instanceof IntersectionType) {
        var inputTypes = input.types;
        loop: for (var i = 0; i < types.length; i++) {
          var type = types[i];
          for (var j = 0; j < inputTypes.length; j++) {
            var result = compareTypes(type, inputTypes[i]);
            if (result === 0) {
              identicalCount++;
              continue loop;
            } else if (result === 1) {
              continue loop;
            }
          }
          // if we got this far then nothing accepted this type.
          return -1;
        }
        return identicalCount === types.length ? 0 : 1;
      } else {
        for (var _i = 0; _i < types.length; _i++) {
          var _type = types[_i];
          var _result = compareTypes(_type, input);
          if (_result === -1) {
            return -1;
          } else if (_result === 0) {
            identicalCount++;
          }
        }
        return identicalCount === types.length ? 0 : 1;
      }
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _ref2;

      var callProperties = [];
      var properties = [];
      var indexers = [];
      var types = this.types,
          context = this.context;

      for (var i = 0; i < types.length; i++) {
        var type = types[i].unwrap();
        invariant(type instanceof ObjectType, 'Can only intersect object types');
        callProperties.push.apply(callProperties, toConsumableArray(type.callProperties));
        indexers.push.apply(indexers, toConsumableArray(type.indexers));
        mergeProperties(properties, type.properties);
      }
      return (_ref2 = context).object.apply(_ref2, callProperties.concat(properties, indexers));
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.types.join(' & ');
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        types: this.types
      };
    }
  }]);
  return IntersectionType;
}(Type);

function getPropertyIndex(name, properties) {
  for (var i = 0; i < properties.length; i++) {
    if (properties[i].name === name) {
      return i;
    }
  }
  return -1;
}

function mergeProperties(target, source) {
  for (var i = 0; i < source.length; i++) {
    var typeProp = source[i];
    var index = getPropertyIndex(typeProp.key, target);
    if (index === -1) {
      target.push(typeProp);
    } else {
      target[index] = typeProp;
    }
  }
  return target;
}

var MixedType = function (_Type) {
  inherits(MixedType, _Type);

  function MixedType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, MixedType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = MixedType.__proto__ || Object.getPrototypeOf(MixedType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'MixedType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(MixedType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return true;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'mixed';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return MixedType;
}(Type);

var NumericLiteralType = function (_Type) {
  inherits(NumericLiteralType, _Type);

  function NumericLiteralType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, NumericLiteralType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = NumericLiteralType.__proto__ || Object.getPrototypeOf(NumericLiteralType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'NumericLiteralType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(NumericLiteralType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var value;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              value = this.value;

              if (!(input !== value)) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_EXACT_VALUE', value), this];

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === this.value;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof NumericLiteralType && input.value === this.value) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '' + this.value;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        value: this.value
      };
    }
  }]);
  return NumericLiteralType;
}(Type);

var NumberType = function (_Type) {
  inherits(NumberType, _Type);

  function NumberType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, NumberType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = NumberType.__proto__ || Object.getPrototypeOf(NumberType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'NumberType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(NumberType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof input !== 'number')) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_NUMBER'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return typeof input === 'number';
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof NumberType) {
        return 0;
      } else if (input instanceof NumericLiteralType) {
        return 1;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'number';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return NumberType;
}(Type);

var ParameterizedTypeAlias = function (_TypeAlias) {
  inherits(ParameterizedTypeAlias, _TypeAlias);

  function ParameterizedTypeAlias() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ParameterizedTypeAlias);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ParameterizedTypeAlias.__proto__ || Object.getPrototypeOf(ParameterizedTypeAlias)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ParameterizedTypeAlias', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ParameterizedTypeAlias, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      for (var _len2 = arguments.length, typeInstances = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
        typeInstances[_key2 - 3] = arguments[_key2];
      }

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(getPartial$1.apply(undefined, [this].concat(toConsumableArray(typeInstances))).errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      for (var _len3 = arguments.length, typeInstances = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        typeInstances[_key3 - 1] = arguments[_key3];
      }

      var partial = getPartial$1.apply(undefined, [this].concat(toConsumableArray(typeInstances)));
      if (!partial.accepts(input)) {
        return false;
      } else if (!constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input === this) {
        return 0; // should never need this because it's taken care of by compareTypes.
      } else if (this.hasConstraints) {
        // if we have constraints the types cannot be the same
        return -1;
      } else {
        return compareTypes(getPartial$1(this), input);
      }
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      for (var _len4 = arguments.length, typeInstances = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        typeInstances[_key4 - 1] = arguments[_key4];
      }

      var inner = this.unwrap.apply(this, toConsumableArray(typeInstances));
      if (inner && typeof inner.hasProperty === 'function') {
        return inner.hasProperty.apply(inner, [name].concat(toConsumableArray(typeInstances)));
      } else {
        return false;
      }
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      for (var _len5 = arguments.length, typeInstances = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        typeInstances[_key5 - 1] = arguments[_key5];
      }

      var inner = this.unwrap.apply(this, toConsumableArray(typeInstances));
      if (inner && typeof inner.getProperty === 'function') {
        return inner.getProperty.apply(inner, [name].concat(toConsumableArray(typeInstances)));
      }
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      for (var _len6 = arguments.length, typeInstances = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        typeInstances[_key6] = arguments[_key6];
      }

      return getPartial$1.apply(undefined, [this].concat(toConsumableArray(typeInstances))).unwrap();
    }
  }, {
    key: 'toString',
    value: function toString(withDeclaration) {
      var partial = getPartial$1(this);
      var typeParameters = partial.typeParameters;

      var items = [];
      for (var i = 0; i < typeParameters.length; i++) {
        var typeParameter = typeParameters[i];
        items.push(typeParameter.toString(true));
      }

      var name = this.name;

      var identifier = typeParameters.length > 0 ? name + '<' + items.join(', ') + '>' : name;

      if (withDeclaration) {
        return 'type ' + identifier + ' = ' + partial.toString() + ';';
      } else {
        return identifier;
      }
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var partial = getPartial$1(this);
      return partial.toJSON();
    }
  }, {
    key: 'properties',
    get: function get$$1() {
      return getPartial$1(this).type.properties;
    }
  }]);
  return ParameterizedTypeAlias;
}(TypeAlias);

function getPartial$1(parent) {
  var typeCreator = parent.typeCreator,
      context = parent.context,
      name = parent.name;

  var partial = new PartialType(context);
  partial.name = name;
  partial.type = typeCreator(partial);
  partial.constraints = parent.constraints;

  var typeParameters = partial.typeParameters;

  for (var _len7 = arguments.length, typeInstances = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
    typeInstances[_key7 - 1] = arguments[_key7];
  }

  var limit = Math.min(typeInstances.length, typeParameters.length);
  for (var i = 0; i < limit; i++) {
    var typeParameter = typeParameters[i];
    var typeInstance = typeInstances[i];
    if (typeParameter.bound && typeParameter.bound !== typeInstance) {
      // if the type parameter is already bound we need to
      // create an intersection type with this one.
      typeParameter.bound = context.intersect(typeParameter.bound, typeInstance);
    } else {
      typeParameter.bound = typeInstance;
    }
  }

  return partial;
}

var ParameterizedFunctionType = function (_Type) {
  inherits(ParameterizedFunctionType, _Type);

  function ParameterizedFunctionType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ParameterizedFunctionType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ParameterizedFunctionType.__proto__ || Object.getPrototypeOf(ParameterizedFunctionType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ParameterizedFunctionType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ParameterizedFunctionType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      for (var _len2 = arguments.length, typeInstances = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
        typeInstances[_key2 - 3] = arguments[_key2];
      }

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(getPartial$2.apply(undefined, [this].concat(toConsumableArray(typeInstances))).errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      for (var _len3 = arguments.length, typeInstances = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        typeInstances[_key3 - 1] = arguments[_key3];
      }

      return getPartial$2.apply(undefined, [this].concat(toConsumableArray(typeInstances))).accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(getPartial$2(this), input);
    }
  }, {
    key: 'acceptsParams',
    value: function acceptsParams() {
      var _getPartial$type;

      return (_getPartial$type = getPartial$2(this).type).acceptsParams.apply(_getPartial$type, arguments);
    }
  }, {
    key: 'acceptsReturn',
    value: function acceptsReturn(input) {
      return getPartial$2(this).type.acceptsReturn(input);
    }
  }, {
    key: 'assertParams',
    value: function assertParams() {
      var _getPartial$type2;

      return (_getPartial$type2 = getPartial$2(this).type).assertParams.apply(_getPartial$type2, arguments);
    }
  }, {
    key: 'assertReturn',
    value: function assertReturn(input) {
      return getPartial$2(this).type.assertReturn(input);
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      for (var _len4 = arguments.length, typeInstances = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        typeInstances[_key4] = arguments[_key4];
      }

      return getPartial$2.apply(undefined, [this].concat(toConsumableArray(typeInstances))).unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      var partial = getPartial$2(this);
      var type = partial.type,
          typeParameters = partial.typeParameters;

      if (typeParameters.length === 0) {
        return type.toString();
      }
      var items = [];
      for (var i = 0; i < typeParameters.length; i++) {
        var typeParameter = typeParameters[i];
        items.push(typeParameter.toString(true));
      }
      return '<' + items.join(', ') + '> ' + type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      var partial = getPartial$2(this);
      return partial.toJSON();
    }
  }, {
    key: 'typeParameters',
    get: function get$$1() {
      return getPartial$2(this).typeParameters;
    }
  }, {
    key: 'params',
    get: function get$$1() {
      return getPartial$2(this).type.params;
    }
  }, {
    key: 'rest',
    get: function get$$1() {
      return getPartial$2(this).type.rest;
    }
  }, {
    key: 'returnType',
    get: function get$$1() {
      return getPartial$2(this).type.returnType;
    }
  }]);
  return ParameterizedFunctionType;
}(Type);

function getPartial$2(parent) {
  var context = parent.context,
      bodyCreator = parent.bodyCreator;

  var partial = new PartialType(context);
  var body = bodyCreator(partial);
  partial.type = context.function.apply(context, toConsumableArray(body));

  var typeParameters = partial.typeParameters;

  for (var _len5 = arguments.length, typeInstances = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    typeInstances[_key5 - 1] = arguments[_key5];
  }

  var limit = Math.min(typeInstances.length, typeParameters.length);
  for (var i = 0; i < limit; i++) {
    var typeParameter = typeParameters[i];
    var typeInstance = typeInstances[i];
    if (typeParameter.bound && typeParameter.bound !== typeInstance) {
      // if the type parameter is already bound we need to
      // create an intersection type with this one.
      typeParameter.bound = context.intersect(typeParameter.bound, typeInstance);
    } else {
      typeParameter.bound = typeInstance;
    }
  }

  return partial;
}

var RefinementType = function (_Type) {
  inherits(RefinementType, _Type);

  function RefinementType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, RefinementType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = RefinementType.__proto__ || Object.getPrototypeOf(RefinementType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'RefinementType', _this.constraints = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(RefinementType, [{
    key: 'addConstraint',
    value: function addConstraint() {
      for (var _len2 = arguments.length, constraints = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        constraints[_key2] = arguments[_key2];
      }

      addConstraints.apply(undefined, [this].concat(toConsumableArray(constraints)));
      return this;
    }
  }, {
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, hasErrors, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, error;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;
              hasErrors = false;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 5;
              _iterator = type.errors(validation, path, input)[Symbol.iterator]();

            case 7:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 15;
                break;
              }

              error = _step.value;

              hasErrors = true;
              _context.next = 12;
              return error;

            case 12:
              _iteratorNormalCompletion = true;
              _context.next = 7;
              break;

            case 15:
              _context.next = 21;
              break;

            case 17:
              _context.prev = 17;
              _context.t0 = _context['catch'](5);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 21:
              _context.prev = 21;
              _context.prev = 22;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 24:
              _context.prev = 24;

              if (!_didIteratorError) {
                _context.next = 27;
                break;
              }

              throw _iteratorError;

            case 27:
              return _context.finish(24);

            case 28:
              return _context.finish(21);

            case 29:
              if (hasErrors) {
                _context.next = 31;
                break;
              }

              return _context.delegateYield(collectConstraintErrors(this, validation, path, input), 't1', 31);

            case 31:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[5, 17, 21, 29], [22,, 24, 28]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      if (!type.accepts(input)) {
        return false;
      } else if (!constraintsAccept(this, input)) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input === this) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len3 = arguments.length, typeInstances = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        typeInstances[_key3] = arguments[_key3];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.hasProperty === 'function') {
        return inner.hasProperty(name);
      } else {
        return false;
      }
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.getProperty === 'function') {
        return inner.getProperty(name);
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var type = this.type;

      return '$Refinment<' + type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return RefinementType;
}(Type);

var StringLiteralType = function (_Type) {
  inherits(StringLiteralType, _Type);

  function StringLiteralType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, StringLiteralType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = StringLiteralType.__proto__ || Object.getPrototypeOf(StringLiteralType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'StringLiteralType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(StringLiteralType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var value;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              value = this.value;

              if (!(input !== value)) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_EXACT_VALUE', this.toString()), this];

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === this.value;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof StringLiteralType && input.value === this.value) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return JSON.stringify(this.value);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        value: this.value
      };
    }
  }]);
  return StringLiteralType;
}(Type);

var StringType = function (_Type) {
  inherits(StringType, _Type);

  function StringType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, StringType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = StringType.__proto__ || Object.getPrototypeOf(StringType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'StringType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(StringType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(typeof input !== 'string')) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_STRING'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return typeof input === 'string';
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof StringLiteralType) {
        return 1;
      } else if (input instanceof StringType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'string';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return StringType;
}(Type);

var SymbolLiteralType = function (_Type) {
  inherits(SymbolLiteralType, _Type);

  function SymbolLiteralType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, SymbolLiteralType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = SymbolLiteralType.__proto__ || Object.getPrototypeOf(SymbolLiteralType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'SymbolLiteralType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(SymbolLiteralType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var value;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              value = this.value;

              if (!(input !== value)) {
                _context.next = 4;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_EXACT_VALUE', this.toString()), this];

            case 4:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return input === this.value;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof SymbolLiteralType && input.value === this.value) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'typeof ' + String(this.value);
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        value: this.value
      };
    }
  }]);
  return SymbolLiteralType;
}(Type);

var SymbolType = function (_Type) {
  inherits(SymbolType, _Type);

  function SymbolType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, SymbolType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = SymbolType.__proto__ || Object.getPrototypeOf(SymbolType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'SymbolType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(SymbolType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!((typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'symbol')) {
                _context.next = 3;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_SYMBOL'), this];

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'symbol';
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (input instanceof SymbolLiteralType) {
        return 1;
      } else if (input instanceof SymbolType) {
        return 0;
      } else {
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'Symbol';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return SymbolType;
}(Type);

/**
 * # ThisType
 * Captures a reference to a particular instance of a class or a value,
 * and uses that value to perform an identity check.
 * In the case that `this` is undefined, any value will be permitted.
 */

var ThisType = function (_Type) {
  inherits(ThisType, _Type);

  function ThisType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ThisType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ThisType.__proto__ || Object.getPrototypeOf(ThisType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ThisType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ThisType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var recorded;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              recorded = this.recorded;

              if (!(input === recorded)) {
                _context.next = 5;
                break;
              }

              return _context.abrupt('return');

            case 5:
              if (!(typeof recorded === 'function' && input instanceof recorded)) {
                _context.next = 9;
                break;
              }

              return _context.abrupt('return');

            case 9:
              if (!(recorded != null)) {
                _context.next = 12;
                break;
              }

              _context.next = 12;
              return [path, getErrorMessage('ERR_EXPECT_THIS'), this];

            case 12:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var recorded = this.recorded;

      if (input === recorded) {
        return true;
      } else if (typeof recorded === 'function' && input instanceof recorded) {
        return true;
      } else if (recorded != null) {
        return false;
      } else {
        return true;
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      if (!(input instanceof ThisType)) {
        return -1;
      } else if (input.recorded && this.recorded) {
        return input.recorded === this.recorded ? 0 : -1;
      } else if (this.recorded) {
        return 0;
      } else {
        return 1;
      }
    }

    /**
     * Get the inner type.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString(withBinding) {
      return 'this';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return ThisType;
}(Type);

var warnedInstances$1 = new WeakSet();

var TypeBox = function (_Type) {
  inherits(TypeBox, _Type);

  function TypeBox() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeBox);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeBox.__proto__ || Object.getPrototypeOf(TypeBox)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeBox', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeBox, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.type, input);
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this.type;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.type.toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this.type.toJSON();
    }
  }, {
    key: 'name',
    get: function get$$1() {
      return this.type.name;
    }
  }, {
    key: 'type',
    get: function get$$1() {
      var reveal = this.reveal;

      var type = reveal();
      if (!type) {
        if (!warnedInstances$1.has(this)) {
          this.context.emitWarningMessage('Failed to reveal boxed type.');
          warnedInstances$1.add(this);
        }
        return this.context.mixed();
      } else if (!(type instanceof Type)) {
        // we got a boxed reference to something like a class
        return this.context.ref(type);
      }
      return type;
    }
  }]);
  return TypeBox;
}(Type);

var warnedMissing = {};

var TypeReference = function (_Type) {
  inherits(TypeReference, _Type);

  function TypeReference() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeReference);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeReference.__proto__ || Object.getPrototypeOf(TypeReference)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeReference', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(TypeReference, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.type, input);
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = this;

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type.unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return this.name;
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        name: this.name
      };
    }
  }, {
    key: 'type',
    get: function get$$1() {
      var context = this.context,
          name = this.name;

      var type = context.get(name);
      if (!type) {
        if (!warnedMissing[name]) {
          context.emitWarningMessage('Cannot resolve type: ' + name);
          warnedMissing[name] = true;
        }
        return context.any();
      }
      return type;
    }
  }]);
  return TypeReference;
}(Type);

var warnedInstances$2 = new WeakSet();

var RevealedName = Symbol('RevealedName');
var RevealedValue = Symbol('RevealedValue');

var TypeTDZ = function (_Type) {
  inherits(TypeTDZ, _Type);

  function TypeTDZ() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, TypeTDZ);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = TypeTDZ.__proto__ || Object.getPrototypeOf(TypeTDZ)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'TypeTDZ', _this[RevealedName] = undefined, _this[RevealedValue] = undefined, _temp), possibleConstructorReturn(_this, _ret);
  }

  // Issue 252


  // Issue 252


  createClass(TypeTDZ, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(getRevealed(this).errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return getRevealed(this).accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(getRevealed(this), input);
    }
  }, {
    key: 'apply',
    value: function apply() {
      var target = new TypeParameterApplication(this.context);
      target.parent = getRevealed(this);

      for (var _len2 = arguments.length, typeInstances = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        typeInstances[_key2] = arguments[_key2];
      }

      target.typeInstances = typeInstances;
      return target;
    }

    /**
     * Get the inner type or value.
     */

  }, {
    key: 'unwrap',
    value: function unwrap() {
      return getRevealed(this).unwrap();
    }
  }, {
    key: 'hasProperty',
    value: function hasProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.hasProperty === 'function') {
        return inner.hasProperty(name);
      } else {
        return false;
      }
    }
  }, {
    key: 'getProperty',
    value: function getProperty(name) {
      var inner = this.unwrap();
      if (inner && typeof inner.getProperty === 'function') {
        return inner.getProperty(name);
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      return getRevealed(this).toString();
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return getRevealed(this).toJSON();
    }
  }, {
    key: 'name',
    get: function get$$1() {
      var name = this[RevealedName];
      if (!name) {
        name = getRevealed(this).name;
      }
      return name;
    },
    set: function set$$1(value) {
      this[RevealedName] = value;
    }
  }]);
  return TypeTDZ;
}(Type);

function getRevealed(container) {
  var existing = container[RevealedValue];
  if (existing) {
    return existing;
  } else {
    var reveal = container.reveal;

    var type = reveal();
    if (!type) {
      if (!warnedInstances$2.has(container)) {
        var name = container[RevealedName];
        if (name) {
          container.context.emitWarningMessage('Failed to reveal type called "' + name + '" in Temporal Dead Zone.');
        } else {
          container.context.emitWarningMessage('Failed to reveal unknown type in Temporal Dead Zone.');
        }
        warnedInstances$2.add(container);
      }
      return container.context.mixed();
    } else if (!(type instanceof Type)) {
      // we got a boxed reference to something like a class
      return container.context.ref(type);
    }
    return type;
  }
}

var UnionType = function (_Type) {
  inherits(UnionType, _Type);

  function UnionType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, UnionType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = UnionType.__proto__ || Object.getPrototypeOf(UnionType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'UnionType', _this.types = [], _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(UnionType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var types, length, i, type;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              types = this.types;
              length = types.length;
              i = 0;

            case 3:
              if (!(i < length)) {
                _context.next = 10;
                break;
              }

              type = types[i];

              if (!type.accepts(input)) {
                _context.next = 7;
                break;
              }

              return _context.abrupt('return');

            case 7:
              i++;
              _context.next = 3;
              break;

            case 10:
              _context.next = 12;
              return [path, getErrorMessage('ERR_NO_UNION', this.toString()), this];

            case 12:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var types = this.types;
      var length = types.length;

      for (var i = 0; i < length; i++) {
        var type = types[i];
        if (type.accepts(input)) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var types = this.types;
      if (input instanceof UnionType) {
        var inputTypes = input.types;
        var identicalCount = 0;
        loop: for (var i = 0; i < types.length; i++) {
          var type = types[i];
          for (var j = 0; j < inputTypes.length; j++) {
            var result = compareTypes(type, inputTypes[i]);
            if (result === 0) {
              identicalCount++;
              continue loop;
            } else if (result === 1) {
              continue loop;
            }
          }
          // if we got this far then nothing accepted this type.
          return -1;
        }

        if (identicalCount === types.length) {
          return 0;
        } else {
          return 1;
        }
      } else {
        for (var _i = 0; _i < types.length; _i++) {
          var _type = types[_i];
          if (compareTypes(_type, input) >= 0) {
            return 1;
          }
        }
        return -1;
      }
    }
  }, {
    key: 'toString',
    value: function toString() {
      var types = this.types;

      var normalized = new Array(types.length);
      for (var i = 0; i < types.length; i++) {
        var type = types[i];
        if (type.typeName === 'FunctionType' || type.typeName === 'ParameterizedFunctionType') {
          normalized[i] = '(' + type.toString() + ')';
        } else {
          normalized[i] = type.toString();
        }
      }
      return normalized.join(' | ');
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        types: this.types
      };
    }
  }]);
  return UnionType;
}(Type);

function registerPrimitiveTypes(t) {
  primitiveTypes.null = Object.freeze(new NullLiteralType(t));
  primitiveTypes.empty = Object.freeze(new EmptyType(t));
  primitiveTypes.number = Object.freeze(new NumberType(t));
  primitiveTypes.boolean = Object.freeze(new BooleanType(t));
  primitiveTypes.string = Object.freeze(new StringType(t));
  primitiveTypes.symbol = Object.freeze(new SymbolType(t));
  primitiveTypes.any = Object.freeze(new AnyType(t));
  primitiveTypes.mixed = Object.freeze(new MixedType(t));
  primitiveTypes.void = Object.freeze(new VoidType(t));
  primitiveTypes.existential = Object.freeze(new ExistentialType(t));
  return t;
}

function registerBuiltinTypeConstructors(t) {

  t.declareTypeConstructor({
    name: 'Date',
    impl: Date,
    typeName: 'DateType',
    errors: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (input instanceof Date) {
                _context.next = 5;
                break;
              }

              _context.next = 3;
              return [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', 'Date'), this];

            case 3:
              _context.next = 8;
              break;

            case 5:
              if (!isNaN(input.getTime())) {
                _context.next = 8;
                break;
              }

              _context.next = 8;
              return [path, getErrorMessage('ERR_INVALID_DATE'), this];

            case 8:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    }),
    accepts: function accepts(input) {
      return input instanceof Date && !isNaN(input.getTime());
    },
    compareWith: function compareWith(input) {
      if (input.typeName === 'DateType') {
        return 0;
      }
      return -1;
    },
    inferTypeParameters: function inferTypeParameters(input) {
      return [];
    }
  });

  t.declareTypeConstructor({
    name: 'Promise',
    impl: Promise,
    typeName: 'PromiseType',
    errors: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input, futureType) {
      var context;
      return _regeneratorRuntime.wrap(function errors$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              invariant(futureType, 'Must specify type parameter for Promise.');
              context = this.context;

              if (context.checkPredicate('Promise', input)) {
                _context2.next = 5;
                break;
              }

              _context2.next = 5;
              return [path, getErrorMessage('ERR_EXPECT_PROMISE', futureType), this];

            case 5:
            case 'end':
              return _context2.stop();
          }
        }
      }, errors, this);
    }),
    accepts: function accepts(input) {
      var context = this.context;

      return context.checkPredicate('Promise', input);
    },
    compareWith: function compareWith(input) {
      if (input.typeName === 'PromiseType') {
        return 0;
      }
      return -1;
    },
    inferTypeParameters: function inferTypeParameters(input) {
      return [];
    }
  });

  t.declareTypeConstructor({
    name: 'Map',
    impl: Map,
    typeName: 'MapType',
    errors: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input, keyType, valueType) {
      var context, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _ref, _ref2, key, value;

      return _regeneratorRuntime.wrap(function errors$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              invariant(keyType, 'Must specify two type parameters for Map.');
              invariant(valueType, 'Must specify two type parameters for Map.');
              context = this.context;

              if (context.checkPredicate('Map', input)) {
                _context3.next = 7;
                break;
              }

              _context3.next = 6;
              return [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', 'Map'), this];

            case 6:
              return _context3.abrupt('return');

            case 7:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context3.prev = 10;
              _iterator = input[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context3.next = 24;
                break;
              }

              _ref = _step.value;
              _ref2 = slicedToArray(_ref, 2);
              key = _ref2[0];
              value = _ref2[1];

              if (keyType.accepts(key)) {
                _context3.next = 20;
                break;
              }

              _context3.next = 20;
              return [path, getErrorMessage('ERR_EXPECT_KEY_TYPE', keyType), this];

            case 20:
              return _context3.delegateYield(valueType.errors(validation, path.concat(key), value), 't0', 21);

            case 21:
              _iteratorNormalCompletion = true;
              _context3.next = 12;
              break;

            case 24:
              _context3.next = 30;
              break;

            case 26:
              _context3.prev = 26;
              _context3.t1 = _context3['catch'](10);
              _didIteratorError = true;
              _iteratorError = _context3.t1;

            case 30:
              _context3.prev = 30;
              _context3.prev = 31;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 33:
              _context3.prev = 33;

              if (!_didIteratorError) {
                _context3.next = 36;
                break;
              }

              throw _iteratorError;

            case 36:
              return _context3.finish(33);

            case 37:
              return _context3.finish(30);

            case 38:
            case 'end':
              return _context3.stop();
          }
        }
      }, errors, this, [[10, 26, 30, 38], [31,, 33, 37]]);
    }),
    accepts: function accepts(input, keyType, valueType) {
      var context = this.context;

      if (!context.checkPredicate('Map', input)) {
        return false;
      }
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _ref3 = _step2.value;

          var _ref4 = slicedToArray(_ref3, 2);

          var key = _ref4[0];
          var value = _ref4[1];

          if (!keyType.accepts(key) || !valueType.accepts(value)) {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return true;
    },
    compareWith: function compareWith(input) {
      if (input.typeName === 'MapType') {
        return 0;
      }
      return -1;
    },
    inferTypeParameters: function inferTypeParameters(input) {
      var keyTypes = [];
      var valueTypes = [];
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        loop: for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _ref5 = _step3.value;

          var _ref6 = slicedToArray(_ref5, 2);

          var key = _ref6[0];
          var value = _ref6[1];

          findKey: {
            for (var i = 0; i < keyTypes.length; i++) {
              var type = keyTypes[i];
              if (type.accepts(key)) {
                break findKey;
              }
            }
            keyTypes.push(t.typeOf(key));
          }

          for (var _i = 0; _i < valueTypes.length; _i++) {
            var _type = valueTypes[_i];
            if (_type.accepts(value)) {
              continue loop;
            }
          }
          valueTypes.push(t.typeOf(value));
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      var typeInstances = [];

      if (keyTypes.length === 0) {
        typeInstances.push(t.existential());
      } else if (keyTypes.length === 1) {
        typeInstances.push(keyTypes[0]);
      } else {
        typeInstances.push(t.union.apply(t, keyTypes));
      }

      if (valueTypes.length === 0) {
        typeInstances.push(t.existential());
      } else if (valueTypes.length === 1) {
        typeInstances.push(valueTypes[0]);
      } else {
        typeInstances.push(t.union.apply(t, valueTypes));
      }

      return typeInstances;
    }
  });

  t.declareTypeConstructor({
    name: 'Set',
    impl: Set,
    typeName: 'SetType',
    errors: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input, valueType) {
      var context, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, value;

      return _regeneratorRuntime.wrap(function errors$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              invariant(valueType, 'Must specify type parameter for Set.');
              context = this.context;

              if (context.checkPredicate('Set', input)) {
                _context4.next = 6;
                break;
              }

              _context4.next = 5;
              return [path, getErrorMessage('ERR_EXPECT_INSTANCEOF', 'Set'), this];

            case 5:
              return _context4.abrupt('return');

            case 6:
              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context4.prev = 9;
              _iterator4 = input[Symbol.iterator]();

            case 11:
              if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                _context4.next = 17;
                break;
              }

              value = _step4.value;
              return _context4.delegateYield(valueType.errors(validation, path, value), 't0', 14);

            case 14:
              _iteratorNormalCompletion4 = true;
              _context4.next = 11;
              break;

            case 17:
              _context4.next = 23;
              break;

            case 19:
              _context4.prev = 19;
              _context4.t1 = _context4['catch'](9);
              _didIteratorError4 = true;
              _iteratorError4 = _context4.t1;

            case 23:
              _context4.prev = 23;
              _context4.prev = 24;

              if (!_iteratorNormalCompletion4 && _iterator4.return) {
                _iterator4.return();
              }

            case 26:
              _context4.prev = 26;

              if (!_didIteratorError4) {
                _context4.next = 29;
                break;
              }

              throw _iteratorError4;

            case 29:
              return _context4.finish(26);

            case 30:
              return _context4.finish(23);

            case 31:
            case 'end':
              return _context4.stop();
          }
        }
      }, errors, this, [[9, 19, 23, 31], [24,, 26, 30]]);
    }),
    accepts: function accepts(input, valueType) {
      var context = this.context;

      if (!context.checkPredicate('Set', input)) {
        return false;
      }
      var _iteratorNormalCompletion5 = true;
      var _didIteratorError5 = false;
      var _iteratorError5 = undefined;

      try {
        for (var _iterator5 = input[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
          var value = _step5.value;

          if (!valueType.accepts(value)) {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError5 = true;
        _iteratorError5 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion5 && _iterator5.return) {
            _iterator5.return();
          }
        } finally {
          if (_didIteratorError5) {
            throw _iteratorError5;
          }
        }
      }

      return true;
    },
    compareWith: function compareWith(input) {
      if (input.typeName === 'SetType') {
        return 0;
      }
      return -1;
    },
    inferTypeParameters: function inferTypeParameters(input) {
      var valueTypes = [];
      var _iteratorNormalCompletion6 = true;
      var _didIteratorError6 = false;
      var _iteratorError6 = undefined;

      try {
        loop: for (var _iterator6 = input[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
          var value = _step6.value;

          for (var i = 0; i < valueTypes.length; i++) {
            var type = valueTypes[i];
            if (type.accepts(value)) {
              continue loop;
            }
          }
          valueTypes.push(t.typeOf(value));
        }
      } catch (err) {
        _didIteratorError6 = true;
        _iteratorError6 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion6 && _iterator6.return) {
            _iterator6.return();
          }
        } finally {
          if (_didIteratorError6) {
            throw _iteratorError6;
          }
        }
      }

      if (valueTypes.length === 0) {
        return [t.existential()];
      } else if (valueTypes.length === 1) {
        return [valueTypes[0]];
      } else {
        return [t.union.apply(t, valueTypes)];
      }
    }
  });

  return t;
}

function registerTypePredicates(context) {
  context.setPredicate('Array', function (input) {
    return Array.isArray(input);
  });
  context.setPredicate('Map', function (input) {
    return input instanceof Map;
  });
  context.setPredicate('Set', function (input) {
    return input instanceof Set;
  });
  context.setPredicate('Promise', function (input) {
    if (input instanceof Promise) {
      return true;
    } else {
      return input !== null && ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' || typeof input === 'function') && typeof input.then === 'function';
    }
  });
}

var TypeInferer = function () {
  function TypeInferer(context) {
    classCallCheck(this, TypeInferer);

    this.context = context;
  }

  createClass(TypeInferer, [{
    key: 'infer',
    value: function infer(input) {
      var primitive = this.inferPrimitive(input);
      if (primitive) {
        return primitive;
      }
      var inferred = new Map();
      return this.inferComplex(input, inferred);
    }
  }, {
    key: 'inferInternal',
    value: function inferInternal(input, inferred) {
      var primitive = this.inferPrimitive(input);
      if (primitive) {
        return primitive;
      }
      return this.inferComplex(input, inferred);
    }
  }, {
    key: 'inferPrimitive',
    value: function inferPrimitive(input) {
      var context = this.context;

      if (input === null) {
        return context.null();
      } else if (input === undefined) {
        return context.void();
      } else if (typeof input === 'number') {
        return context.number();
      } else if (typeof input === 'boolean') {
        return context.boolean();
      } else if (typeof input === 'string') {
        return context.string();
      }
      // Issue 252
      else if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'symbol') {
          return context.symbol(input);
        } else {
          return undefined;
        }
    }
  }, {
    key: 'inferComplex',
    value: function inferComplex(input, inferred) {
      var context = this.context;


      if (typeof input === 'function') {
        return this.inferFunction(input, inferred);
      } else if (input !== null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object') {
        return this.inferObject(input, inferred);
      } else {
        return context.any();
      }
    }
  }, {
    key: 'inferFunction',
    value: function inferFunction(input, inferred) {
      var context = this.context;
      var length = input.length;

      var body = new Array(length + 1);
      for (var i = 0; i < length; i++) {
        body[i] = context.param(String.fromCharCode(97 + i), context.existential());
      }
      body[length] = context.return(context.existential());
      return context.fn.apply(context, body);
    }
  }, {
    key: 'inferObject',
    value: function inferObject(input, inferred) {
      var existing = inferred.get(input);
      if (existing) {
        return existing;
      }
      var context = this.context;

      var type = void 0;

      // Temporarily create a box for this type to catch cyclical references.
      // Nested references to this object will receive the boxed type.
      var box = context.box(function () {
        return type;
      });
      inferred.set(input, box);

      if (context.checkPredicate('Array', input)) {
        type = this.inferArray(input, inferred);
      } else if (!(input instanceof Object)) {
        type = this.inferDict(input, inferred);
      } else if (input.constructor !== Object) {
        var handler = context.getTypeConstructor(input.constructor);
        if (handler) {
          var typeParameters = handler.inferTypeParameters(input);
          type = handler.apply.apply(handler, toConsumableArray(typeParameters));
        } else {
          type = context.ref(input.constructor);
        }
      } else {
        var body = [];
        for (var key in input) {
          // eslint-disable-line
          var value = input[key];
          body.push(context.property(key, this.inferInternal(value, inferred)));
        }
        type = context.object.apply(context, body);
      }

      // Overwrite the box with the real value.
      inferred.set(input, type);
      return type;
    }
  }, {
    key: 'inferDict',
    value: function inferDict(input, inferred) {
      var numericIndexers = [];
      var stringIndexers = [];
      loop: for (var key in input) {
        // eslint-disable-line
        var value = input[key];
        var types = isNaN(+key) ? stringIndexers : numericIndexers;
        for (var i = 0; i < types.length; i++) {
          var type = types[i];
          if (type.accepts(value)) {
            continue loop;
          }
        }
        types.push(this.inferInternal(value, inferred));
      }

      var context = this.context;

      var body = [];
      if (numericIndexers.length === 1) {
        body.push(context.indexer('index', context.number(), numericIndexers[0]));
      } else if (numericIndexers.length > 1) {
        body.push(context.indexer('index', context.number(), context.union.apply(context, numericIndexers)));
      }

      if (stringIndexers.length === 1) {
        body.push(context.indexer('key', context.string(), stringIndexers[0]));
      } else if (stringIndexers.length > 1) {
        body.push(context.indexer('key', context.string(), context.union.apply(context, stringIndexers)));
      }

      return context.object.apply(context, body);
    }
  }, {
    key: 'inferArray',
    value: function inferArray(input, inferred) {
      var context = this.context;

      var types = [];
      var values = [];
      var length = input.length;

      loop: for (var i = 0; i < length; i++) {
        var item = input[i];
        var inferredType = this.inferInternal(item, inferred);
        for (var j = 0; j < types.length; j++) {
          var type = types[j];
          if (type.accepts(item) && inferredType.accepts(values[j])) {
            continue loop;
          }
        }
        types.push(inferredType);
        values.push(item);
      }
      if (types.length === 0) {
        return context.array(context.any());
      } else if (types.length === 1) {
        return context.array(types[0]);
      } else {
        return context.array(context.union.apply(context, types));
      }
    }
  }]);
  return TypeInferer;
}();

function makeReactPropTypes(objectType) {
  var output = {};
  if (!objectType.properties) {
    return output;
  }

  var _loop = function _loop(property) {
    output[property.key] = function (props, propName, componentName) {
      return makeError(property, props);
    };
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = objectType.properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var property = _step.value;

      _loop(property);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return output;
}

var delimiter$1 = '\n-------------------------------------------------\n\n';

function makeWarningMessage(validation) {
  if (!validation.hasErrors()) {
    return;
  }
  var input = validation.input,
      context = validation.context;

  var collected = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = validation.errors[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;

      var _ref2 = slicedToArray(_ref, 3);

      var path = _ref2[0];
      var message = _ref2[1];
      var expectedType = _ref2[2];

      var expected = expectedType ? expectedType.toString() : "*";
      var actual = context.typeOf(_resolvePath(input, path)).toString();

      var field = stringifyPath(validation.path.concat(path));

      collected.push(field + ' ' + message + '\n\nExpected: ' + expected + '\n\nActual: ' + actual + '\n');
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return 'Warning: ' + collected.join(delimiter$1);
}

function makeUnion(context, types) {
  var length = types.length;
  var merged = [];
  for (var i = 0; i < length; i++) {
    var type = types[i];
    if (type instanceof AnyType || type instanceof MixedType || type instanceof ExistentialType) {
      return type;
    }
    if (type instanceof UnionType) {
      mergeUnionTypes(merged, type.types);
    } else {
      merged.push(type);
    }
  }
  var union = new UnionType(context);
  union.types = merged;
  return union;
}

function mergeUnionTypes(aTypes, bTypes) {
  loop: for (var i = 0; i < bTypes.length; i++) {
    var bType = bTypes[i];
    for (var j = 0; j < aTypes.length; j++) {
      var aType = aTypes[j];
      if (compareTypes(aType, bType) !== -1) {
        continue loop;
      }
    }
    aTypes.push(bType);
  }
}

function makePropertyDescriptor(typeSource, input, propertyName, descriptor, shouldAssert) {
  if (typeof descriptor.get === 'function' && typeof descriptor.set === 'function') {
    return augmentExistingAccessors(typeSource, input, propertyName, descriptor, shouldAssert);
  } else {
    return propertyToAccessor(typeSource, input, propertyName, descriptor, shouldAssert);
  }
}

function makePropertyName(name) {
  return '_flowRuntime$' + name;
}

function getClassName(input) {
  if (typeof input === 'function') {
    return input.name || '[Class anonymous]';
  } else if (typeof input.constructor === 'function') {
    return getClassName(input.constructor);
  } else {
    return '[Class anonymous]';
  }
}

function resolveType(receiver, typeSource) {
  if (typeof typeSource === 'function') {
    return typeSource.call(receiver);
  } else {
    return typeSource;
  }
}

function propertyToAccessor(typeSource, input, propertyName, descriptor, shouldAssert) {
  var safeName = makePropertyName(propertyName);
  var className = getClassName(input);
  var initializer = descriptor.initializer,
      writable = descriptor.writable,
      config = objectWithoutProperties(descriptor, ['initializer', 'writable']); // eslint-disable-line no-unused-vars

  var propertyPath = [className, propertyName];

  return _extends({}, config, {
    type: 'accessor',
    get: function get$$1() {
      if (safeName in this) {
        return this[safeName];
      } else if (initializer) {
        var type = resolveType(this, typeSource);
        var _value = initializer.call(this);
        var context = type.context;
        context.check(type, _value, 'Default value for property', propertyPath);
        Object.defineProperty(this, safeName, {
          writable: true,
          value: _value
        });
        return _value;
      } else {
        Object.defineProperty(this, safeName, {
          writable: true,
          value: undefined
        });
      }
    },
    set: function set$$1(value) {
      var type = resolveType(this, typeSource);
      var context = type.context;
      if (shouldAssert) {
        context.assert(type, value, 'Property', propertyPath);
      } else {
        context.warn(type, value, 'Property', propertyPath);
      }
      if (safeName in this) {
        this[safeName] = value;
      } else {
        Object.defineProperty(this, safeName, {
          writable: true,
          value: value
        });
      }
    }
  });
}

function augmentExistingAccessors(typeSource, input, propertyName, descriptor, shouldAssert) {

  var className = getClassName(input);
  var propertyPath = [className, propertyName];

  var originalSetter = descriptor.set;

  descriptor.set = function set$$1(value) {
    var type = resolveType(this, typeSource);
    var context = type.context;
    if (shouldAssert) {
      context.assert(type, value, 'Property', propertyPath);
    } else {
      context.warn(type, value, 'Property', propertyPath);
    }
    originalSetter.call(this, value);
  };
}

// eslint-disable-line no-redeclare

function annotateValue(input, type) {
  // eslint-disable-line no-redeclare
  if (type instanceof Type) {
    input[TypeSymbol] = type;
    return input;
  } else {
    var _type = input;
    return function (input) {
      input[TypeSymbol] = _type;
      return input;
    };
  }
}

// If A and B are object types, $Diff<A,B> is the type of objects that have
// properties defined in A, but not in B.
// Properties that are defined in both A and B are allowed too.

var $DiffType = function (_Type) {
  inherits($DiffType, _Type);

  function $DiffType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $DiffType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $DiffType.__proto__ || Object.getPrototypeOf($DiffType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$DiffType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($DiffType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var aType, bType, properties, i, property;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              aType = this.aType, bType = this.bType;

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 4:
              return _context.abrupt('return');

            case 5:
              aType = aType.unwrap();
              bType = bType.unwrap();
              invariant(aType instanceof ObjectType && bType instanceof ObjectType, 'Can only $Diff object types.');
              properties = aType.properties;
              i = 0;

            case 10:
              if (!(i < properties.length)) {
                _context.next = 18;
                break;
              }

              property = properties[i];

              if (!bType.hasProperty(property.key)) {
                _context.next = 14;
                break;
              }

              return _context.abrupt('continue', 15);

            case 14:
              return _context.delegateYield(property.errors(validation, path.concat(property.key), input), 't0', 15);

            case 15:
              i++;
              _context.next = 10;
              break;

            case 18:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var aType = this.aType,
          bType = this.bType;

      if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
        return false;
      }
      aType = aType.unwrap();
      bType = bType.unwrap();
      invariant(aType instanceof ObjectType && bType instanceof ObjectType, 'Can only $Diff object types.');
      var properties = aType.properties;
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (bType.hasProperty(property.key)) {
          continue;
        }
        if (!property.accepts(input)) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _context2;

      var aType = this.aType,
          bType = this.bType;

      aType = aType.unwrap();
      bType = bType.unwrap();
      invariant(aType instanceof ObjectType && bType instanceof ObjectType, 'Can only $Diff object types.');
      var properties = aType.properties;
      var args = [];
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        if (bType.hasProperty(property.key)) {
          continue;
        }
        args.push(property);
      }
      return (_context2 = this.context).object.apply(_context2, args);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Diff<' + this.aType.toString() + ', ' + this.bType.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        aType: this.aType,
        bType: this.bType
      };
    }
  }]);
  return $DiffType;
}(Type);

// Any subtype of T

var $FlowFixMeType = function (_Type) {
  inherits($FlowFixMeType, _Type);

  function $FlowFixMeType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $FlowFixMeType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $FlowFixMeType.__proto__ || Object.getPrototypeOf($FlowFixMeType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$FlowFixMeType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($FlowFixMeType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return 1;
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$FlowFixMe';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName
      };
    }
  }]);
  return $FlowFixMeType;
}(Type);

// The set of keys of T.

var $KeysType = function (_Type) {
  inherits($KeysType, _Type);

  function $KeysType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $KeysType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $KeysType.__proto__ || Object.getPrototypeOf($KeysType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$KeysType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($KeysType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, properties, length, i, property, keys, _i;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type.unwrap();

              invariant(type instanceof ObjectType, 'Can only $Keys<T> object types.');

              properties = type.properties;
              length = properties.length;
              i = 0;

            case 5:
              if (!(i < length)) {
                _context.next = 12;
                break;
              }

              property = properties[i];

              if (!(input === property.key)) {
                _context.next = 9;
                break;
              }

              return _context.abrupt('return');

            case 9:
              i++;
              _context.next = 5;
              break;

            case 12:
              keys = new Array(length);

              for (_i = 0; _i < length; _i++) {
                keys[_i] = properties[_i].key;
              }
              _context.next = 16;
              return [path, getErrorMessage('ERR_NO_UNION', keys.join(' | ')), this];

            case 16:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type.unwrap();
      invariant(type instanceof ObjectType, 'Can only $Keys<T> object types.');

      var properties = type.properties;
      var length = properties.length;
      for (var i = 0; i < length; i++) {
        var property = properties[i];
        if (input === property.key) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _context2;

      var context = this.context;
      var type = this.type.unwrap();
      invariant(type instanceof ObjectType, 'Can only $Keys<T> object types.');

      var properties = type.properties;
      var length = properties.length;
      var keys = new Array(length);
      for (var i = 0; i < length; i++) {
        var property = properties[i];
        keys[i] = context.literal(property.key);
      }
      return (_context2 = this.context).union.apply(_context2, keys);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Keys<' + this.type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return $KeysType;
}(Type);

// Map over the keys and values in an object.

var $ObjMapiType = function (_Type) {
  inherits($ObjMapiType, _Type);

  function $ObjMapiType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $ObjMapiType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $ObjMapiType.__proto__ || Object.getPrototypeOf($ObjMapiType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$ObjMapiType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($ObjMapiType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var object, mapper, context, target, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, prop, applied, returnType, value;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              object = this.object, mapper = this.mapper, context = this.context;
              target = object.unwrap();

              invariant(target instanceof ObjectType, 'Target must be an object type.');

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 7;
                break;
              }

              _context.next = 6;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 6:
              return _context.abrupt('return');

            case 7:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 10;
              _iterator = target.properties[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 22;
                break;
              }

              prop = _step.value;
              applied = mapper.unwrap();

              invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

              returnType = applied.invoke(context.literal(prop.key), prop.value);
              value = input[prop.key];
              return _context.delegateYield(returnType.errors(validation, path.concat(prop.key), value), 't0', 19);

            case 19:
              _iteratorNormalCompletion = true;
              _context.next = 12;
              break;

            case 22:
              _context.next = 28;
              break;

            case 24:
              _context.prev = 24;
              _context.t1 = _context['catch'](10);
              _didIteratorError = true;
              _iteratorError = _context.t1;

            case 28:
              _context.prev = 28;
              _context.prev = 29;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 31:
              _context.prev = 31;

              if (!_didIteratorError) {
                _context.next = 34;
                break;
              }

              throw _iteratorError;

            case 34:
              return _context.finish(31);

            case 35:
              return _context.finish(28);

            case 36:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[10, 24, 28, 36], [29,, 31, 35]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var object = this.object,
          mapper = this.mapper,
          context = this.context;

      var target = object.unwrap();
      invariant(target instanceof ObjectType, 'Target must be an object type.');

      if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
        return false;
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = target.properties[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var prop = _step2.value;

          var applied = mapper.unwrap();
          invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

          var returnType = applied.invoke(context.literal(prop.key), prop.value);

          var value = input[prop.key];
          if (!returnType.accepts(value)) {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var object = this.object,
          mapper = this.mapper,
          context = this.context;

      var target = object.unwrap();
      invariant(target instanceof ObjectType, 'Target must be an object type.');

      var args = [];

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = target.properties[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var prop = _step3.value;

          var applied = mapper.unwrap();
          invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

          args.push(context.property(prop.key, applied.invoke(context.literal(prop.key), prop.value)));
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return context.object.apply(context, args);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$ObjMapi<' + this.object.toString() + ', ' + this.mapper.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        object: this.object,
        mapper: this.mapper
      };
    }
  }]);
  return $ObjMapiType;
}(Type);

// Map over the keys in an object.

var $ObjMapType = function (_Type) {
  inherits($ObjMapType, _Type);

  function $ObjMapType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $ObjMapType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $ObjMapType.__proto__ || Object.getPrototypeOf($ObjMapType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$ObjMapType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($ObjMapType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var object, mapper, context, target, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, prop, applied, returnType, value;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              object = this.object, mapper = this.mapper, context = this.context;
              target = object.unwrap();

              invariant(target instanceof ObjectType, 'Target must be an object type.');

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 7;
                break;
              }

              _context.next = 6;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 6:
              return _context.abrupt('return');

            case 7:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 10;
              _iterator = target.properties[Symbol.iterator]();

            case 12:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 22;
                break;
              }

              prop = _step.value;
              applied = mapper.unwrap();

              invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

              returnType = applied.invoke(context.literal(prop.key));
              value = input[prop.key];
              return _context.delegateYield(returnType.errors(validation, path.concat(prop.key), value), 't0', 19);

            case 19:
              _iteratorNormalCompletion = true;
              _context.next = 12;
              break;

            case 22:
              _context.next = 28;
              break;

            case 24:
              _context.prev = 24;
              _context.t1 = _context['catch'](10);
              _didIteratorError = true;
              _iteratorError = _context.t1;

            case 28:
              _context.prev = 28;
              _context.prev = 29;

              if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
              }

            case 31:
              _context.prev = 31;

              if (!_didIteratorError) {
                _context.next = 34;
                break;
              }

              throw _iteratorError;

            case 34:
              return _context.finish(31);

            case 35:
              return _context.finish(28);

            case 36:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this, [[10, 24, 28, 36], [29,, 31, 35]]);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var object = this.object,
          mapper = this.mapper,
          context = this.context;

      var target = object.unwrap();
      invariant(target instanceof ObjectType, 'Target must be an object type.');

      if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
        return false;
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = target.properties[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var prop = _step2.value;

          var applied = mapper.unwrap();
          invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

          var returnType = applied.invoke(context.literal(prop.key));

          var value = input[prop.key];
          if (!returnType.accepts(value)) {
            return false;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var object = this.object,
          mapper = this.mapper,
          context = this.context;

      var target = object.unwrap();
      invariant(target instanceof ObjectType, 'Target must be an object type.');

      var args = [];

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = target.properties[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var prop = _step3.value;

          var applied = mapper.unwrap();
          invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

          args.push(context.property(prop.key, applied.invoke(context.literal(prop.key))));
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return context.object.apply(context, args);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$ObjMap<' + this.object.toString() + ', ' + this.mapper.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        object: this.object,
        mapper: this.mapper
      };
    }
  }]);
  return $ObjMapType;
}(Type);

// The type of the named object property

var $PropertyType = function (_Type) {
  inherits($PropertyType, _Type);

  function $PropertyType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $PropertyType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $PropertyType.__proto__ || Object.getPrototypeOf($PropertyType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$PropertyType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($PropertyType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.unwrap().errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.unwrap().accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var object = this.object,
          property = this.property;

      var unwrapped = object.unwrap();
      invariant(typeof unwrapped.getProperty === 'function', 'Can only use $PropertyType on Objects.');
      return unwrapped.getProperty(property).unwrap();
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$PropertyType<' + this.object.toString() + ', ' + String(this.property) + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        object: this.object,
        property: this.property
      };
    }
  }]);
  return $PropertyType;
}(Type);

// An object of type $Shape<T> does not have to have all of the properties
// that type T defines. But the types of the properties that it does have
// must accepts the types of the same properties in T.

var $ShapeType = function (_Type) {
  inherits($ShapeType, _Type);

  function $ShapeType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $ShapeType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $ShapeType.__proto__ || Object.getPrototypeOf($ShapeType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$ShapeType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($ShapeType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, key, property;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type;

              if (!(input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function')) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_OBJECT'), this];

            case 4:
              return _context.abrupt('return');

            case 5:

              type = type.unwrap();
              invariant(typeof type.getProperty === 'function', 'Can only $Shape<T> object types.');

              _context.t0 = _regeneratorRuntime.keys(input);

            case 8:
              if ((_context.t1 = _context.t0()).done) {
                _context.next = 16;
                break;
              }

              key = _context.t1.value;
              // eslint-disable-line guard-for-in
              property = type.getProperty(key);

              if (property) {
                _context.next = 13;
                break;
              }

              return _context.abrupt('continue', 8);

            case 13:
              return _context.delegateYield(property.errors(validation, path, input), 't2', 14);

            case 14:
              _context.next = 8;
              break;

            case 16:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type;

      if (input === null || (typeof input === 'undefined' ? 'undefined' : _typeof(input)) !== 'object' && typeof input !== 'function') {
        return false;
      }
      type = type.unwrap();
      invariant(typeof type.getProperty === 'function', 'Can only $Shape<T> object types.');
      for (var key in input) {
        // eslint-disable-line guard-for-in
        var property = type.getProperty(key);
        if (!property || !property.accepts(input)) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var _context2;

      var type = this.type;

      type = type.unwrap();
      var context = this.context;
      invariant(type instanceof ObjectType, 'Can only $Shape<T> object types.');
      var properties = type.properties;
      var args = new Array(properties.length);
      for (var i = 0; i < properties.length; i++) {
        var property = properties[i];
        args[i] = context.property(property.key, property.value, true);
      }
      return (_context2 = this.context).object.apply(_context2, args);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Shape<' + this.type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return $ShapeType;
}(Type);

// Any subtype of T

var $SubType = function (_Type) {
  inherits($SubType, _Type);

  function $SubType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $SubType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $SubType.__proto__ || Object.getPrototypeOf($SubType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$SubType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($SubType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(input, path), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Subtype<' + this.type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return $SubType;
}(Type);

// Any, but at least T.

var $SuperType = function (_Type) {
  inherits($SuperType, _Type);

  function $SuperType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $SuperType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $SuperType.__proto__ || Object.getPrototypeOf($SuperType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$SuperType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($SuperType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.delegateYield(this.type.errors(validation, path, input), 't0', 1);

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      return this.type.accepts(input);
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      return this.type;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Supertype<' + this.type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return $SuperType;
}(Type);

// Map over the values in a tuple.

var $TupleMapType = function (_Type) {
  inherits($TupleMapType, _Type);

  function $TupleMapType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $TupleMapType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $TupleMapType.__proto__ || Object.getPrototypeOf($TupleMapType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$TupleMapType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($TupleMapType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var tuple, mapper, context, target, i, type, applied, expected, value;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              tuple = this.tuple, mapper = this.mapper, context = this.context;
              target = tuple.unwrap();

              invariant(target instanceof TupleType, 'Target must be a tuple type.');

              if (context.checkPredicate('Array', input)) {
                _context.next = 7;
                break;
              }

              _context.next = 6;
              return [path, getErrorMessage('ERR_EXPECT_ARRAY'), this];

            case 6:
              return _context.abrupt('return');

            case 7:
              i = 0;

            case 8:
              if (!(i < target.types.length)) {
                _context.next = 18;
                break;
              }

              type = target.types[i];
              applied = mapper.unwrap();

              invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

              expected = applied.invoke(type);
              value = input[i];
              return _context.delegateYield(expected.errors(validation, path.concat(i), value), 't0', 15);

            case 15:
              i++;
              _context.next = 8;
              break;

            case 18:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var tuple = this.tuple,
          mapper = this.mapper,
          context = this.context;

      var target = tuple.unwrap();
      invariant(target instanceof TupleType, 'Target must be a tuple type.');

      if (!context.checkPredicate('Array', input)) {
        return false;
      }

      for (var i = 0; i < target.types.length; i++) {
        var type = target.types[i];
        var applied = mapper.unwrap();
        invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

        if (!applied.invoke(type).accepts(input[i])) {
          return false;
        }
      }
      return true;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var tuple = this.tuple,
          mapper = this.mapper,
          context = this.context;

      var target = tuple.unwrap();
      invariant(target instanceof TupleType, 'Target must be an tuple type.');

      var args = [];
      for (var i = 0; i < target.types.length; i++) {
        var type = target.types[i];
        var applied = mapper.unwrap();
        invariant(applied instanceof FunctionType, 'Mapper must be a function type.');

        args.push(applied.invoke(type).unwrap().unwrap());
      }

      return context.tuple.apply(context, args);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$TupleMap<' + this.tuple.toString() + ', ' + this.mapper.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        tuple: this.tuple,
        mapper: this.mapper
      };
    }
  }]);
  return $TupleMapType;
}(Type);

// The set of keys of T.

var $ValuesType = function (_Type) {
  inherits($ValuesType, _Type);

  function $ValuesType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, $ValuesType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = $ValuesType.__proto__ || Object.getPrototypeOf($ValuesType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = '$ValuesType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass($ValuesType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var type, properties, length, i, property, values, _i;

      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              type = this.type.unwrap();

              invariant(type instanceof ObjectType, 'Can only $Values<T> object types.');

              properties = type.properties;
              length = properties.length;
              i = 0;

            case 5:
              if (!(i < length)) {
                _context.next = 12;
                break;
              }

              property = properties[i];

              if (!property.value.accepts(input)) {
                _context.next = 9;
                break;
              }

              return _context.abrupt('return');

            case 9:
              i++;
              _context.next = 5;
              break;

            case 12:
              values = new Array(length);

              for (_i = 0; _i < length; _i++) {
                values[_i] = properties[_i].value.toString();
              }
              _context.next = 16;
              return [path, getErrorMessage('ERR_NO_UNION', values.join(' | ')), this];

            case 16:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var type = this.type.unwrap();
      invariant(type instanceof ObjectType, 'Can only $Values<T> object types.');

      var properties = type.properties;
      var length = properties.length;
      for (var i = 0; i < length; i++) {
        var property = properties[i];
        if (property.value.accepts(input)) {
          return true;
        }
      }
      return false;
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      return compareTypes(this.unwrap(), input);
    }
  }, {
    key: 'unwrap',
    value: function unwrap() {
      var context = this.context;
      var type = this.type.unwrap();
      invariant(type instanceof ObjectType, 'Can only $Values<T> object types.');

      var properties = type.properties;
      var length = properties.length;
      var values = new Array(length);
      for (var i = 0; i < length; i++) {
        var property = properties[i];
        values[i] = property.value;
      }
      return context.union.apply(context, values);
    }
  }, {
    key: 'toString',
    value: function toString() {
      return '$Values<' + this.type.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        type: this.type
      };
    }
  }]);
  return $ValuesType;
}(Type);

function checkGenericType(context, expected, input) {
  var impl = expected.impl;

  if (typeof impl !== 'function') {
    // There is little else we can do here, so accept anything.
    return true;
  } else if (impl === input || impl.isPrototypeOf(input)) {
    return true;
  }

  var annotation = context.getAnnotation(impl);
  if (annotation == null) {
    return false;
  } else {
    return checkType(context, annotation, input);
  }
}

function checkType(context, expected, input) {
  var annotation = context.getAnnotation(input);
  if (annotation != null) {
    var result = compareTypes(expected, annotation);
    return result !== -1;
  }
  return true;
}

var ClassType = function (_Type) {
  inherits(ClassType, _Type);

  function ClassType() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, ClassType);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = ClassType.__proto__ || Object.getPrototypeOf(ClassType)).call.apply(_ref, [this].concat(args))), _this), _this.typeName = 'ClassType', _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(ClassType, [{
    key: 'errors',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function errors(validation, path, input) {
      var instanceType, context, expectedType, isValid;
      return _regeneratorRuntime.wrap(function errors$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              instanceType = this.instanceType, context = this.context;

              if (!(typeof input !== 'function')) {
                _context.next = 5;
                break;
              }

              _context.next = 4;
              return [path, getErrorMessage('ERR_EXPECT_CLASS', instanceType.toString()), this];

            case 4:
              return _context.abrupt('return');

            case 5:
              expectedType = instanceType.typeName === 'ClassDeclaration' ? instanceType : instanceType.unwrap();
              isValid = expectedType instanceof GenericType ? checkGenericType(context, expectedType, input) : checkType(context, expectedType, input);

              if (isValid) {
                _context.next = 10;
                break;
              }

              _context.next = 10;
              return [path, getErrorMessage('ERR_EXPECT_CLASS', instanceType.toString()), this];

            case 10:
            case 'end':
              return _context.stop();
          }
        }
      }, errors, this);
    })
  }, {
    key: 'accepts',
    value: function accepts(input) {
      var instanceType = this.instanceType,
          context = this.context;

      if (typeof input !== 'function') {
        return false;
      }
      var expectedType = instanceType.typeName === 'ClassDeclaration' ? instanceType : instanceType.unwrap();
      if (expectedType instanceof GenericType) {
        return checkGenericType(context, expectedType, input);
      } else {
        return checkType(context, expectedType, input);
      }
    }
  }, {
    key: 'compareWith',
    value: function compareWith(input) {
      var instanceType = this.instanceType;

      if (input instanceof ClassType) {
        return compareTypes(instanceType, input.instanceType);
      }
      return -1;
    }
  }, {
    key: 'toString',
    value: function toString() {
      return 'Class<' + this.instanceType.toString() + '>';
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return {
        typeName: this.typeName,
        instanceType: this.instanceType
      };
    }
  }]);
  return ClassType;
}(Type);

/**
 * Keeps track of invalid references in order to prevent
 * multiple warnings.
 */
var warnedInvalidReferences = new WeakSet();

var TypeContext = function () {
  function TypeContext() {
    classCallCheck(this, TypeContext);
    this.mode = 'assert';
    this[NameRegistrySymbol] = {};
    this[TypePredicateRegistrySymbol] = {};
    this[TypeConstructorRegistrySymbol] = new Map();
    this[InferrerSymbol] = new TypeInferer(this);
    this[ModuleRegistrySymbol] = {};
  }

  /**
   * Calls to `t.check(...)` will call either
   * `t.assert(...)` or `t.warn(...)` depending on this setting.
   */


  // Issue 252


  // Issue 252


  // Issue 252


  // Issue 252


  // Issue 252


  // Issue 252


  createClass(TypeContext, [{
    key: 'makeJSONError',
    value: function makeJSONError$$1(validation) {
      return makeJSONError(validation);
    }
  }, {
    key: 'makeTypeError',
    value: function makeTypeError$$1(validation) {
      return makeTypeError(validation);
    }
  }, {
    key: 'createContext',
    value: function createContext() {
      var context = new TypeContext();
      // Issue 252
      context[ParentSymbol] = this;
      return context;
    }
  }, {
    key: 'typeOf',
    value: function typeOf(input) {

      var annotation = this.getAnnotation(input);
      if (annotation) {
        if (typeof input === 'function' && (annotation instanceof ClassDeclaration || annotation instanceof ParameterizedClassDeclaration)) {
          return this.Class(annotation);
        }
        return annotation;
      }
      // Issue 252
      var inferrer = this[InferrerSymbol];

      return inferrer.infer(input);
    }
  }, {
    key: 'compareTypes',
    value: function compareTypes$$1(a, b) {
      return compareTypes(a, b);
    }
  }, {
    key: 'get',
    value: function get$$1(name) {
      // Issue 252
      var item = this[NameRegistrySymbol][name];

      for (var _len = arguments.length, propertyNames = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        propertyNames[_key - 1] = arguments[_key];
      }

      if (item != null) {
        var current = typeof item === 'function' ? new item(this) : item;
        for (var i = 0; i < propertyNames.length; i++) {
          var propertyName = propertyNames[i];
          if (typeof current.getProperty !== 'function') {
            return;
          }
          current = current.getProperty(propertyName);
          if (!current) {
            return;
          }
          current = current.unwrap();
        }
        return current;
      }
      // Issue 252
      var parent = this[ParentSymbol];
      if (parent) {
        var fromParent = parent.get.apply(parent, [name].concat(toConsumableArray(propertyNames)));
        if (fromParent) {
          return fromParent;
        }
      }

      // if we got this far, see if we have a global type with this name.
      if (typeof commonjsGlobal[name] === 'function') {
        var target = new GenericType(this);
        target.name = name;
        target.impl = commonjsGlobal[name];
        // Issue 252
        this[NameRegistrySymbol][name] = target;
        return target;
      }
    }

    /**
     * Get the predicate for a given type name.
     * e.g. `t.getPredicate('Array')`.
     */

  }, {
    key: 'getPredicate',
    value: function getPredicate(name) {
      var item = this[TypePredicateRegistrySymbol][name];
      if (item) {
        return item;
      }
      var parent = this[ParentSymbol];
      if (parent) {
        return parent.getPredicate(name);
      }
    }

    /**
     * Set the predicate for a given type name.
     * This can be used to customise the behaviour of things like Array
     * detection or allowing Thenables in place of the global Promise.
     */

  }, {
    key: 'setPredicate',
    value: function setPredicate(name, predicate) {
      this[TypePredicateRegistrySymbol][name] = predicate;
    }

    /**
     * Check the given value against the named predicate.
     * Returns false if no such predicate exists.
     * e.g. `t.checkPredicate('Array', [1, 2, 3])`
     */

  }, {
    key: 'checkPredicate',
    value: function checkPredicate(name, input) {
      var predicate = this.getPredicate(name);
      if (predicate) {
        return predicate(input);
      } else {
        return false;
      }
    }

    /**
     * Returns a decorator for a function or object with the given type.
     */

  }, {
    key: 'decorate',
    value: function decorate(type, shouldAssert) {
      var _this2 = this;

      if (shouldAssert == null) {
        shouldAssert = this.mode === 'assert';
      }
      return function (input, propertyName, descriptor) {
        if (descriptor && typeof propertyName === 'string') {
          return makePropertyDescriptor(type, input, propertyName, descriptor, Boolean(shouldAssert));
        } else {
          invariant(typeof type !== 'function', 'Cannot decorate an object or function as a method.');
          return _this2.annotate(input, type);
        }
      };
    }

    /**
     * Annotates an object or function with the given type.
     * If a type is specified as the sole argument, returns a
     * function which can decorate classes or functions with the given type.
     */

  }, {
    key: 'annotate',
    value: function annotate(input, type) {
      if (type === undefined) {
        return annotateValue(input);
      } else {
        return annotateValue(input, type);
      }
    }
  }, {
    key: 'getAnnotation',
    value: function getAnnotation(input) {
      if (input !== null && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' || typeof input === 'function') {
        // Issue 252
        return input[TypeSymbol];
      }
    }
  }, {
    key: 'hasAnnotation',
    value: function hasAnnotation(input) {
      if (input == null) {
        return false;
      } else {
        return input[TypeSymbol] ? true : false;
      }
    }
  }, {
    key: 'setAnnotation',
    value: function setAnnotation(input, type) {
      input[TypeSymbol] = type;
      return input;
    }
  }, {
    key: 'type',
    value: function type(name, _type) {
      if (typeof _type === 'function') {
        var target = new ParameterizedTypeAlias(this);
        target.name = name;
        target.typeCreator = _type;
        return target;
      } else {
        var _target = new TypeAlias(this);
        _target.name = name;
        _target.type = _type;
        return _target;
      }
    }
  }, {
    key: 'declare',
    value: function declare(name, type) {

      if (name instanceof Declaration) {
        type = name;
        name = type.name;
      } else if (name instanceof TypeAlias) {
        type = name;
        name = type.name;
      }
      if (typeof type === 'function') {
        type = this.type(name, type);
      }
      if (type instanceof ModuleDeclaration) {
        var moduleRegistry = this[ModuleRegistrySymbol];
        moduleRegistry[name] = type;
        return type;
      } else {
        invariant(typeof name === 'string', 'Name must be a string');
        invariant(type instanceof Type, 'Type must be supplied to declaration');
        var nameRegistry = this[NameRegistrySymbol];

        if (type instanceof Declaration) {
          nameRegistry[name] = type;
          return type;
        } else if (type instanceof TypeAlias || type instanceof ParameterizedTypeAlias) {
          var target = new TypeDeclaration(this);
          target.name = name;
          target.typeAlias = type;
          nameRegistry[name] = target;
          return target;
        } else {
          var _target2 = this.var(name, type);
          nameRegistry[name] = _target2;
          return _target2;
        }
      }
    }
  }, {
    key: 'declarations',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function declarations() {
      var nameRegistry, key;
      return _regeneratorRuntime.wrap(function declarations$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              nameRegistry = this[NameRegistrySymbol];
              _context.t0 = _regeneratorRuntime.keys(nameRegistry);

            case 2:
              if ((_context.t1 = _context.t0()).done) {
                _context.next = 8;
                break;
              }

              key = _context.t1.value;
              _context.next = 6;
              return [key, nameRegistry[key]];

            case 6:
              _context.next = 2;
              break;

            case 8:
            case 'end':
              return _context.stop();
          }
        }
      }, declarations, this);
    })
  }, {
    key: 'modules',
    value: /*#__PURE__*/_regeneratorRuntime.mark(function modules() {
      var moduleRegistry, key;
      return _regeneratorRuntime.wrap(function modules$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              moduleRegistry = this[ModuleRegistrySymbol];
              _context2.t0 = _regeneratorRuntime.keys(moduleRegistry);

            case 2:
              if ((_context2.t1 = _context2.t0()).done) {
                _context2.next = 8;
                break;
              }

              key = _context2.t1.value;
              _context2.next = 6;
              return moduleRegistry[key];

            case 6:
              _context2.next = 2;
              break;

            case 8:
            case 'end':
              return _context2.stop();
          }
        }
      }, modules, this);
    })
  }, {
    key: 'import',
    value: function _import(moduleName) {
      var moduleRegistry = this[ModuleRegistrySymbol];
      if (moduleRegistry[moduleName]) {
        return moduleRegistry[moduleName];
      }

      var _moduleName$split = moduleName.split('/'),
          _moduleName$split2 = slicedToArray(_moduleName$split, 1),
          head = _moduleName$split2[0];

      var module = moduleRegistry[head];
      if (module) {
        return module.import(moduleName);
      }
      var parent = this[ParentSymbol];
      if (parent) {
        return parent.import(moduleName);
      }
    }
  }, {
    key: 'declareTypeConstructor',
    value: function declareTypeConstructor(_ref) {
      var name = _ref.name,
          impl = _ref.impl,
          typeName = _ref.typeName,
          errors = _ref.errors,
          accepts = _ref.accepts,
          inferTypeParameters = _ref.inferTypeParameters,
          compareWith = _ref.compareWith;

      var nameRegistry = this[NameRegistrySymbol];

      if (nameRegistry[name]) {
        this.emitWarningMessage('Redeclaring type: ' + name + ', this may be unintended.');
      }

      var target = new TypeConstructor(this);
      target.name = name;
      target.typeName = typeName;
      target.impl = impl;
      target.errors = errors;
      target.accepts = accepts;
      target.inferTypeParameters = inferTypeParameters;
      if (typeof compareWith === 'function') {
        target.compareWith = compareWith;
      }

      nameRegistry[name] = target;

      if (typeof impl === 'function') {
        // Issue 252
        var handlerRegistry = this[TypeConstructorRegistrySymbol];

        if (handlerRegistry.has(impl)) {
          this.emitWarningMessage('A type handler already exists for the given implementation of ' + name + '.');
        }
        handlerRegistry.set(impl, target);
      }
      return target;
    }
  }, {
    key: 'getTypeConstructor',
    value: function getTypeConstructor(impl) {
      // Issue 252
      var handlerRegistry = this[TypeConstructorRegistrySymbol];

      return handlerRegistry.get(impl);
    }
  }, {
    key: 'literal',
    value: function literal(input) {
      if (input === undefined) {
        return this.void();
      } else if (input === null) {
        return this.null();
      } else if (typeof input === 'boolean') {
        return this.boolean(input);
      } else if (typeof input === 'number') {
        return this.number(input);
      } else if (typeof input === 'string') {
        return this.string(input);
      }
      // Issue 252
      else if ((typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'symbol') {
          return this.symbol(input);
        } else {
          return this.typeOf(input);
        }
    }
  }, {
    key: 'null',
    value: function _null() {
      return primitiveTypes.null;
    }
  }, {
    key: 'nullable',
    value: function nullable(type) {
      var target = new NullableType(this);
      target.type = type;
      return target;
    }
  }, {
    key: 'existential',
    value: function existential() {
      return primitiveTypes.existential;
    }
  }, {
    key: 'empty',
    value: function empty() {
      return primitiveTypes.empty;
    }
  }, {
    key: 'any',
    value: function any() {
      return primitiveTypes.any;
    }
  }, {
    key: 'mixed',
    value: function mixed() {
      return primitiveTypes.mixed;
    }
  }, {
    key: 'void',
    value: function _void() {
      return primitiveTypes.void;
    }
  }, {
    key: 'this',
    value: function _this(input) {
      var target = new ThisType(this);
      if (input !== undefined) {
        target.recorded = input;
      }
      return target;
    }
  }, {
    key: 'number',
    value: function number(input) {
      if (input !== undefined) {
        var target = new NumericLiteralType(this);
        target.value = input;
        return target;
      } else {
        return primitiveTypes.number;
      }
    }
  }, {
    key: 'boolean',
    value: function boolean(input) {
      if (input !== undefined) {
        var target = new BooleanLiteralType(this);
        target.value = input;
        return target;
      } else {
        return primitiveTypes.boolean;
      }
    }
  }, {
    key: 'string',
    value: function string(input) {
      if (input !== undefined) {
        var target = new StringLiteralType(this);
        target.value = input;
        return target;
      } else {
        return primitiveTypes.string;
      }
    }
  }, {
    key: 'symbol',
    value: function symbol(input) {
      if (input !== undefined) {
        var target = new SymbolLiteralType(this);
        target.value = input;
        return target;
      } else {
        return primitiveTypes.symbol;
      }
    }
  }, {
    key: 'typeParameter',
    value: function typeParameter(id, bound, defaultType) {
      var target = new TypeParameter(this);
      target.id = id;
      target.bound = bound;
      target.default = defaultType;
      return target;
    }
  }, {
    key: 'flowInto',
    value: function flowInto(typeParameter) {
      return flowIntoTypeParameter(typeParameter);
    }

    /**
     * Bind the type parameters for the parent class of the given instance.
     */

  }, {
    key: 'bindTypeParameters',
    value: function bindTypeParameters(subject) {
      var instancePrototype = Object.getPrototypeOf(subject);
      // Issue
      var parentPrototype = instancePrototype && Object.getPrototypeOf(instancePrototype);
      // Issue
      var parentClass = parentPrototype && parentPrototype.constructor;

      if (!parentClass) {
        this.emitWarningMessage('Could not bind type parameters for non-existent parent class.');
        return subject;
      }
      // Issue 252
      var typeParametersPointer = parentClass[TypeParametersSymbol];

      if (typeParametersPointer) {
        var typeParameters = subject[typeParametersPointer];
        var keys = Object.keys(typeParameters);

        for (var _len2 = arguments.length, typeInstances = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          typeInstances[_key2 - 1] = arguments[_key2];
        }

        var length = Math.min(keys.length, typeInstances.length);
        for (var i = 0; i < length; i++) {
          var typeParam = typeParameters[keys[i]];
          typeParam.bound = typeInstances[i];
        }
      }
      return subject;
    }
  }, {
    key: 'module',
    value: function module(name, body) {
      var target = new ModuleDeclaration(this);
      target.name = name;
      var innerContext = this.createContext();
      // Issue 252
      innerContext[ParentSymbol] = this;
      // Issue 252
      innerContext[CurrentModuleSymbol] = target;

      target.innerContext = innerContext;
      body(innerContext);
      return target;
    }
  }, {
    key: 'moduleExports',
    value: function moduleExports(type) {
      var currentModule = this[CurrentModuleSymbol];
      if (!currentModule) {
        throw new Error('Cannot declare module.exports outside of a module.');
      }
      var target = new ModuleExports(this);
      target.type = type;
      currentModule.moduleExports = target;
      return target;
    }
  }, {
    key: 'var',
    value: function _var(name, type) {
      var target = new VarDeclaration(this);
      target.name = name;
      target.type = type;
      return target;
    }
  }, {
    key: 'class',
    value: function _class(name, head) {
      if (typeof head === 'function') {
        var _target3 = new ParameterizedClassDeclaration(this);
        _target3.name = name;
        _target3.bodyCreator = head;
        return _target3;
      }
      var target = new ClassDeclaration(this);
      target.name = name;

      for (var _len3 = arguments.length, tail = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        tail[_key3 - 2] = arguments[_key3];
      }

      if (head != null) {
        tail.unshift(head);
      }
      var length = tail.length;

      var properties = [];
      var body = void 0;

      for (var i = 0; i < length; i++) {
        var item = tail[i];
        if (item instanceof ObjectTypeProperty || item instanceof ObjectTypeIndexer) {
          properties.push(item);
        } else if (item instanceof ObjectType) {
          invariant(!body, 'Class body must only be declared once.');
          body = item;
        } else if (item instanceof ExtendsDeclaration) {
          invariant(!target.superClass, 'Classes can only have one super class.');
          target.superClass = item;
        } else if (item != null && (typeof item === 'undefined' ? 'undefined' : _typeof(item)) === 'object' && !(item instanceof Type)) {
          for (var propertyName in item) {
            // eslint-disable-line
            properties.push(this.property(propertyName, item[propertyName]));
          }
        } else {
          throw new Error('ClassDeclaration cannot contain the given type directly.');
        }
      }
      if (!body) {
        body = new ObjectType(this);
      }
      if (properties.length) {
        var _body$properties;

        (_body$properties = body.properties).push.apply(_body$properties, properties);
      }
      target.body = body;
      return target;
    }
  }, {
    key: 'extends',
    value: function _extends(subject) {
      var target = new ExtendsDeclaration(this);

      for (var _len4 = arguments.length, typeInstances = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        typeInstances[_key4 - 1] = arguments[_key4];
      }

      target.type = this.ref.apply(this, [subject].concat(toConsumableArray(typeInstances)));
      return target;
    }
  }, {
    key: 'fn',
    value: function fn(head) {
      for (var _len5 = arguments.length, tail = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        tail[_key5 - 1] = arguments[_key5];
      }

      return this.function.apply(this, [head].concat(tail));
    }
  }, {
    key: 'function',
    value: function _function(head) {
      if (typeof head === 'function') {
        var _target4 = new ParameterizedFunctionType(this);
        _target4.bodyCreator = head;
        return _target4;
      }
      var target = new FunctionType(this);
      if (head != null) {
        for (var _len6 = arguments.length, tail = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
          tail[_key6 - 1] = arguments[_key6];
        }

        tail.unshift(head);
        var length = tail.length;

        for (var i = 0; i < length; i++) {
          var item = tail[i];
          if (item instanceof FunctionTypeParam) {
            target.params.push(item);
          } else if (item instanceof FunctionTypeRestParam) {
            target.rest = item;
          } else if (item instanceof FunctionTypeReturn) {
            target.returnType = item;
          } else {
            throw new Error('FunctionType cannot contain the given type directly.');
          }
        }
      }
      if (!target.returnType) {
        target.returnType = this.any();
      }
      return target;
    }
  }, {
    key: 'param',
    value: function param(name, type) {
      var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var target = new FunctionTypeParam(this);
      target.name = name;
      target.type = type;
      target.optional = optional;
      return target;
    }
  }, {
    key: 'rest',
    value: function rest(name, type) {
      var target = new FunctionTypeRestParam(this);
      target.name = name;
      target.type = type;
      return target;
    }
  }, {
    key: 'return',
    value: function _return(type) {
      var target = new FunctionTypeReturn(this);
      target.type = type;
      return target;
    }
  }, {
    key: 'generator',
    value: function generator(yieldType, returnType, nextType) {
      var target = new GeneratorType(this);
      target.yieldType = yieldType;
      target.returnType = returnType || this.any();
      target.nextType = nextType || this.any();
      return target;
    }
  }, {
    key: 'object',
    value: function object(head) {
      var target = new ObjectType(this);
      if (head != null && (typeof head === 'undefined' ? 'undefined' : _typeof(head)) === 'object' && !(head instanceof Type)) {
        for (var propertyName in head) {
          // eslint-disable-line
          target.properties.push(this.property(propertyName, head[propertyName]));
        }
      } else {
        var body = void 0;

        for (var _len7 = arguments.length, tail = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
          tail[_key7 - 1] = arguments[_key7];
        }

        if (head) {
          body = [head].concat(toConsumableArray(tail));
        } else {
          body = tail;
        }
        var _body = body,
            length = _body.length;

        for (var i = 0; i < length; i++) {
          var item = body[i];
          if (item instanceof ObjectTypeProperty) {
            target.properties.push(item);
          } else if (item instanceof ObjectTypeIndexer) {
            target.indexers.push(item);
          } else if (item instanceof ObjectTypeCallProperty) {
            target.callProperties.push(item);
          } else {
            throw new Error('ObjectType cannot contain the given type directly.');
          }
        }
      }
      return target;
    }
  }, {
    key: 'exactObject',
    value: function exactObject(head) {
      for (var _len8 = arguments.length, tail = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
        tail[_key8 - 1] = arguments[_key8];
      }

      var object = this.object.apply(this, [head].concat(toConsumableArray(tail)));
      object.exact = true;
      return object;
    }
  }, {
    key: 'callProperty',
    value: function callProperty(value) {
      var target = new ObjectTypeCallProperty(this);
      target.value = value;
      return target;
    }
  }, {
    key: 'property',
    value: function property(key, value) {
      var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var target = new ObjectTypeProperty(this);
      target.key = key;
      if (value instanceof Type) {
        target.value = value;
      } else {
        target.value = this.object(value);
      }
      target.optional = optional;
      return target;
    }
  }, {
    key: 'indexer',
    value: function indexer(id, key, value) {
      var target = new ObjectTypeIndexer(this);
      target.id = id;
      target.key = key;
      target.value = value;
      return target;
    }
  }, {
    key: 'method',
    value: function method(name, head) {
      var target = new ObjectTypeProperty(this);
      target.key = name;

      for (var _len9 = arguments.length, tail = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {
        tail[_key9 - 2] = arguments[_key9];
      }

      target.value = this.function.apply(this, [head].concat(tail));
      return target;
    }
  }, {
    key: 'staticCallProperty',
    value: function staticCallProperty(value) {
      var prop = this.callProperty(value);
      prop.static = true;
      return prop;
    }
  }, {
    key: 'staticProperty',
    value: function staticProperty(key, value) {
      var optional = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      var prop = this.property(key, value, optional);
      prop.static = true;
      return prop;
    }
  }, {
    key: 'staticMethod',
    value: function staticMethod(name, head) {
      for (var _len10 = arguments.length, tail = Array(_len10 > 2 ? _len10 - 2 : 0), _key10 = 2; _key10 < _len10; _key10++) {
        tail[_key10 - 2] = arguments[_key10];
      }

      var prop = this.method.apply(this, [name, head].concat(tail));
      prop.static = true;
      return prop;
    }
  }, {
    key: 'spread',
    value: function spread() {
      var target = new ObjectType(this);

      for (var _len11 = arguments.length, types = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
        types[_key11] = arguments[_key11];
      }

      for (var i = 0; i < types.length; i++) {
        var type = types[i].unwrap();
        if (Array.isArray(type.callProperties)) {
          var _target$callPropertie;

          (_target$callPropertie = target.callProperties).push.apply(_target$callPropertie, toConsumableArray(type.callProperties));
        }
        if (Array.isArray(type.indexers)) {
          var _target$indexers;

          (_target$indexers = target.indexers).push.apply(_target$indexers, toConsumableArray(type.indexers));
        }
        if (Array.isArray(type.properties)) {
          for (var j = 0; j < type.properties.length; j++) {
            var prop = type.properties[j];
            invariant(prop instanceof ObjectTypeProperty);
            target.setProperty(prop.key, prop.value, prop.optional);
          }
        }
      }
      return target;
    }
  }, {
    key: 'tuple',
    value: function tuple() {
      var target = new TupleType(this);

      for (var _len12 = arguments.length, types = Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
        types[_key12] = arguments[_key12];
      }

      target.types = types;
      return target;
    }
  }, {
    key: 'array',
    value: function array(elementType) {
      var target = new ArrayType(this);
      target.elementType = elementType || this.any();
      return target;
    }
  }, {
    key: 'union',
    value: function union() {
      for (var _len13 = arguments.length, types = Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
        types[_key13] = arguments[_key13];
      }

      return makeUnion(this, types);
    }
  }, {
    key: 'intersect',
    value: function intersect() {
      var target = new IntersectionType(this);

      for (var _len14 = arguments.length, types = Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {
        types[_key14] = arguments[_key14];
      }

      target.types = types;
      return target;
    }
  }, {
    key: 'intersection',
    value: function intersection() {
      return this.intersect.apply(this, arguments);
    }
  }, {
    key: 'box',
    value: function box(reveal) {
      var box = new TypeBox(this);
      box.reveal = reveal;
      return box;
    }
  }, {
    key: 'tdz',
    value: function tdz(reveal, name) {
      var tdz = new TypeTDZ(this);
      tdz.reveal = reveal;
      tdz.name = name;
      return tdz;
    }
  }, {
    key: 'ref',
    value: function ref(subject) {
      var target = void 0;
      if (typeof subject === 'string') {
        // try and eagerly resolve the reference
        target = this.get(subject);
        if (!target) {
          // defer dereferencing for now
          target = new TypeReference(this);
          target.name = subject;
        }
      } else if (typeof subject === 'function') {
        // Issue 252
        var handlerRegistry = this[TypeConstructorRegistrySymbol];

        // see if we have a dedicated TypeConstructor for this.
        target = handlerRegistry.get(subject);

        if (!target) {
          // just use a generic type handler.
          target = new GenericType(this);
          target.impl = subject;
          target.name = subject.name;
        }
      } else if (subject instanceof Type) {
        target = subject;
      } else {
        if (subject == null || (typeof subject === 'undefined' ? 'undefined' : _typeof(subject)) !== 'object') {
          this.emitWarningMessage('Could not reference the given type, try t.typeOf(value) instead. (got ' + String(subject) + ')');
        } else if (!warnedInvalidReferences.has(subject)) {
          this.emitWarningMessage('Could not reference the given type, try t.typeOf(value) instead.');
          warnedInvalidReferences.add(subject);
        }
        return this.any();
      }

      for (var _len15 = arguments.length, typeInstances = Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {
        typeInstances[_key15 - 1] = arguments[_key15];
      }

      if (typeInstances.length) {
        var _target5;

        invariant(typeof target.apply === 'function', 'Cannot apply non-applicable type: ' + target.typeName + '.');
        return (_target5 = target).apply.apply(_target5, toConsumableArray(typeInstances));
      } else {
        return target;
      }
    }
  }, {
    key: 'validate',
    value: function validate(type, input) {
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var path = arguments[3];

      var validation = new Validation(this, input);
      if (path) {
        var _validation$path;

        (_validation$path = validation.path).push.apply(_validation$path, toConsumableArray(path));
      } else if (typeof type.name === 'string') {
        validation.path.push(type.name);
      }
      validation.prefix = prefix;
      validation.errors = Array.from(type.errors(validation, [], input));
      return validation;
    }
  }, {
    key: 'check',
    value: function check(type, input) {
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var path = arguments[3];

      if (this.mode === 'assert') {
        return this.assert(type, input, prefix, path);
      } else {
        return this.warn(type, input, prefix, path);
      }
    }
  }, {
    key: 'assert',
    value: function assert(type, input) {
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var path = arguments[3];

      var validation = this.validate(type, input, prefix, path);
      var error = this.makeTypeError(validation);
      if (error) {
        throw error;
      }
      return input;
    }
  }, {
    key: 'warn',
    value: function warn(type, input) {
      var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var path = arguments[3];

      var validation = this.validate(type, input, prefix, path);
      var message = makeWarningMessage(validation);
      if (typeof message === 'string') {
        this.emitWarningMessage(message);
      }
      return input;
    }

    /**
     * Emits a warning message, using `console.warn()` by default.
     */

  }, {
    key: 'emitWarningMessage',
    value: function emitWarningMessage(message) {
      console.warn('flow-runtime:', message);
    }
  }, {
    key: 'propTypes',
    value: function propTypes(type) {
      return makeReactPropTypes(type.unwrap());
    }
  }, {
    key: 'match',
    value: function match() {
      for (var _len16 = arguments.length, args = Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
        args[_key16] = arguments[_key16];
      }

      var clauses = args.pop();
      if (!Array.isArray(clauses)) {
        throw new Error('Invalid pattern, last argument must be an array.');
      }
      var pattern = this.pattern.apply(this, toConsumableArray(clauses));
      return pattern.apply(undefined, args);
    }
  }, {
    key: 'pattern',
    value: function pattern() {
      for (var _len17 = arguments.length, clauses = Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
        clauses[_key17] = arguments[_key17];
      }

      var length = clauses.length;

      var tests = new Array(length);
      for (var i = 0; i < length; i++) {
        var clause = clauses[i];
        var annotation = this.getAnnotation(clause);
        if (!annotation) {
          if (i !== length - 1) {
            throw new Error('Invalid Pattern - found unannotated function in position ' + i + ', default clauses must be last.');
          }
          tests[i] = true;
        } else {
          invariant(annotation instanceof FunctionType || annotation instanceof ParameterizedFunctionType, 'Pattern clauses must be annotated functions.');
          tests[i] = annotation;
        }
      }
      return function () {
        for (var _i = 0; _i < tests.length; _i++) {
          var test = tests[_i];
          var _clause = clauses[_i];
          if (test === true) {
            return _clause.apply(undefined, arguments);
          } else if (test.acceptsParams.apply(test, arguments)) {
            return _clause.apply(undefined, arguments);
          }
        }
        var error = new TypeError('Value did not match any of the candidates.');
        error.name = 'RuntimeTypeError';
        throw error;
      };
    }
  }, {
    key: 'wrapIterator',
    value: function wrapIterator(type) {
      var t = this;
      return (/*#__PURE__*/_regeneratorRuntime.mark(function wrappedIterator(input) {
          var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item;

          return _regeneratorRuntime.wrap(function wrappedIterator$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _iteratorNormalCompletion = true;
                  _didIteratorError = false;
                  _iteratorError = undefined;
                  _context3.prev = 3;
                  _iterator = input[Symbol.iterator]();

                case 5:
                  if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                    _context3.next = 12;
                    break;
                  }

                  item = _step.value;
                  _context3.next = 9;
                  return t.check(type, item);

                case 9:
                  _iteratorNormalCompletion = true;
                  _context3.next = 5;
                  break;

                case 12:
                  _context3.next = 18;
                  break;

                case 14:
                  _context3.prev = 14;
                  _context3.t0 = _context3['catch'](3);
                  _didIteratorError = true;
                  _iteratorError = _context3.t0;

                case 18:
                  _context3.prev = 18;
                  _context3.prev = 19;

                  if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                  }

                case 21:
                  _context3.prev = 21;

                  if (!_didIteratorError) {
                    _context3.next = 24;
                    break;
                  }

                  throw _iteratorError;

                case 24:
                  return _context3.finish(21);

                case 25:
                  return _context3.finish(18);

                case 26:
                case 'end':
                  return _context3.stop();
              }
            }
          }, wrappedIterator, this, [[3, 14, 18, 26], [19,, 21, 25]]);
        })
      );
    }
  }, {
    key: 'refinement',
    value: function refinement(type) {
      var target = new RefinementType(this);
      target.type = type;

      for (var _len18 = arguments.length, constraints = Array(_len18 > 1 ? _len18 - 1 : 0), _key18 = 1; _key18 < _len18; _key18++) {
        constraints[_key18 - 1] = arguments[_key18];
      }

      target.addConstraint.apply(target, toConsumableArray(constraints));
      return target;
    }
  }, {
    key: '$exact',
    value: function $exact(type) {
      var target = new ObjectType(this);
      type = type.unwrap();
      if (Array.isArray(type.callProperties)) {
        var _target$callPropertie2;

        (_target$callPropertie2 = target.callProperties).push.apply(_target$callPropertie2, toConsumableArray(type.callProperties));
      }
      if (Array.isArray(type.indexers)) {
        var _target$indexers2;

        (_target$indexers2 = target.indexers).push.apply(_target$indexers2, toConsumableArray(type.indexers));
      }
      if (Array.isArray(type.properties)) {
        var _target$properties;

        (_target$properties = target.properties).push.apply(_target$properties, toConsumableArray(type.properties));
      }
      target.exact = true;
      return target;
    }
  }, {
    key: '$diff',
    value: function $diff(aType, bType) {
      var target = new $DiffType(this);
      target.aType = aType;
      target.bType = bType;
      return target;
    }
  }, {
    key: '$flowFixMe',
    value: function $flowFixMe() {
      return new $FlowFixMeType(this);
    }
  }, {
    key: '$keys',
    value: function $keys(type) {
      var target = new $KeysType(this);
      target.type = type;
      return target;
    }
  }, {
    key: '$objMap',
    value: function $objMap(object, mapper) {
      var target = new $ObjMapType(this);
      target.object = object;
      target.mapper = mapper;
      return target;
    }
  }, {
    key: '$objMapi',
    value: function $objMapi(object, mapper) {
      var target = new $ObjMapiType(this);
      target.object = object;
      target.mapper = mapper;
      return target;
    }
  }, {
    key: '$propertyType',
    value: function $propertyType(object, property) {
      var target = new $PropertyType(this);
      target.object = object;
      if (property instanceof Type) {
        var unwrapped = property.unwrap();
        target.property = unwrapped.value;
      } else {
        target.property = property;
      }
      return target;
    }
  }, {
    key: '$shape',
    value: function $shape(type) {
      var target = new $ShapeType(this);
      target.type = type;
      return target;
    }
  }, {
    key: '$subtype',
    value: function $subtype(type) {
      var target = new $SubType(this);
      target.type = type;
      return target;
    }
  }, {
    key: '$supertype',
    value: function $supertype(type) {
      var target = new $SuperType(this);
      target.type = type;
      return target;
    }
  }, {
    key: '$tupleMap',
    value: function $tupleMap(tuple, mapper) {
      var target = new $TupleMapType(this);
      target.tuple = tuple;
      target.mapper = mapper;
      return target;
    }
  }, {
    key: '$values',
    value: function $values(type) {
      var target = new $ValuesType(this);
      target.type = type;
      return target;
    }
  }, {
    key: 'Class',
    value: function Class(instanceType) {
      var target = new ClassType(this);
      target.instanceType = instanceType;
      return target;
    }
  }, {
    key: 'TypeParametersSymbol',


    // Issue 252
    get: function get$$1() {
      return TypeParametersSymbol;
    }
  }]);
  return TypeContext;
}();

var globalContext$1 = void 0;
if (typeof commonjsGlobal !== 'undefined' && typeof commonjsGlobal.__FLOW_RUNTIME_GLOBAL_CONTEXT_DO_NOT_USE_THIS_VARIABLE__ !== 'undefined') {
  globalContext$1 = commonjsGlobal.__FLOW_RUNTIME_GLOBAL_CONTEXT_DO_NOT_USE_THIS_VARIABLE__;
} else {
  globalContext$1 = new TypeContext();
  registerPrimitiveTypes(globalContext$1);
  registerBuiltinTypeConstructors(globalContext$1);
  registerTypePredicates(globalContext$1);
  if (typeof commonjsGlobal !== 'undefined') {
    commonjsGlobal.__FLOW_RUNTIME_GLOBAL_CONTEXT_DO_NOT_USE_THIS_VARIABLE__ = globalContext$1;
  }
}

var globalContext$2 = globalContext$1;

function v(thing) {
  return { value: thing };
}

if (typeof commonjsGlobal !== 'undefined' && commonjsGlobal.__FLOW_RUNTIME_GLOBAL_CONTEXT_DO_NOT_USE_THIS_VARIABLE__ !== globalContext$2) {
  Object.defineProperties(globalContext$2, {
    TypeContext: v(TypeContext),
    Type: v(Type),
    TypeBox: v(TypeBox),
    TypeParameter: v(TypeParameter),
    TypeReference: v(TypeReference),
    TypeTDZ: v(TypeTDZ),
    ParameterizedTypeAlias: v(ParameterizedTypeAlias),
    TypeAlias: v(TypeAlias),
    TypeConstructor: v(TypeConstructor),
    GenericType: v(GenericType),
    NullLiteralType: v(NullLiteralType),
    NumberType: v(NumberType),
    NumericLiteralType: v(NumericLiteralType),
    BooleanType: v(BooleanType),
    BooleanLiteralType: v(BooleanLiteralType),
    SymbolType: v(SymbolType),
    SymbolLiteralType: v(SymbolLiteralType),
    StringType: v(StringType),
    StringLiteralType: v(StringLiteralType),
    ArrayType: v(ArrayType),
    ObjectType: v(ObjectType),
    ObjectTypeCallProperty: v(ObjectTypeCallProperty),
    ObjectTypeIndexer: v(ObjectTypeIndexer),
    ObjectTypeProperty: v(ObjectTypeProperty),
    FunctionType: v(FunctionType),
    FunctionTypeParam: v(FunctionTypeParam),
    FunctionTypeRestParam: v(FunctionTypeRestParam),
    FunctionTypeReturn: v(FunctionTypeReturn),
    ParameterizedFunctionType: v(ParameterizedFunctionType),
    PartialType: v(PartialType),
    RefinementType: v(RefinementType),
    TypeParameterApplication: v(TypeParameterApplication),
    GeneratorType: v(GeneratorType),
    ExistentialType: v(ExistentialType),
    FlowIntoType: v(FlowIntoType),
    AnyType: v(AnyType),
    MixedType: v(MixedType),
    EmptyType: v(EmptyType),
    NullableType: v(NullableType),
    ThisType: v(ThisType),
    TupleType: v(TupleType),
    UnionType: v(UnionType),
    IntersectionType: v(IntersectionType),
    VoidType: v(VoidType),
    Declaration: v(Declaration),
    VarDeclaration: v(VarDeclaration),
    TypeDeclaration: v(TypeDeclaration),
    ModuleDeclaration: v(ModuleDeclaration),
    ModuleExportsDeclaration: v(ModuleExports),
    ClassDeclaration: v(ClassDeclaration),
    ParameterizedClassDeclaration: v(ParameterizedClassDeclaration),
    ExtendsDeclaration: v(ExtendsDeclaration)
  });
}

return globalContext$2;

})));

});

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var Types = flowRuntime_umd.type("Types", flowRuntime_umd.union(flowRuntime_umd.string("any"), flowRuntime_umd.string("alternatives"), flowRuntime_umd.string("array"), flowRuntime_umd.string("boolean"), flowRuntime_umd.string("binary"), flowRuntime_umd.string("date"), flowRuntime_umd.string("function"), flowRuntime_umd.string("link"), flowRuntime_umd.string("number"), flowRuntime_umd.string("object"), flowRuntime_umd.string("string"), flowRuntime_umd.string("symbol")));
var JoiT = flowRuntime_umd.type("JoiT", flowRuntime_umd.object(flowRuntime_umd.property("$_super", flowRuntime_umd.ref("object")), flowRuntime_umd.property("$_terms", flowRuntime_umd.ref("object")), flowRuntime_umd.property("$_root", flowRuntime_umd.ref("object")), flowRuntime_umd.property("_flags", flowRuntime_umd.ref("object")), flowRuntime_umd.property("type", flowRuntime_umd.union(Types, flowRuntime_umd.string()))));

// This file is part of leanes-mapper-addon.
var JoiT$1 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var AttributeOptionsT = flowRuntime_umd.type("AttributeOptionsT", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("json"), flowRuntime_umd.string("binary"), flowRuntime_umd.string("boolean"), flowRuntime_umd.string("date"), flowRuntime_umd.string("datetime"), flowRuntime_umd.string("number"), flowRuntime_umd.string("decimal"), flowRuntime_umd.string("float"), flowRuntime_umd.string("integer"), flowRuntime_umd.string("primary_key"), flowRuntime_umd.string("string"), flowRuntime_umd.string("text"), flowRuntime_umd.string("time"), flowRuntime_umd.string("timestamp"), flowRuntime_umd.string("array"), flowRuntime_umd.string("hash"))), flowRuntime_umd.property("transform", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()))), true), flowRuntime_umd.property("validate", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$1))), true)));

// This file is part of leanes-mapper-addon.
var JoiT$2 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var AttributeConfigT = flowRuntime_umd.type("AttributeConfigT", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("json"), flowRuntime_umd.string("binary"), flowRuntime_umd.string("boolean"), flowRuntime_umd.string("date"), flowRuntime_umd.string("datetime"), flowRuntime_umd.string("number"), flowRuntime_umd.string("decimal"), flowRuntime_umd.string("float"), flowRuntime_umd.string("integer"), flowRuntime_umd.string("primary_key"), flowRuntime_umd.string("string"), flowRuntime_umd.string("text"), flowRuntime_umd.string("time"), flowRuntime_umd.string("timestamp"), flowRuntime_umd.string("array"), flowRuntime_umd.string("hash"))), flowRuntime_umd.property("transform", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential())))), flowRuntime_umd.property("validate", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$2))))));

// This file is part of leanes-mapper-addon.
var AttributeConfigT$1 = flowRuntime_umd.tdz(function () {
  return AttributeConfigT;
});
var AttributeOptionsT$1 = flowRuntime_umd.tdz(function () {
  return AttributeOptionsT;
});
var cpoMetaObject$1 = Symbol["for"]('~metaObject');
function attribute(opts) {
  var _optsType = flowRuntime_umd.ref(AttributeOptionsT$1);

  flowRuntime_umd.param("opts", _optsType).assert(opts);
  return function (target, key, descriptor) {
    var isClass = target[cpoMetaObject$1] != null;
    assert$1(!isClass, 'Decorator `attribute` may be used with instance properties only');
    var vcClass = target.constructor;
    assert$1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Property '").concat(key, "' can not be declared"));
    assert$1(opts.type != null, 'option `type` is required');
    assert$1(vcClass.attributes[key] == null, "attribute `".concat(key, "` has been defined previously"));

    opts.transform = opts.transform || function () {
      switch (opts.type) {
        case 'primary_key':
          return function () {
            return vcClass.Module.NS.PrimaryKeyTransform;
          };

        case 'string':
        case 'text':
          return function () {
            return vcClass.Module.NS.StringTransform;
          };

        case 'date':
          return function () {
            return vcClass.Module.NS.DateTransform;
          };

        case 'number':
        case 'decimal':
        case 'float':
        case 'integer':
          return function () {
            return vcClass.Module.NS.NumberTransform;
          };

        case 'boolean':
          return function () {
            return vcClass.Module.NS.BooleanTransform;
          };

        case 'array':
          return function () {
            return vcClass.Module.NS.ArrayTransform;
          };

        case 'hash':
        case 'json':
          return function () {
            return vcClass.Module.NS.ObjectTransform;
          };

        default:
          return function () {
            return vcClass.Module.NS.Transform;
          };
      }
    }();

    opts.validate = opts.validate || function () {
      return opts.transform.call(this).schema;
    };

    var newDescriptor = function () {
      if (descriptor.get == null && descriptor.set == null) {
        var initialValue = descriptor.value || descriptor.initializer && descriptor.initializer();
        var pointer = Symbol("_".concat(key));
        Reflect.defineProperty(target, pointer, {
          writable: true,
          enumerable: false,
          value: initialValue
        });
        return {
          configurable: true,
          enumerable: true,
          get: function get() {
            return this[pointer];
          },
          set: function set(aoData) {
            var _opts$validate$call$v = opts.validate.call(this).validate(aoData),
                voData = _opts$validate$call$v.value;

            this[pointer] = voData;
            return voData;
          }
        };
      } else {
        return {
          configurable: true,
          enumerable: true,
          get: function get() {
            var externalGet = descriptor.get;

            if (lodash.isFunction(externalGet)) {
              return externalGet.call(this);
            }
          },
          set: function set(aoData) {
            var _opts$validate$call$v2 = opts.validate.call(this).validate(aoData),
                voData = _opts$validate$call$v2.value;

            var externalSet = descriptor.set;

            if (lodash.isFunction(externalSet)) {
              return externalSet.call(this, voData);
            }
          }
        };
      }
    }();

    _optsType = flowRuntime_umd.ref(AttributeConfigT$1);

    _optsType.assert(opts);

    vcClass.metaObject.addMetaData('attributes', key, opts);
    vcClass.metaObject.addMetaData('instanceVariables', key, newDescriptor);
    return newDescriptor;
  };
}
flowRuntime_umd.annotate(attribute, flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(AttributeOptionsT$1))));

var regenerator = runtime_1;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var defineProperty = _defineProperty;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var asyncToGenerator = _asyncToGenerator;

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

var arrayWithHoles = _arrayWithHoles;

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

var iterableToArrayLimit = _iterableToArrayLimit;

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

var arrayLikeToArray = _arrayLikeToArray;

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

var unsupportedIterableToArray = _unsupportedIterableToArray;

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var nonIterableRest = _nonIterableRest;

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

var slicedToArray = _slicedToArray;

// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
// import type { CollectionInterface } from './CollectionInterface';
// import type { RecordStaticInterface } from './RecordStaticInterface';
var RecordInterface = flowRuntime_umd.type("RecordInterface", function (RecordInterface) {
  return flowRuntime_umd.object(flowRuntime_umd.property("parseRecordName", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.string())))), flowRuntime_umd.property("findRecordByName", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential())))), flowRuntime_umd.property("save", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("create", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("update", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("delete", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd["void"](), RecordInterface))))), flowRuntime_umd.property("destroy", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("attributes", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("object")))), flowRuntime_umd.property("clone", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("copy", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("decrement", flowRuntime_umd["function"](flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd.param("step", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("increment", flowRuntime_umd["function"](flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd.param("step", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("toggle", flowRuntime_umd["function"](flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("updateAttribute", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("value", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("updateAttributes", flowRuntime_umd["function"](flowRuntime_umd.param("aoAttributes", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("isNew", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())))), flowRuntime_umd.property("reload", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", RecordInterface)))), flowRuntime_umd.property("changedAttributes", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.nullable(flowRuntime_umd.any())))))))), flowRuntime_umd.property("resetAttribute", flowRuntime_umd["function"](flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("rollbackAttributes", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))));
});

// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
var RelationOptionsT = flowRuntime_umd.type("RelationOptionsT", flowRuntime_umd.object(flowRuntime_umd.property("refKey", flowRuntime_umd.string(), true), flowRuntime_umd.property("attr", flowRuntime_umd.string(), true), flowRuntime_umd.property("inverse", flowRuntime_umd.string(), true), flowRuntime_umd.property("inverseType", flowRuntime_umd.string(), true), flowRuntime_umd.property("recordName", flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), true), flowRuntime_umd.property("collectionName", flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), true), flowRuntime_umd.property("through", flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.exactObject(flowRuntime_umd.property("by", flowRuntime_umd.string()))), true)));

// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
var RelationConfigT = flowRuntime_umd.type("RelationConfigT", flowRuntime_umd.exactObject(flowRuntime_umd.property("refKey", flowRuntime_umd.string()), flowRuntime_umd.property("attr", flowRuntime_umd.nullable(flowRuntime_umd.string()), true), flowRuntime_umd.property("inverse", flowRuntime_umd.string()), flowRuntime_umd.property("inverseType", flowRuntime_umd.nullable(flowRuntime_umd.string()), true), flowRuntime_umd.property("relation", flowRuntime_umd.union(flowRuntime_umd.string("relatedTo"), flowRuntime_umd.string("belongsTo"), flowRuntime_umd.string("hasMany"), flowRuntime_umd.string("hasOne"))), flowRuntime_umd.property("recordName", flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("collectionName", flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("through", flowRuntime_umd.nullable(flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.exactObject(flowRuntime_umd.property("by", flowRuntime_umd.string())))), true)));

var RelationConfigT$1 = flowRuntime_umd.tdz(function () {
  return RelationConfigT;
});
var RelationOptionsT$1 = flowRuntime_umd.tdz(function () {
  return RelationOptionsT;
});
var RecordInterface$1 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var cpoMetaObject$2 = Symbol["for"]('~metaObject'); // NOTE: отличается от relatedTo тем, что сама связь является обязательной (образуется между объектами "в иерархии"), а в @[opts.attr] обязательно должно храниться значение айдишника родительского объекта, которому "belongs to" - "принадлежит" этот объект
// NOTE: если указана опция through, то получение данных о связи будет происходить не из @[opts.attr], а из промежуточной коллекции, где помимо айдишника объекта могут храниться дополнительные атрибуты с данными о связи

function belongsTo(opts) {
  var _optsType = flowRuntime_umd.ref(RelationOptionsT$1);

  flowRuntime_umd.param("opts", _optsType).assert(opts);
  return function (target, key, descriptor) {
    var isClass = target[cpoMetaObject$2] != null;
    assert$1(!isClass, 'Decorator `belongsTo` may be used with instance properties only');
    var vcClass = target.constructor;
    assert$1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Property '").concat(key, "' can not be declared"));
    var _vcClass$Module$NS$Ut = vcClass.Module.NS.Utils,
        _ = _vcClass$Module$NS$Ut._,
        joi = _vcClass$Module$NS$Ut.joi,
        inflect = _vcClass$Module$NS$Ut.inflect;
    opts.refKey = opts.refKey || 'id';
    opts.attr = opts.attr || "".concat(key, "Id");
    opts.inverse = opts.inverse || "".concat(inflect.pluralize(inflect.camelize(vcClass.name.replace(/Record$/, ''), false)));
    opts.inverseType = opts.inverseType || null;
    opts.recordName = opts.recordName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      var _recordTypeType = flowRuntime_umd.nullable(flowRuntime_umd.string());

      var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.string());

      flowRuntime_umd.param("recordType", _recordTypeType).assert(recordType);
      var vsModuleName, vsRecordName;

      if (recordType != null) {
        var recordClass = this.findRecordByName(recordType);

        var classNames = _.filter(recordClass.parentClassNames(), function (name) {
          return /.*Record$/.test(name);
        });

        vsRecordName = classNames[1];
      } else {
        var _this$parseRecordName = this.parseRecordName(key);

        var _this$parseRecordName2 = slicedToArray(_this$parseRecordName, 2);

        vsModuleName = _this$parseRecordName2[0];
        vsRecordName = _this$parseRecordName2[1];
      }

      return _returnType2.assert(vsRecordName);
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.collectionName = opts.collectionName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      var _recordTypeType2 = flowRuntime_umd.nullable(flowRuntime_umd.string());

      var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.string());

      flowRuntime_umd.param("recordType", _recordTypeType2).assert(recordType);
      return _returnType3.assert("".concat(inflect.pluralize(opts.recordName.call(this, recordType).replace(/Record$/, '')), "Collection"));
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.relation = 'belongsTo';
    var newDescriptor = {
      configurable: true,
      enumerable: true,
      get: flowRuntime_umd.annotate( /*#__PURE__*/asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
        var _returnType, recordType, BelongsToCollection, embeddings, throughEmbed, ThroughCollection, ThroughRecord, inverse, belongsId;

        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$1), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$1))));
                recordType = opts.inverseType && this[opts.inverseType] || null;
                BelongsToCollection = this.collection.facade.retrieveProxy(collectionName.call(this, recordType)); // NOTE: может быть ситуация, что belongsTo связь не хранится в классическом виде атрибуте рекорда, а хранение вынесено в отдельную промежуточную коллекцию по аналогии с М:М , но с добавленным uniq констрейнтом на одном поле (чтобы эмулировать 1:М связи)

                if (opts.through) {
                  _context.next = 13;
                  break;
                }

                _context.t0 = _returnType;
                _context.next = 7;
                return BelongsToCollection.takeBy(defineProperty({}, "@doc.".concat(opts.refKey), this[opts.attr]), {
                  $limit: 1
                });

              case 7:
                _context.next = 9;
                return _context.sent.first();

              case 9:
                _context.t1 = _context.sent;
                return _context.abrupt("return", _context.t0.assert.call(_context.t0, _context.t1));

              case 13:
                // NOTE: метаданные о through в случае с релейшеном к одному объекту должны быть описаны с помощью метода hasEmbed. Поэтому здесь идет обращение только к @constructor.embeddings
                embeddings = this.constructor.embeddings;
                throughEmbed = embeddings && embeddings[opts.through[0]] || undefined;
                assert$1(throughEmbed != null, "Metadata about ".concat(opts.through[0], " must be defined by `EmbeddableRecordMixin.hasEmbed` method"));
                ThroughCollection = this.collection.facade.retrieveProxy(throughEmbed.collectionName.call(this));
                ThroughRecord = this.findRecordByName(throughEmbed.recordName.call(this));
                inverse = ThroughRecord.relations[opts.through[1].by];
                _context.next = 21;
                return ThroughCollection.takeBy(defineProperty({}, "@doc.".concat(throughEmbed.inverse), this[throughEmbed.refKey]), {
                  $limit: 1
                });

              case 21:
                _context.next = 23;
                return _context.sent.first();

              case 23:
                _context.t2 = opts.through[1].by;
                belongsId = _context.sent[_context.t2];
                _context.t3 = _returnType;
                _context.next = 28;
                return BelongsToCollection.takeBy(defineProperty({}, "@doc.".concat(inverse.refKey), belongsId), {
                  $limit: 1
                });

              case 28:
                _context.next = 30;
                return _context.sent.first();

              case 30:
                _context.t4 = _context.sent;
                return _context.abrupt("return", _context.t3.assert.call(_context.t3, _context.t4));

              case 32:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      })), flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$1)))))
    };
    _optsType = flowRuntime_umd.ref(RelationConfigT$1);

    _optsType.assert(opts);

    vcClass.metaObject.addMetaData('relations', key, opts);
    vcClass.metaObject.addMetaData('instanceVariables', key, newDescriptor);
    return newDescriptor;
  };
}
flowRuntime_umd.annotate(belongsTo, flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(RelationOptionsT$1))));

// This file is part of leanes-mapper-addon.
var JoiT$3 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var ComputedOptionsT = flowRuntime_umd.type("ComputedOptionsT", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("json"), flowRuntime_umd.string("binary"), flowRuntime_umd.string("boolean"), flowRuntime_umd.string("date"), flowRuntime_umd.string("datetime"), flowRuntime_umd.string("number"), flowRuntime_umd.string("decimal"), flowRuntime_umd.string("float"), flowRuntime_umd.string("integer"), flowRuntime_umd.string("primary_key"), flowRuntime_umd.string("string"), flowRuntime_umd.string("text"), flowRuntime_umd.string("time"), flowRuntime_umd.string("timestamp"), flowRuntime_umd.string("array"), flowRuntime_umd.string("hash"))), flowRuntime_umd.property("transform", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()))), true), flowRuntime_umd.property("validate", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$3))), true)));

// This file is part of leanes-mapper-addon.
var JoiT$4 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var ComputedConfigT = flowRuntime_umd.type("ComputedConfigT", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("json"), flowRuntime_umd.string("binary"), flowRuntime_umd.string("boolean"), flowRuntime_umd.string("date"), flowRuntime_umd.string("datetime"), flowRuntime_umd.string("number"), flowRuntime_umd.string("decimal"), flowRuntime_umd.string("float"), flowRuntime_umd.string("integer"), flowRuntime_umd.string("primary_key"), flowRuntime_umd.string("string"), flowRuntime_umd.string("text"), flowRuntime_umd.string("time"), flowRuntime_umd.string("timestamp"), flowRuntime_umd.string("array"), flowRuntime_umd.string("hash"))), flowRuntime_umd.property("transform", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential())))), flowRuntime_umd.property("validate", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$4))))));

// This file is part of leanes-mapper-addon.
var ComputedConfigT$1 = flowRuntime_umd.tdz(function () {
  return ComputedConfigT;
});
var ComputedOptionsT$1 = flowRuntime_umd.tdz(function () {
  return ComputedOptionsT;
});
var cpoMetaObject$3 = Symbol["for"]('~metaObject');
function computed(opts) {
  var _optsType = flowRuntime_umd.ref(ComputedOptionsT$1);

  flowRuntime_umd.param("opts", _optsType).assert(opts);
  return function (target, key, descriptor) {
    var isClass = target[cpoMetaObject$3] != null;
    assert$1(!isClass, 'Decorator `computed` may be used with instance properties only');
    var vcClass = target.constructor;
    assert$1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Property '").concat(key, "' can not be declared"));
    assert$1(vcClass.computeds[key] == null, "computed `".concat(key, "` has been defined previously"));
    assert$1(opts.type != null, 'option `type` is required');
    assert$1(descriptor.get != null, 'getter `lambda` in descriptor is required');
    assert$1(descriptor.set == null, 'setter `lambda` in descriptor is forbidden');

    opts.transform = opts.transform || function () {
      switch (opts.type) {
        case 'primary_key':
          return function () {
            return vcClass.Module.NS.PrimaryKeyTransform;
          };

        case 'string':
        case 'text':
          return function () {
            return vcClass.Module.NS.StringTransform;
          };

        case 'date':
          return function () {
            return vcClass.Module.NS.DateTransform;
          };

        case 'number':
        case 'decimal':
        case 'float':
        case 'integer':
          return function () {
            return vcClass.Module.NS.NumberTransform;
          };

        case 'boolean':
          return function () {
            return vcClass.Module.NS.BooleanTransform;
          };

        case 'array':
          return function () {
            return vcClass.Module.NS.ArrayTransform;
          };

        case 'hash':
        case 'json':
          return function () {
            return vcClass.Module.NS.ObjectTransform;
          };

        default:
          return function () {
            return vcClass.Module.NS.Transform;
          };
      }
    }();

    opts.validate = opts.validate || function () {
      return opts.transform.call(this).schema.strip();
    };

    _optsType = flowRuntime_umd.ref(ComputedConfigT$1);

    _optsType.assert(opts);

    vcClass.metaObject.addMetaData('computeds', key, opts);
    vcClass.metaObject.addMetaData('instanceVariables', key, descriptor);
    return descriptor;
  };
}
flowRuntime_umd.annotate(computed, flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(ComputedOptionsT$1))));

// This file is part of leanes-mapper-addon.
var hasProp = {}.hasOwnProperty;
function customFilters(config) {
  var _this = this;

  return function (acTarget) {
    assert$1(acTarget[cpoMetaObject] != null, 'Target for `customFilters` decorator must be a Class');

    for (var asFilterName in config) {
      if (!hasProp.call(config, asFilterName)) continue;
      var aoStatement = config[asFilterName];

      _this.metaObject.addMetaData('customFilters', asFilterName, aoStatement);
    }

    return acTarget;
  };
}

// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
// import type { CollectionInterface } from './CollectionInterface';
var CursorInterface = flowRuntime_umd.type("CursorInterface", function (CursorInterface) {
  var Collection = CursorInterface.typeParameter("Collection"),
      Delegate = CursorInterface.typeParameter("Delegate"),
      Iterable = CursorInterface.typeParameter("Iterable", undefined, flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))));
  return flowRuntime_umd.object(flowRuntime_umd.property("isClosed", flowRuntime_umd["boolean"]()), flowRuntime_umd.property("setCollection", flowRuntime_umd["function"](flowRuntime_umd.param("aoCollection", Collection), flowRuntime_umd["return"](CursorInterface))), flowRuntime_umd.property("setIterable", flowRuntime_umd["function"](flowRuntime_umd.param("alArray", Iterable), flowRuntime_umd["return"](CursorInterface))), flowRuntime_umd.property("toArray", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.nullable(Delegate)))))), flowRuntime_umd.property("next", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(Delegate))))), flowRuntime_umd.property("hasNext", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())))), flowRuntime_umd.property("close", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("count", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.number())))), flowRuntime_umd.property("forEach", flowRuntime_umd["function"](flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", Delegate), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("map", flowRuntime_umd["function"](function (_fn) {
    var R = _fn.typeParameter("R");

    return [flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", Delegate), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(R, flowRuntime_umd.ref("Promise", R))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(R)))];
  })), flowRuntime_umd.property("filter", flowRuntime_umd["function"](flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", Delegate), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.nullable(Delegate)))))), flowRuntime_umd.property("find", flowRuntime_umd["function"](flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", Delegate), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(Delegate))))), flowRuntime_umd.property("compact", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.nullable(Delegate)))))), flowRuntime_umd.property("reduce", flowRuntime_umd["function"](function (_fn2) {
    var I = _fn2.typeParameter("I");

    return [flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", I), flowRuntime_umd.param("_arg1", Delegate), flowRuntime_umd.param("_arg2", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(I, flowRuntime_umd.ref("Promise", I))))), flowRuntime_umd.param("initialValue", I), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", I))];
  })), flowRuntime_umd.property("first", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(Delegate))))));
});

var RelationConfigT$2 = flowRuntime_umd.tdz(function () {
  return RelationConfigT;
});
var RelationOptionsT$2 = flowRuntime_umd.tdz(function () {
  return RelationOptionsT;
});
var CursorInterface$1 = flowRuntime_umd.tdz(function () {
  return CursorInterface;
});
var cpoMetaObject$4 = Symbol["for"]('~metaObject');
function hasMany(opts) {
  var _optsType = flowRuntime_umd.ref(RelationOptionsT$2);

  flowRuntime_umd.param("opts", _optsType).assert(opts);
  return function (target, key, descriptor) {
    var isClass = target[cpoMetaObject$4] != null;
    assert$1(!isClass, 'Decorator `hasMany` may be used with instance properties only');
    var vcClass = target.constructor;
    assert$1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Property '").concat(key, "' can not be declared"));
    var _vcClass$Module$NS$Ut = vcClass.Module.NS.Utils,
        _ = _vcClass$Module$NS$Ut._,
        joi = _vcClass$Module$NS$Ut.joi,
        inflect = _vcClass$Module$NS$Ut.inflect;
    opts.refKey = opts.refKey || 'id';
    opts.inverse = opts.inverse || "".concat(inflect.singularize(inflect.camelize(vcClass.name.replace(/Record$/, ''), false)), "Id");
    opts.inverseType = opts.inverseType || null;
    opts.recordName = opts.recordName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      var _recordTypeType = flowRuntime_umd.nullable(flowRuntime_umd.string());

      var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.string());

      flowRuntime_umd.param("recordType", _recordTypeType).assert(recordType);
      var vsModuleName, vsRecordName;

      if (recordType != null) {
        var recordClass = this.findRecordByName(recordType);

        var classNames = _.filter(recordClass.parentClassNames(), function (name) {
          return /.*Record$/.test(name);
        });

        vsRecordName = classNames[1];
      } else {
        var _this$parseRecordName = this.parseRecordName(key);

        var _this$parseRecordName2 = slicedToArray(_this$parseRecordName, 2);

        vsModuleName = _this$parseRecordName2[0];
        vsRecordName = _this$parseRecordName2[1];
      }

      return _returnType2.assert(vsRecordName);
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.collectionName = opts.collectionName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      var _recordTypeType2 = flowRuntime_umd.nullable(flowRuntime_umd.string());

      var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.string());

      flowRuntime_umd.param("recordType", _recordTypeType2).assert(recordType);
      return _returnType3.assert("".concat(inflect.pluralize(opts.recordName.call(this, recordType).replace(/Record$/, '')), "Collection"));
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.relation = 'hasMany';
    var newDescriptor = {
      configurable: true,
      enumerable: true,
      get: flowRuntime_umd.annotate( /*#__PURE__*/asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
        var _returnType, HasManyCollection, query, embeddings, throughEmbed, ThroughCollection, ThroughRecord, inverse, manyIds;

        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(CursorInterface$1, flowRuntime_umd.existential(), flowRuntime_umd.existential()), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$1, flowRuntime_umd.existential(), flowRuntime_umd.existential()))));
                HasManyCollection = this.collection.facade.retrieveProxy(opts.collectionName.call(this));

                if (opts.through) {
                  _context.next = 12;
                  break;
                }

                query = defineProperty({}, "@doc.".concat(opts.inverse), this[opts.refKey]);

                if (opts.inverseType != null) {
                  query["@doc.".concat(opts.inverseType)] = this.type;
                }

                _context.t0 = _returnType;
                _context.next = 8;
                return HasManyCollection.takeBy(query);

              case 8:
                _context.t1 = _context.sent;
                return _context.abrupt("return", _context.t0.assert.call(_context.t0, _context.t1));

              case 12:
                embeddings = this.constructor.embeddings;
                throughEmbed = embeddings && embeddings[opts.through[0]] || this.constructor.relations[opts.through[0]];
                ThroughCollection = this.collection.facade.retrieveProxy(throughEmbed.collectionName.call(this));
                ThroughRecord = this.findRecordByName(throughEmbed.recordName.call(this));
                inverse = ThroughRecord.relations[opts.through[1].by];
                _context.next = 19;
                return ThroughCollection.takeBy(defineProperty({}, "@doc.".concat(throughEmbed.inverse), this[opts.refKey]));

              case 19:
                _context.next = 21;
                return _context.sent.map(function (voRecord) {
                  return voRecord[opts.through[1].by];
                });

              case 21:
                manyIds = _context.sent;
                _context.t2 = _returnType;
                _context.next = 25;
                return HasManyCollection.takeBy(defineProperty({}, "@doc.".concat(inverse.refKey), {
                  $in: manyIds
                }));

              case 25:
                _context.t3 = _context.sent;
                return _context.abrupt("return", _context.t2.assert.call(_context.t2, _context.t3));

              case 27:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      })), flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$1, flowRuntime_umd.existential(), flowRuntime_umd.existential())))))
    };
    _optsType = flowRuntime_umd.ref(RelationConfigT$2);

    _optsType.assert(opts);

    vcClass.metaObject.addMetaData('relations', key, opts);
    vcClass.metaObject.addMetaData('instanceVariables', key, newDescriptor);
    return newDescriptor;
  };
}
flowRuntime_umd.annotate(hasMany, flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(RelationOptionsT$2))));

var RelationConfigT$3 = flowRuntime_umd.tdz(function () {
  return RelationConfigT;
});
var RelationOptionsT$3 = flowRuntime_umd.tdz(function () {
  return RelationOptionsT;
});
var RecordInterface$2 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var cpoMetaObject$5 = Symbol["for"]('~metaObject');
function hasOne(opts) {
  var _this = this;

  var _optsType = flowRuntime_umd.ref(RelationOptionsT$3);

  flowRuntime_umd.param("opts", _optsType).assert(opts);
  return function (target, key, descriptor) {
    var isClass = target[cpoMetaObject$5] != null;
    assert$1(!isClass, 'Decorator `hasOne` may be used with instance properties only');
    var vcClass = target.constructor;
    assert$1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Property '").concat(key, "' can not be declared"));
    var _vcClass$Module$NS$Ut = vcClass.Module.NS.Utils,
        _ = _vcClass$Module$NS$Ut._,
        joi = _vcClass$Module$NS$Ut.joi,
        inflect = _vcClass$Module$NS$Ut.inflect;
    opts.refKey = opts.refKey || 'id';
    opts.inverse = opts.inverse || "".concat(inflect.singularize(inflect.camelize(_this.name.replace(/Record$/, ''), false)), "Id");
    opts.inverseType = opts.inverseType || null;
    opts.recordName = opts.recordName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      var _recordTypeType = flowRuntime_umd.nullable(flowRuntime_umd.string());

      var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.string());

      flowRuntime_umd.param("recordType", _recordTypeType).assert(recordType);
      var vsModuleName, vsRecordName;

      if (recordType != null) {
        var recordClass = this.findRecordByName(recordType);

        var classNames = _.filter(recordClass.parentClassNames(), function (name) {
          return /.*Record$/.test(name);
        });

        vsRecordName = classNames[1];
      } else {
        var _this$parseRecordName = this.parseRecordName(key);

        var _this$parseRecordName2 = slicedToArray(_this$parseRecordName, 2);

        vsModuleName = _this$parseRecordName2[0];
        vsRecordName = _this$parseRecordName2[1];
      }

      return _returnType2.assert(vsRecordName);
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.collectionName = opts.collectionName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      var _recordTypeType2 = flowRuntime_umd.nullable(flowRuntime_umd.string());

      var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.string());

      flowRuntime_umd.param("recordType", _recordTypeType2).assert(recordType);
      return _returnType3.assert("".concat(inflect.pluralize(opts.recordName.call(this, recordType).replace(/Record$/, '')), "Collection"));
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.relation = 'hasOne';
    var newDescriptor = {
      configurable: true,
      enumerable: true,
      get: flowRuntime_umd.annotate( /*#__PURE__*/asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
        var _returnType, HasOneCollection, query, embeddings, throughEmbed, ThroughCollection, ThroughRecord, inverse, oneId;

        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$2), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$2))));
                HasOneCollection = this.collection.facade.retrieveProxy(collectionName.call(this)); // NOTE: может быть ситуация, что hasOne связь не хранится в классическом виде атрибуте рекорда, а хранение вынесено в отдельную промежуточную коллекцию по аналогии с М:М , но с добавленным uniq констрейнтом на одном поле (чтобы эмулировать 1:М связи)

                if (opts.through) {
                  _context.next = 14;
                  break;
                }

                query = defineProperty({}, "@doc.".concat(opts.inverse), this[opts.refKey]);

                if (opts.inverseType != null) {
                  query["@doc.".concat(opts.inverseType)] = this.type;
                }

                _context.t0 = _returnType;
                _context.next = 8;
                return HasOneCollection.takeBy(query, {
                  $limit: 1
                });

              case 8:
                _context.next = 10;
                return _context.sent.first();

              case 10:
                _context.t1 = _context.sent;
                return _context.abrupt("return", _context.t0.assert.call(_context.t0, _context.t1));

              case 14:
                embeddings = this.constructor.embeddings;
                throughEmbed = embeddings && embeddings[opts.through[0]] || this.constructor.relations[opts.through[0]];
                ThroughCollection = this.collection.facade.retrieveProxy(throughEmbed.collectionName.call(this));
                ThroughRecord = this.findRecordByName(throughEmbed.recordName.call(this));
                inverse = ThroughRecord.relations[opts.through[1].by];
                _context.next = 21;
                return ThroughCollection.takeBy(defineProperty({}, "@doc.".concat(throughEmbed.inverse), this[opts.refKey]), {
                  $limit: 1
                });

              case 21:
                _context.next = 23;
                return _context.sent.first();

              case 23:
                _context.t2 = opts.through[1].by;
                oneId = _context.sent[_context.t2];
                _context.t3 = _returnType;
                _context.next = 28;
                return HasOneCollection.takeBy(defineProperty({}, "@doc.".concat(inverse.refKey), oneId), {
                  $limit: 1
                });

              case 28:
                _context.next = 30;
                return _context.sent.first();

              case 30:
                _context.t4 = _context.sent;
                return _context.abrupt("return", _context.t3.assert.call(_context.t3, _context.t4));

              case 32:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      })), flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$2)))))
    };
    _optsType = flowRuntime_umd.ref(RelationConfigT$3);

    _optsType.assert(opts);

    vcClass.metaObject.addMetaData('relations', key, opts);
    vcClass.metaObject.addMetaData('instanceVariables', key, newDescriptor);
    return newDescriptor;
  };
}
flowRuntime_umd.annotate(hasOne, flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(RelationOptionsT$3))));

var RelationConfigT$4 = flowRuntime_umd.tdz(function () {
  return RelationConfigT;
});
var RelationOptionsT$4 = flowRuntime_umd.tdz(function () {
  return RelationOptionsT;
});
var RecordInterface$3 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var cpoMetaObject$6 = Symbol["for"]('~metaObject'); // NOTE: отличается от belongsTo тем, что сама связь не является обязательной (образуется между объектами "в одной плоскости"), а в @[opts.attr] может содержаться null значение

function relatedTo(opts) {
  var _optsType = flowRuntime_umd.ref(RelationOptionsT$4);

  flowRuntime_umd.param("opts", _optsType).assert(opts);
  return function (target, key, descriptor) {
    var isClass = target[cpoMetaObject$6] != null;
    assert$1(!isClass, 'Decorator `relatedTo` may be used with instance properties only');
    var vcClass = target.constructor;
    assert$1(vcClass.isExtensible, "Class '".concat(target.name, "' has been frozen previously. Property '").concat(key, "' can not be declared"));
    var _vcClass$Module$NS$Ut = vcClass.Module.NS.Utils,
        _ = _vcClass$Module$NS$Ut._,
        joi = _vcClass$Module$NS$Ut.joi,
        inflect = _vcClass$Module$NS$Ut.inflect;
    opts.refKey = opts.refKey || 'id';
    opts.attr = opts.attr || "".concat(key, "Id");
    opts.inverse = opts.inverse || "".concat(inflect.pluralize(inflect.camelize(vcClass.name.replace(/Record$/, ''), false)));
    opts.inverseType = opts.inverseType || null;
    opts.recordName = opts.recordName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      var _recordTypeType = flowRuntime_umd.nullable(flowRuntime_umd.string());

      var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.string());

      flowRuntime_umd.param("recordType", _recordTypeType).assert(recordType);
      var vsModuleName, vsRecordName;

      if (recordType != null) {
        var recordClass = this.findRecordByName(recordType);

        var classNames = _.filter(recordClass.parentClassNames(), function (name) {
          return /.*Record$/.test(name);
        });

        vsRecordName = classNames[1];
      } else {
        var _this$parseRecordName = this.parseRecordName(key);

        var _this$parseRecordName2 = slicedToArray(_this$parseRecordName, 2);

        vsModuleName = _this$parseRecordName2[0];
        vsRecordName = _this$parseRecordName2[1];
      }

      return _returnType2.assert(vsRecordName);
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.collectionName = opts.collectionName || flowRuntime_umd.annotate(function () {
      var recordType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      var _recordTypeType2 = flowRuntime_umd.nullable(flowRuntime_umd.string());

      var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.string());

      flowRuntime_umd.param("recordType", _recordTypeType2).assert(recordType);
      return _returnType3.assert("".concat(inflect.pluralize(opts.recordName.call(this, recordType).replace(/Record$/, '')), "Collection"));
    }, flowRuntime_umd["function"](flowRuntime_umd.param("recordType", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())));
    opts.relation = 'relatedTo';
    var newDescriptor = {
      configurable: true,
      enumerable: true,
      get: flowRuntime_umd.annotate( /*#__PURE__*/asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
        var _returnType, recordType, RelatedToCollection, embeddings, throughEmbed, ThroughCollection, ThroughRecord, inverse, relatedId;

        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$3), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$3))));
                recordType = opts.inverseType && this[opts.inverseType] || null;
                RelatedToCollection = this.collection.facade.retrieveProxy(opts.collectionName.call(this, recordType)); // NOTE: может быть ситуация, что relatedTo связь не хранится в классическом виде атрибуте рекорда, а хранение вынесено в отдельную промежуточную коллекцию по аналогии с М:М , но с добавленным uniq констрейнтом на одном поле (чтобы эмулировать 1:М связи)

                if (opts.through) {
                  _context.next = 13;
                  break;
                }

                _context.t0 = _returnType;
                _context.next = 7;
                return RelatedToCollection.takeBy(defineProperty({}, "@doc.".concat(opts.refKey), this[opts.attr]), {
                  $limit: 1
                });

              case 7:
                _context.next = 9;
                return _context.sent.first();

              case 9:
                _context.t1 = _context.sent;
                return _context.abrupt("return", _context.t0.assert.call(_context.t0, _context.t1));

              case 13:
                // NOTE: метаданные о through в случае с релейшеном к одному объекту должны быть описаны с помощью метода hasEmbed. Поэтому здесь идет обращение только к @constructor.embeddings
                embeddings = this.constructor.embeddings;
                throughEmbed = embeddings && embeddings[opts.through[0]] || undefined;
                assert$1(throughEmbed != null, "Metadata about ".concat(opts.through[0], " must be defined by `EmbeddableRecordMixin.hasEmbed` method"));
                ThroughCollection = this.collection.facade.retrieveProxy(throughEmbed.collectionName.call(this));
                ThroughRecord = this.findRecordByName(throughEmbed.recordName.call(this));
                inverse = ThroughRecord.relations[opts.through[1].by];
                _context.next = 21;
                return ThroughCollection.takeBy(defineProperty({}, "@doc.".concat(throughEmbed.inverse), this[throughEmbed.refKey]), {
                  $limit: 1
                });

              case 21:
                _context.next = 23;
                return _context.sent.first();

              case 23:
                _context.t2 = opts.through[1].by;
                relatedId = _context.sent[_context.t2];
                _context.t3 = _returnType;
                _context.next = 28;
                return RelatedToCollection.takeBy(defineProperty({}, "@doc.".concat(inverse.refKey), relatedId), {
                  $limit: 1
                });

              case 28:
                _context.next = 30;
                return _context.sent.first();

              case 30:
                _context.t4 = _context.sent;
                return _context.abrupt("return", _context.t3.assert.call(_context.t3, _context.t4));

              case 32:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      })), flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$3)))))
    };
    _optsType = flowRuntime_umd.ref(RelationConfigT$4);

    _optsType.assert(opts);

    vcClass.metaObject.addMetaData('relations', key, opts);
    vcClass.metaObject.addMetaData('instanceVariables', key, newDescriptor);
    return newDescriptor;
  };
}
flowRuntime_umd.annotate(relatedTo, flowRuntime_umd["function"](flowRuntime_umd.param("opts", flowRuntime_umd.ref(RelationOptionsT$4))));

var cpoMetaObject$7 = Symbol["for"]('~metaObject');
var cphMigrationsMap = Symbol["for"]('~migrationsMap');
function loadMigrations(Module) {
  assert$1(Module[cpoMetaObject$7] != null, 'Target for `loadMigrations` decorator must be a Class');
  var FsUtils = Module.NS.FsUtils;
  assert$1(FsUtils != null, 'Target for `loadMigrations` decorator should has FsUtilsAddon');
  var filesListSync = FsUtils.NS.Utils.filesListSync;

  var _filesListSyncType = flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd.param("_arg1", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string())));

  _filesListSyncType.assert(filesListSync);

  var vsRoot = Module.prototype.ROOT != null ? Module.prototype.ROOT : '.';
  var vsMigratonsDir = "".concat(vsRoot, "/migrations");
  var files = filesListSync(vsMigratonsDir);
  var migrationsMap = (files != null ? files : []).reduce(function (mp, i) {
    var vsPathMatch = i.match(/([\w\-\_]+)\.js$/);

    var _ref = vsPathMatch != null ? vsPathMatch : [],
        _ref2 = slicedToArray(_ref, 2),
        blackhole = _ref2[0],
        migrationName = _ref2[1];

    if (migrationName != null && migrationName !== 'BaseMigration' && !/^\./.test(i)) {
      mp[migrationName] = "".concat(vsMigratonsDir, "/").concat(migrationName.replace(/\.js/, ''));
    }

    return mp;
  }, {});
  Reflect.defineProperty(Module, cphMigrationsMap, {
    enumerable: true,
    writable: true,
    value: migrationsMap
  });
  return Module;
}

// This file is part of leanes-mapper-addon.
var cpoMetaObject$8 = Symbol["for"]('~metaObject');
function requireMigrations(acTarget) {
  assert$1(acTarget[cpoMetaObject$8] != null, 'Target for `requireMigrations` decorator must be a Class'); // TODO: needs to decide where it will be used

  acTarget.prototype.MIGRATION_NAMES.forEach(function (migrationName) {
    acTarget.prototype.Migrations[migrationName];
  });
  return acTarget;
}

var __filename$1 = '/mixins/EditableRecordMixin.js';

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
var EditableRecordMixin = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      attribute = _Module$NS.attribute;
  Module.defineMixin(__filename$1, function (BaseClass) {
    var _dec, _dec2, _dec3, _class, _class2, _init, _descriptor, _descriptor2, _descriptor3, _class3, _temp;

    var Mixin = (_dec = attribute({
      type: 'string'
    }), _dec2 = attribute({
      type: 'string'
    }), _dec3 = attribute({
      type: 'string'
    }), initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      inherits(Mixin, _BaseClass);

      var _super = _createSuper(Mixin);

      function Mixin() {
        var _this;

        classCallCheck(this, Mixin);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        initializerDefineProperty(_this, "creatorId", _descriptor, assertThisInitialized(_this));

        initializerDefineProperty(_this, "editorId", _descriptor2, assertThisInitialized(_this));

        initializerDefineProperty(_this, "removerId", _descriptor3, assertThisInitialized(_this));

        return _this;
      }

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _descriptor = applyDecoratedDescriptor(_class2.prototype, "creatorId", [_dec], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor2 = applyDecoratedDescriptor(_class2.prototype, "editorId", [_dec2], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor3 = applyDecoratedDescriptor(_class2.prototype, "removerId", [_dec3], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    })), _class2)) || _class);
    return Mixin;
  });
});

var __filename$2 = '/mixins/GenerateUuidIdMixin.js';

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var createClass = _createClass;

function _createSuper$1(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$1(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$1() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
var GenerateUuidIdMixin = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      uuid = _Module$NS.Utils.uuid;
  Module.defineMixin(__filename$2, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("generateId", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.string()))))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      inherits(Mixin, _BaseClass);

      var _super = _createSuper$1(Mixin);

      function Mixin() {
        classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      createClass(Mixin, [{
        key: "generateId",
        value: function () {
          var _generateId = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
            var _returnType;

            return regenerator.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.ref("Promise", flowRuntime_umd.string())));
                    return _context.abrupt("return", _returnType.assert(uuid.v4()));

                  case 2:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          function generateId() {
            return _generateId.apply(this, arguments);
          }

          return generateId;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), applyDecoratedDescriptor(_class2.prototype, "generateId", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "generateId"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$3 = '/mixins/HideableRecordMixin.js';

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

var superPropBase = _superPropBase;

var get = createCommonjsModule(function (module) {
function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    module.exports = _get = Reflect.get;
  } else {
    module.exports = _get = function _get(target, property, receiver) {
      var base = superPropBase(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

module.exports = _get;
});

function _createSuper$2(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$2(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
var HideableRecordMixin = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      attribute = _Module$NS.attribute,
      method = _Module$NS.method;
  Module.defineMixin(__filename$3, function (BaseClass) {
    var _dec, _dec2, _class, _class2, _init, _descriptor, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("isHidden", flowRuntime_umd.any()), flowRuntime_umd.method("beforeDelete", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("delete", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))))), _dec2 = attribute({
      type: 'boolean',
      validate: function validate() {
        return joi["boolean"]().empty(null)["default"](false);
      }
    }), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      inherits(Mixin, _BaseClass);

      var _super = _createSuper$2(Mixin);

      function Mixin() {
        var _this;

        classCallCheck(this, Mixin);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        initializerDefineProperty(_this, "isHidden", _descriptor, assertThisInitialized(_this));

        return _this;
      }

      createClass(Mixin, [{
        key: "beforeDelete",
        value: function () {
          var _beforeDelete = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
            var _get2;

            var _len2,
                args,
                _key2,
                _args = arguments;

            return regenerator.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    for (_len2 = _args.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                      args[_key2] = _args[_key2];
                    }

                    _context.next = 3;
                    return (_get2 = get(getPrototypeOf(Mixin.prototype), "beforeDelete", this)).call.apply(_get2, [this].concat(args));

                  case 3:
                    this.isHidden = true;
                    return _context.abrupt("return", args);

                  case 5:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function beforeDelete() {
            return _beforeDelete.apply(this, arguments);
          }

          return beforeDelete;
        }()
      }, {
        key: 'delete',
        value: function () {
          var _delete2 = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
            var _returnType;

            return regenerator.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    _context2.next = 3;
                    return this.isNew();

                  case 3:
                    if (!_context2.sent) {
                      _context2.next = 5;
                      break;
                    }

                    assert.fail('Document is not exist in collection');

                  case 5:
                    _context2.next = 7;
                    return this.save();

                  case 7:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function _delete() {
            return _delete2.apply(this, arguments);
          }

          return _delete;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _descriptor = applyDecoratedDescriptor(_class2.prototype, "isHidden", [_dec2], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return false;
      }
    }), applyDecoratedDescriptor(_class2.prototype, "beforeDelete", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "beforeDelete"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, 'delete', [method], Object.getOwnPropertyDescriptor(_class2.prototype, 'delete'), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$4 = '/mixins/HttpAdapterMixin.js';

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}

var arrayWithoutHoles = _arrayWithoutHoles;

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

var iterableToArray = _iterableToArray;

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var nonIterableSpread = _nonIterableSpread;

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}

var toConsumableArray = _toConsumableArray;

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var HttpRequestParamsT = flowRuntime_umd.type("HttpRequestParamsT", flowRuntime_umd.object(flowRuntime_umd.property("requestType", flowRuntime_umd.string()), flowRuntime_umd.property("recordName", flowRuntime_umd.string()), flowRuntime_umd.property("snapshot", flowRuntime_umd.ref("object"), true), flowRuntime_umd.property("id", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string()), true), flowRuntime_umd.property("query", flowRuntime_umd.ref("object"), true), flowRuntime_umd.property("isCustomReturn", flowRuntime_umd["boolean"](), true)));

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var HttpRequestHashT = flowRuntime_umd.type("HttpRequestHashT", flowRuntime_umd.exactObject(flowRuntime_umd.property("method", flowRuntime_umd.string()), flowRuntime_umd.property("url", flowRuntime_umd.string()), flowRuntime_umd.property("headers", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.string()))), flowRuntime_umd.property("data", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))));

// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
var DriverInterface = flowRuntime_umd.type("DriverInterface", function (DriverInterface) {
  var R = DriverInterface.typeParameter("R"),
      T = DriverInterface.typeParameter("T"),
      A = DriverInterface.typeParameter("A", undefined, flowRuntime_umd.array(flowRuntime_umd.nullable(T)));
  return flowRuntime_umd.object(flowRuntime_umd.property("_cleanType", flowRuntime_umd.string("adapter")), flowRuntime_umd.property("getName", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("setName", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("push", flowRuntime_umd["function"](flowRuntime_umd.param("delegate", R), flowRuntime_umd.param("aoRecord", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("remove", flowRuntime_umd["function"](flowRuntime_umd.param("delegate", R), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("take", flowRuntime_umd["function"](flowRuntime_umd.param("delegate", R), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(T))))), flowRuntime_umd.property("takeMany", flowRuntime_umd["function"](flowRuntime_umd.param("delegate", R), flowRuntime_umd.param("ids", flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", A)))), flowRuntime_umd.property("takeAll", flowRuntime_umd["function"](flowRuntime_umd.param("delegate", R), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", A)))), flowRuntime_umd.property("override", flowRuntime_umd["function"](flowRuntime_umd.param("delegate", R), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd.param("aoRecord", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("includes", flowRuntime_umd["function"](flowRuntime_umd.param("delegate", R), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())))), flowRuntime_umd.property("length", flowRuntime_umd["function"](flowRuntime_umd.param("delegate", R), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.number())))));
});

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var LegacyResponseInterface = flowRuntime_umd.type("LegacyResponseInterface", function (LegacyResponseInterface) {
  var T = LegacyResponseInterface.typeParameter("T", undefined, flowRuntime_umd.tdz(function () {
    return AxiosResponse;
  }, "AxiosResponse"));
  return flowRuntime_umd.object(flowRuntime_umd.property("body", flowRuntime_umd.nullable(flowRuntime_umd.$propertyType(T, flowRuntime_umd.string("data")))), flowRuntime_umd.property("headers", flowRuntime_umd.$propertyType(T, flowRuntime_umd.string("headers"))), flowRuntime_umd.property("status", flowRuntime_umd.$propertyType(T, flowRuntime_umd.string("status"))), flowRuntime_umd.property("message", flowRuntime_umd.$propertyType(T, flowRuntime_umd.string("statusText"))));
});

var AxiosResponse = flowRuntime_umd.type("AxiosResponse", function (AxiosResponse) {
  var T = AxiosResponse.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = AxiosResponse.typeParameter("R", undefined, T);
  return flowRuntime_umd.object(flowRuntime_umd.property("data", R), flowRuntime_umd.property("status", flowRuntime_umd.number()), flowRuntime_umd.property("statusText", flowRuntime_umd.string()), flowRuntime_umd.property("headers", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.property("config", flowRuntime_umd.ref(flowRuntime_umd.tdz(function () {
    return Config;
  }, "Config"), T, R)), flowRuntime_umd.property("request", flowRuntime_umd.nullable(flowRuntime_umd.any())));
});
var AxiosTransformer = flowRuntime_umd.type("AxiosTransformer", function (AxiosTransformer) {
  var T = AxiosTransformer.typeParameter("T");
  return flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](flowRuntime_umd.param("data", T), flowRuntime_umd.param("headers", flowRuntime_umd.ref("object"), true), flowRuntime_umd["return"](flowRuntime_umd.ref("object")))));
});
var AxiosBasicCredentials = flowRuntime_umd.type("AxiosBasicCredentials", flowRuntime_umd.object(flowRuntime_umd.property("username", flowRuntime_umd.string()), flowRuntime_umd.property("password", flowRuntime_umd.string())));
var AxiosProxyConfig = flowRuntime_umd.type("AxiosProxyConfig", flowRuntime_umd.object(flowRuntime_umd.property("host", flowRuntime_umd.string()), flowRuntime_umd.property("port", flowRuntime_umd.number()), flowRuntime_umd.property("auth", flowRuntime_umd.object(flowRuntime_umd.property("username", flowRuntime_umd.string()), flowRuntime_umd.property("password", flowRuntime_umd.string())), true), flowRuntime_umd.property("protocol", flowRuntime_umd.string(), true)));
var Method = flowRuntime_umd.type("Method", flowRuntime_umd.union(flowRuntime_umd.string("get"), flowRuntime_umd.string("GET"), flowRuntime_umd.string("delete"), flowRuntime_umd.string("DELETE"), flowRuntime_umd.string("head"), flowRuntime_umd.string("HEAD"), flowRuntime_umd.string("options"), flowRuntime_umd.string("OPTIONS"), flowRuntime_umd.string("post"), flowRuntime_umd.string("POST"), flowRuntime_umd.string("put"), flowRuntime_umd.string("PUT"), flowRuntime_umd.string("patch"), flowRuntime_umd.string("PATCH")));
var ResponseType = flowRuntime_umd.type("ResponseType", flowRuntime_umd.union(flowRuntime_umd.string("arraybuffer"), flowRuntime_umd.string("blob"), flowRuntime_umd.string("document"), flowRuntime_umd.string("json"), flowRuntime_umd.string("text"), flowRuntime_umd.string("stream")));
var RequestArgumentsT = flowRuntime_umd.type("RequestArgumentsT", function (RequestArgumentsT) {
  var T = RequestArgumentsT.typeParameter("T"),
      R = RequestArgumentsT.typeParameter("R", undefined, T);
  return flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.string(), flowRuntime_umd.nullable(flowRuntime_umd.ref(flowRuntime_umd.tdz(function () {
    return Config;
  }, "Config"), T, R)));
}); // export type AxiosPromise<T = any, R = T> = Promise<AxiosResponse<T, R>>;

var Config = flowRuntime_umd.type("Config", function (Config) {
  var T = Config.typeParameter("T"),
      R = Config.typeParameter("R", undefined, T);
  return flowRuntime_umd.object(flowRuntime_umd.property("url", flowRuntime_umd.string(), true), flowRuntime_umd.property("method", Method, true), flowRuntime_umd.property("baseURL", flowRuntime_umd.string(), true), flowRuntime_umd.property("transformRequest", flowRuntime_umd.union(flowRuntime_umd.ref(AxiosTransformer, T), flowRuntime_umd.array(flowRuntime_umd.ref(AxiosTransformer, T)), flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.number(), flowRuntime_umd.ref(AxiosTransformer, T)))), true), flowRuntime_umd.property("transformResponse", flowRuntime_umd.union(flowRuntime_umd.ref(AxiosTransformer, R), flowRuntime_umd.array(flowRuntime_umd.ref(AxiosTransformer, R)), flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.number(), flowRuntime_umd.ref(AxiosTransformer, T)))), true), flowRuntime_umd.property("headers", flowRuntime_umd.ref("object"), true), flowRuntime_umd.property("params", flowRuntime_umd.ref("object"), true), flowRuntime_umd.property("paramsSerializer", flowRuntime_umd["function"](flowRuntime_umd.param("params", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.string())), true), flowRuntime_umd.property("data", flowRuntime_umd.any(), true), flowRuntime_umd.property("body", flowRuntime_umd.any(), true), flowRuntime_umd.property("form", flowRuntime_umd.any(), true), flowRuntime_umd.property("timeout", flowRuntime_umd.number(), true), flowRuntime_umd.property("withCredentials", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("adapter", flowRuntime_umd["function"](function (_fn) {
    var T = _fn.typeParameter("T"),
        R = _fn.typeParameter("R");

    return [flowRuntime_umd.param("config", flowRuntime_umd.ref(Config, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(AxiosResponse, T, R)))];
  }), true), flowRuntime_umd.property("auth", AxiosBasicCredentials, true), flowRuntime_umd.property("responseType", ResponseType, true), flowRuntime_umd.property("xsrfCookieName", flowRuntime_umd.string(), true), flowRuntime_umd.property("xsrfHeaderName", flowRuntime_umd.string(), true), flowRuntime_umd.property("onUploadProgress", flowRuntime_umd["function"](flowRuntime_umd.param("progressEvent", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), true), flowRuntime_umd.property("onDownloadProgress", flowRuntime_umd["function"](flowRuntime_umd.param("progressEvent", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), true), flowRuntime_umd.property("maxContentLength", flowRuntime_umd.number(), true), flowRuntime_umd.property("validateStatus", flowRuntime_umd["function"](flowRuntime_umd.param("status", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), true), flowRuntime_umd.property("followRedirect", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("maxRedirects", flowRuntime_umd.number(), true), flowRuntime_umd.property("socketPath", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["null"]()), true), flowRuntime_umd.property("httpAgent", flowRuntime_umd.mixed(), true), flowRuntime_umd.property("httpsAgent", flowRuntime_umd.mixed(), true), flowRuntime_umd.property("proxy", flowRuntime_umd.union(AxiosProxyConfig, flowRuntime_umd["boolean"](false)), true), flowRuntime_umd.property("cancelToken", flowRuntime_umd.tdz(function () {
    return CancelToken;
  }, "CancelToken"), true));
});
var LegacyRequestInterface = flowRuntime_umd.type("LegacyRequestInterface", flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](function (_fn2) {
  var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn2.typeParameter("R", undefined, T),
      L = _fn2.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("method", flowRuntime_umd.string()), flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("head", flowRuntime_umd["function"](function (_fn3) {
  var T = _fn3.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn3.typeParameter("R", undefined, T),
      L = _fn3.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("options", flowRuntime_umd["function"](function (_fn4) {
  var T = _fn4.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn4.typeParameter("R", undefined, T),
      L = _fn4.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("get", flowRuntime_umd["function"](function (_fn5) {
  var T = _fn5.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn5.typeParameter("R", undefined, T),
      L = _fn5.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("post", flowRuntime_umd["function"](function (_fn6) {
  var T = _fn6.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn6.typeParameter("R", undefined, T),
      L = _fn6.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("put", flowRuntime_umd["function"](function (_fn7) {
  var T = _fn7.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn7.typeParameter("R", undefined, T),
      L = _fn7.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("patch", flowRuntime_umd["function"](function (_fn8) {
  var T = _fn8.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn8.typeParameter("R", undefined, T),
      L = _fn8.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
})), flowRuntime_umd.property("delete", flowRuntime_umd["function"](function (_fn9) {
  var T = _fn9.typeParameter("T", undefined, flowRuntime_umd.any()),
      R = _fn9.typeParameter("R", undefined, T),
      L = _fn9.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface, flowRuntime_umd.ref(AxiosResponse, T, R)));

  return [flowRuntime_umd.param("url", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref(Config, T, R))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
}))));

var Cancel = flowRuntime_umd.type("Cancel", flowRuntime_umd.object(flowRuntime_umd.property("message", flowRuntime_umd.string())));
var Canceler = flowRuntime_umd.type("Canceler", flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](flowRuntime_umd.param("message", flowRuntime_umd.string(), true), flowRuntime_umd["return"](flowRuntime_umd["void"]())))));
var CancelTokenStatic = flowRuntime_umd.type("CancelTokenStatic", flowRuntime_umd.object(flowRuntime_umd.property("new", flowRuntime_umd["function"](flowRuntime_umd.param("executor", flowRuntime_umd["function"](flowRuntime_umd.param("cancel", Canceler), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd["return"](flowRuntime_umd.tdz(function () {
  return CancelToken;
}, "CancelToken")))), flowRuntime_umd.property("source", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.tdz(function () {
  return CancelTokenSource;
}, "CancelTokenSource"))))));
var CancelToken = flowRuntime_umd.type("CancelToken", flowRuntime_umd.object(flowRuntime_umd.property("promise", flowRuntime_umd.ref("Promise", Cancel)), flowRuntime_umd.property("reason", Cancel, true), flowRuntime_umd.property("throwIfRequested", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd["void"]())))));
var CancelTokenSource = flowRuntime_umd.type("CancelTokenSource", flowRuntime_umd.object(flowRuntime_umd.property("token", CancelToken), flowRuntime_umd.property("cancel", Canceler)));
var AxiosInterceptorManager = flowRuntime_umd.type("AxiosInterceptorManager", function (AxiosInterceptorManager) {
  var V = AxiosInterceptorManager.typeParameter("V");
  return flowRuntime_umd.object(flowRuntime_umd.property("use", flowRuntime_umd["function"](flowRuntime_umd.param("onFulfilled", flowRuntime_umd["function"](flowRuntime_umd.param("value", V), flowRuntime_umd["return"](flowRuntime_umd.union(V, flowRuntime_umd.ref("Promise", V)))), true), flowRuntime_umd.param("onRejected", flowRuntime_umd["function"](flowRuntime_umd.param("error", flowRuntime_umd.mixed()), flowRuntime_umd["return"](flowRuntime_umd.mixed())), true), flowRuntime_umd["return"](flowRuntime_umd.number()))), flowRuntime_umd.property("eject", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))));
});
var RequestT = flowRuntime_umd.type("RequestT", flowRuntime_umd.spread(LegacyRequestInterface, flowRuntime_umd.object(flowRuntime_umd.property("defaults", flowRuntime_umd.intersection(flowRuntime_umd.object(flowRuntime_umd.property("headers", flowRuntime_umd.ref("object"))), flowRuntime_umd.ref(Config, flowRuntime_umd.existential(), flowRuntime_umd.existential()))), flowRuntime_umd.property("interceptors", flowRuntime_umd.object(flowRuntime_umd.property("request", flowRuntime_umd.ref(AxiosInterceptorManager, flowRuntime_umd.ref(Config, flowRuntime_umd.existential(), flowRuntime_umd.existential()))), flowRuntime_umd.property("response", flowRuntime_umd.ref(AxiosInterceptorManager, flowRuntime_umd.ref(AxiosResponse, flowRuntime_umd.mixed()))))), flowRuntime_umd.property("CancelToken", CancelTokenStatic), flowRuntime_umd.property("create", flowRuntime_umd["function"](flowRuntime_umd.param("config", flowRuntime_umd.ref(Config, flowRuntime_umd.existential(), flowRuntime_umd.existential())), flowRuntime_umd["return"](LegacyRequestInterface))), flowRuntime_umd.property("all", flowRuntime_umd["function"](function (_fn10) {
  var T = _fn10.typeParameter("T");

  return [flowRuntime_umd.param("values", flowRuntime_umd.array(flowRuntime_umd.union(T, flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(T)))];
})), flowRuntime_umd.property("spread", flowRuntime_umd["function"](function (_fn11) {
  var T = _fn11.typeParameter("T"),
      R = _fn11.typeParameter("R");

  return [flowRuntime_umd.param("callback", flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.array(T)), flowRuntime_umd["return"](R))), flowRuntime_umd["return"](flowRuntime_umd["function"](flowRuntime_umd.param("array", flowRuntime_umd.array(T)), flowRuntime_umd["return"](R)))];
})))));
 // export type RequestT = RequestT;

function _createSuper$3(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$3(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$3() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var RequestArgumentsT$1 = flowRuntime_umd.tdz(function () {
  return RequestArgumentsT;
});
var LegacyResponseInterface$1 = flowRuntime_umd.tdz(function () {
  return LegacyResponseInterface;
});
var AxiosResponse$1 = flowRuntime_umd.tdz(function () {
  return AxiosResponse;
});
var DriverInterface$1 = flowRuntime_umd.tdz(function () {
  return DriverInterface;
});
var HttpRequestHashT$1 = flowRuntime_umd.tdz(function () {
  return HttpRequestHashT;
});
var HttpRequestParamsT$1 = flowRuntime_umd.tdz(function () {
  return HttpRequestParamsT;
});
var HttpAdapterMixin = (function (Module) {
  var _Module$NS = Module.NS,
      assert = _Module$NS.assert,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect,
      request = _Module$NS$Utils.request;
  Module.defineMixin(__filename$4, function (BaseClass) {
    var _t$TypeParametersSymb;

    var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _init, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _class3, _temp;

    var _MixinTypeParametersSymbol = Symbol("MixinTypeParameters");

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", function (Mixin) {
      var R = Mixin.typeParameter("R", undefined, flowRuntime_umd.Class(flowRuntime_umd.existential()));
      var T = Mixin.typeParameter("T", undefined, flowRuntime_umd.ref("object"));
      return [flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_recordMultipleName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_recordSingleName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("headers", flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.string())))), flowRuntime_umd.property("host", flowRuntime_umd.string()), flowRuntime_umd.property("namespace", flowRuntime_umd.string()), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("recordMultipleName", flowRuntime_umd.param("delegateName", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("recordSingleName", flowRuntime_umd.param("delegateName", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("push", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd.param("snapshot", flowRuntime_umd.flowInto(T)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T))), flowRuntime_umd.method("remove", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("take", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(T)))), flowRuntime_umd.method("takeMany", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd.param("ids", flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(T)))), flowRuntime_umd.method("takeAll", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(T)))), flowRuntime_umd.method("override", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd.param("snapshot", flowRuntime_umd.flowInto(T)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T))), flowRuntime_umd.method("includes", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("length", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.number()))), flowRuntime_umd.method("headersForRequest", flowRuntime_umd.param("params", flowRuntime_umd.nullable(flowRuntime_umd.ref(HttpRequestParamsT$1))), flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.string())))), flowRuntime_umd.method("methodForRequest", flowRuntime_umd.param("params", flowRuntime_umd.ref(HttpRequestParamsT$1)), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("dataForRequest", flowRuntime_umd.param("params", flowRuntime_umd.ref(HttpRequestParamsT$1)), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.method("urlForRequest", flowRuntime_umd.param("params", flowRuntime_umd.ref(HttpRequestParamsT$1)), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("pathForType", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlPrefix", flowRuntime_umd.param("path", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("parentURL", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("makeURL", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("query", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("id", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string()))), flowRuntime_umd.param("isQueryable", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForTakeAll", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("query", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForTake", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForPush", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("snapshot", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForRemove", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("urlForOverride", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("snapshot", flowRuntime_umd.ref("object")), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("buildURL", flowRuntime_umd.param("recordName", flowRuntime_umd.string()), flowRuntime_umd.param("snapshot", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("id", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("requestType", flowRuntime_umd.string()), flowRuntime_umd.param("query", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("requestFor", flowRuntime_umd.param("params", flowRuntime_umd.ref(HttpRequestParamsT$1)), flowRuntime_umd["return"](flowRuntime_umd.ref(HttpRequestHashT$1))), flowRuntime_umd.method("sendRequest", function (_fn) {
        var T = _fn.typeParameter("T", undefined, flowRuntime_umd.any());

        var R = _fn.typeParameter("R", undefined, T);

        var L = _fn.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

        return [flowRuntime_umd.rest("args", flowRuntime_umd.ref(RequestArgumentsT$1, T, R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
      }), flowRuntime_umd.method("requestHashToArguments", function (_fn2) {
        var T = _fn2.typeParameter("T", undefined, flowRuntime_umd.any());

        var R = _fn2.typeParameter("R", undefined, T);

        return [flowRuntime_umd.param("hash", flowRuntime_umd.ref(HttpRequestHashT$1)), flowRuntime_umd["return"](flowRuntime_umd.ref(RequestArgumentsT$1, T, R))];
      }), flowRuntime_umd.method("makeRequest", function (_fn3) {
        var T = _fn3.typeParameter("T", undefined, flowRuntime_umd.any());

        var R = _fn3.typeParameter("R", undefined, T);

        var L = _fn3.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));

        return [flowRuntime_umd.param("requestObj", flowRuntime_umd.ref(HttpRequestHashT$1)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", L))];
      })];
    })), _dec2 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.string())))), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec6 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec(_class = initializeMixin(_class = (_class2 = (_temp = (_t$TypeParametersSymb = flowRuntime_umd.TypeParametersSymbol, _class3 = /*#__PURE__*/function (_BaseClass) {
      inherits(Mixin, _BaseClass);

      var _super = _createSuper$3(Mixin);

      function Mixin() {
        var _this;

        classCallCheck(this, Mixin);

        var _typeParameters = {
          R: flowRuntime_umd.typeParameter("R"),
          T: flowRuntime_umd.typeParameter("T")
        };

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        initializerDefineProperty(_this, "_recordMultipleName", _descriptor, assertThisInitialized(_this));

        initializerDefineProperty(_this, "_recordSingleName", _descriptor2, assertThisInitialized(_this));

        initializerDefineProperty(_this, "headers", _descriptor3, assertThisInitialized(_this));

        initializerDefineProperty(_this, "host", _descriptor4, assertThisInitialized(_this));

        initializerDefineProperty(_this, "namespace", _descriptor5, assertThisInitialized(_this));

        _this[_MixinTypeParametersSymbol] = _typeParameters;
        flowRuntime_umd.ref(DriverInterface$1, _this[_MixinTypeParametersSymbol].R, _this[_MixinTypeParametersSymbol].T).assert(assertThisInitialized(_this));
        return _this;
      }

      createClass(Mixin, [{
        key: "recordMultipleName",
        value: function recordMultipleName(delegateName) {
          var _returnType11 = flowRuntime_umd["return"](flowRuntime_umd.string());

          if (this._recordMultipleName == null) {
            this._recordMultipleName = inflect.pluralize(this.recordSingleName(delegateName));
          }

          return _returnType11.assert(this._recordMultipleName);
        }
      }, {
        key: "recordSingleName",
        value: function recordSingleName(delegateName) {
          var _returnType12 = flowRuntime_umd["return"](flowRuntime_umd.string());

          if (this._recordSingleName == null) {
            this._recordSingleName = inflect.underscore(delegateName.replace(/Record$/, ''));
          }

          return _returnType12.assert(this._recordSingleName);
        }
      }, {
        key: "push",
        value: function () {
          var _push = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(acRecord, snapshot) {
            var _acRecordType, _snapshotType, _returnType, params, requestObj, res, body;

            return regenerator.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _acRecordType = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].R);
                    _snapshotType = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].T);
                    _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(this[_MixinTypeParametersSymbol].T, flowRuntime_umd.ref("Promise", this[_MixinTypeParametersSymbol].T)));
                    flowRuntime_umd.param("acRecord", _acRecordType).assert(acRecord);
                    flowRuntime_umd.param("snapshot", _snapshotType).assert(snapshot);
                    params = {};
                    params.requestType = 'push';
                    params.recordName = acRecord.name;
                    params.snapshot = defineProperty({}, "".concat(this.recordSingleName(acRecord.name)), snapshot);
                    requestObj = this.requestFor(params);
                    _context.next = 12;
                    return this.makeRequest(requestObj);

                  case 12:
                    res = _context.sent;
                    assert(res.status < 400, "Request failed with status ".concat(res.status, " ").concat(res.message));
                    body = res.body;

                    if (!(body != null && body !== '')) {
                      _context.next = 20;
                      break;
                    }

                    if (_.isString(body)) {
                      body = JSON.parse(body);
                    }

                    return _context.abrupt("return", _returnType.assert(body[this.recordSingleName(acRecord.name)]));

                  case 20:
                    assert.fail("Record payload has not existed in response body.");

                  case 21:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function push(_x, _x2) {
            return _push.apply(this, arguments);
          }

          return push;
        }()
      }, {
        key: "remove",
        value: function () {
          var _remove = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(acRecord, id) {
            var _acRecordType2, _idType, _returnType2, params, requestObj, res;

            return regenerator.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _acRecordType2 = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].R);
                    _idType = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number());
                    _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("acRecord", _acRecordType2).assert(acRecord);
                    flowRuntime_umd.param("id", _idType).assert(id);
                    params = {};
                    params.requestType = 'remove';
                    params.recordName = acRecord.name;
                    params.id = id;
                    requestObj = this.requestFor(params);
                    _context2.next = 12;
                    return this.makeRequest(requestObj);

                  case 12:
                    res = _context2.sent;
                    assert(res.status < 400 || res.status == 404, "Request failed with status ".concat(res.status, " ").concat(res.message));

                  case 14:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function remove(_x3, _x4) {
            return _remove.apply(this, arguments);
          }

          return remove;
        }()
      }, {
        key: "take",
        value: function () {
          var _take = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(acRecord, id) {
            var _acRecordType3, _idType2, _returnType3, params, requestObj, res, body;

            return regenerator.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _acRecordType3 = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].R);
                    _idType2 = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number());
                    _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(this[_MixinTypeParametersSymbol].T), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(this[_MixinTypeParametersSymbol].T))));
                    flowRuntime_umd.param("acRecord", _acRecordType3).assert(acRecord);
                    flowRuntime_umd.param("id", _idType2).assert(id);
                    params = {};
                    params.requestType = 'take';
                    params.recordName = acRecord.name;
                    params.id = id;
                    requestObj = this.requestFor(params);
                    _context3.next = 12;
                    return this.makeRequest(requestObj);

                  case 12:
                    res = _context3.sent;
                    assert(res.status < 400 || res.status == 404, "Request failed with status ".concat(res.status, " ").concat(res.message));

                    if (!(res.status == 404)) {
                      _context3.next = 16;
                      break;
                    }

                    return _context3.abrupt("return", _returnType3.assert(null));

                  case 16:
                    body = res.body;

                    if (!(body != null && body !== '')) {
                      _context3.next = 22;
                      break;
                    }

                    if (_.isString(body)) {
                      body = JSON.parse(body);
                    }

                    return _context3.abrupt("return", _returnType3.assert(body[this.recordSingleName(acRecord.name)]));

                  case 22:
                    assert.fail("Record payload has not existed in response body.");

                  case 23:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function take(_x5, _x6) {
            return _take.apply(this, arguments);
          }

          return take;
        }()
      }, {
        key: "takeMany",
        value: function () {
          var _takeMany = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(acRecord, ids) {
            var _this2 = this;

            var _acRecordType4, _idsType, _returnType4;

            return regenerator.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _acRecordType4 = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].R);
                    _idsType = flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()));
                    _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.array(this[_MixinTypeParametersSymbol].T), flowRuntime_umd.ref("Promise", flowRuntime_umd.array(this[_MixinTypeParametersSymbol].T))));
                    flowRuntime_umd.param("acRecord", _acRecordType4).assert(acRecord);
                    flowRuntime_umd.param("ids", _idsType).assert(ids);
                    _context4.t0 = _returnType4;
                    _context4.next = 8;
                    return Promise.all(ids.map(function (id) {
                      return _this2.take(acRecord, id);
                    }));

                  case 8:
                    _context4.t1 = _context4.sent;
                    return _context4.abrupt("return", _context4.t0.assert.call(_context4.t0, _context4.t1));

                  case 10:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));

          function takeMany(_x7, _x8) {
            return _takeMany.apply(this, arguments);
          }

          return takeMany;
        }()
      }, {
        key: "takeAll",
        value: function () {
          var _takeAll = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5(acRecord) {
            var _acRecordType5, _returnType5, params, requestObj, res, body;

            return regenerator.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _acRecordType5 = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].R);
                    _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.array(this[_MixinTypeParametersSymbol].T), flowRuntime_umd.ref("Promise", flowRuntime_umd.array(this[_MixinTypeParametersSymbol].T))));
                    flowRuntime_umd.param("acRecord", _acRecordType5).assert(acRecord);
                    params = {};
                    params.requestType = 'takeAll';
                    params.recordName = acRecord.name;
                    requestObj = this.requestFor(params);
                    _context5.next = 9;
                    return this.makeRequest(requestObj);

                  case 9:
                    res = _context5.sent;
                    assert(res.status < 400, "Request failed with status ".concat(res.status, " ").concat(res.message));
                    body = res.body;

                    if (!(body != null && body !== '')) {
                      _context5.next = 17;
                      break;
                    }

                    if (_.isString(body)) {
                      body = JSON.parse(body);
                    }

                    return _context5.abrupt("return", _returnType5.assert(body[this.recordMultipleName(acRecord.name)]));

                  case 17:
                    assert.fail("Record payload has not existed in response body.");

                  case 18:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));

          function takeAll(_x9) {
            return _takeAll.apply(this, arguments);
          }

          return takeAll;
        }()
      }, {
        key: "override",
        value: function () {
          var _override = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee6(acRecord, id, snapshot) {
            var _acRecordType6, _idType3, _snapshotType2, _returnType6, params, requestObj, res, body;

            return regenerator.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    _acRecordType6 = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].R);
                    _idType3 = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number());
                    _snapshotType2 = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].T);
                    _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.union(this[_MixinTypeParametersSymbol].T, flowRuntime_umd.ref("Promise", this[_MixinTypeParametersSymbol].T)));
                    flowRuntime_umd.param("acRecord", _acRecordType6).assert(acRecord);
                    flowRuntime_umd.param("id", _idType3).assert(id);
                    flowRuntime_umd.param("snapshot", _snapshotType2).assert(snapshot);
                    params = {};
                    params.requestType = 'override';
                    params.recordName = acRecord.name;
                    params.snapshot = defineProperty({}, "".concat(this.recordSingleName(acRecord.name)), snapshot);
                    params.id = id;
                    requestObj = this.requestFor(params);
                    _context6.next = 15;
                    return this.makeRequest(requestObj);

                  case 15:
                    res = _context6.sent;
                    assert(res.status < 400, "Request failed with status ".concat(res.status, " ").concat(res.message));
                    body = res.body;

                    if (!(body != null && body !== '')) {
                      _context6.next = 23;
                      break;
                    }

                    if (_.isString(body)) {
                      body = JSON.parse(body);
                    }

                    return _context6.abrupt("return", _returnType6.assert(body[this.recordSingleName(acRecord.name)]));

                  case 23:
                    assert.fail("Record payload has not existed in response body.");

                  case 24:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          function override(_x10, _x11, _x12) {
            return _override.apply(this, arguments);
          }

          return override;
        }()
      }, {
        key: "includes",
        value: function () {
          var _includes = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee7(acRecord, id) {
            var _acRecordType7, _idType4, _returnType7, record;

            return regenerator.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    _acRecordType7 = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].R);
                    _idType4 = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number());
                    _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())));
                    flowRuntime_umd.param("acRecord", _acRecordType7).assert(acRecord);
                    flowRuntime_umd.param("id", _idType4).assert(id);
                    _context7.next = 7;
                    return this.take(acRecord, id);

                  case 7:
                    record = _context7.sent;
                    return _context7.abrupt("return", _returnType7.assert(record != null));

                  case 9:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));

          function includes(_x13, _x14) {
            return _includes.apply(this, arguments);
          }

          return includes;
        }()
      }, {
        key: "length",
        value: function () {
          var _length = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee8(acRecord) {
            var _acRecordType8, _returnType8, items;

            return regenerator.wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    _acRecordType8 = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].R);
                    _returnType8 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.ref("Promise", flowRuntime_umd.number())));
                    flowRuntime_umd.param("acRecord", _acRecordType8).assert(acRecord);
                    _context8.next = 5;
                    return this.takeAll(acRecord);

                  case 5:
                    items = _context8.sent;
                    return _context8.abrupt("return", _returnType8.assert(items.length));

                  case 7:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));

          function length(_x15) {
            return _length.apply(this, arguments);
          }

          return length;
        }()
      }, {
        key: "headersForRequest",
        value: function headersForRequest() {
          var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          var _paramsType = flowRuntime_umd.nullable(flowRuntime_umd.ref(HttpRequestParamsT$1));

          var _returnType13 = flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.string())));

          flowRuntime_umd.param("params", _paramsType).assert(params);
          var headers = this.headers || {};
          headers['Accept'] = 'application/json';
          return _returnType13.assert(headers);
        }
      }, {
        key: "methodForRequest",
        value: function methodForRequest(params) {
          var _paramsType2 = flowRuntime_umd.ref(HttpRequestParamsT$1);

          var _returnType14 = flowRuntime_umd["return"](flowRuntime_umd.string());

          flowRuntime_umd.param("params", _paramsType2).assert(params);
          var requestType = params.requestType;

          switch (requestType) {
            case 'takeAll':
              return _returnType14.assert('GET');

            case 'take':
              return _returnType14.assert('GET');

            case 'push':
              return _returnType14.assert('POST');

            case 'override':
              return _returnType14.assert('PUT');

            case 'remove':
              return _returnType14.assert('DELETE');

            default:
              return _returnType14.assert('GET');
          }
        }
      }, {
        key: "dataForRequest",
        value: function dataForRequest(params) {
          var _paramsType3 = flowRuntime_umd.ref(HttpRequestParamsT$1);

          var _returnType15 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")));

          flowRuntime_umd.param("params", _paramsType3).assert(params);
          var recordName = params.recordName,
              snapshot = params.snapshot,
              requestType = params.requestType,
              query = params.query;

          if (snapshot != null && (requestType === 'push' || requestType === 'override')) {
            return _returnType15.assert(snapshot);
          }
        }
      }, {
        key: "urlForRequest",
        value: function urlForRequest(params) {
          var _paramsType4 = flowRuntime_umd.ref(HttpRequestParamsT$1);

          var _returnType16 = flowRuntime_umd["return"](flowRuntime_umd.string());

          flowRuntime_umd.param("params", _paramsType4).assert(params);
          var recordName = params.recordName,
              snapshot = params.snapshot,
              id = params.id,
              requestType = params.requestType,
              query = params.query;
          return _returnType16.assert(this.buildURL(recordName, snapshot, id, requestType, query));
        }
      }, {
        key: "pathForType",
        value: function pathForType(recordName) {
          var _recordNameType = flowRuntime_umd.string();

          var _returnType17 = flowRuntime_umd["return"](flowRuntime_umd.string());

          flowRuntime_umd.param("recordName", _recordNameType).assert(recordName);
          return _returnType17.assert(inflect.pluralize(inflect.underscore(recordName.replace(/Record$/, ''))));
        }
      }, {
        key: "urlPrefix",
        value: function urlPrefix(path, parentURL) {
          var _pathType = flowRuntime_umd.nullable(flowRuntime_umd.string());

          var _parentURLType = flowRuntime_umd.nullable(flowRuntime_umd.string());

          var _returnType18 = flowRuntime_umd["return"](flowRuntime_umd.string());

          flowRuntime_umd.param("path", _pathType).assert(path);
          flowRuntime_umd.param("parentURL", _parentURLType).assert(parentURL);

          if (!this.host || this.host === '/') {
            this.host = '';
          }

          if (path) {
            // Protocol relative url
            if (/^\/\//.test(path) || /http(s)?:\/\//.test(path)) {
              // Do nothing, the full @host is already included.
              return _returnType18.assert(path); // Absolute path
            } else if (path.charAt(0) === '/') {
              return _returnType18.assert("".concat(this.host).concat(path));
            } else {
              // Relative path
              return _returnType18.assert("".concat(parentURL, "/").concat(path));
            }
          } // No path provided


          var url = [];

          if (this.host) {
            url.push(this.host);
          }

          if (this.namespace) {
            url.push(this.namespace);
          }

          return _returnType18.assert(url.join('/'));
        }
      }, {
        key: "makeURL",
        value: function makeURL(recordName, query, id, isQueryable) {
          var _recordNameType2 = flowRuntime_umd.string();

          var _queryType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

          var _idType5 = flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string()));

          var _isQueryableType = flowRuntime_umd.nullable(flowRuntime_umd["boolean"]());

          var _returnType19 = flowRuntime_umd["return"](flowRuntime_umd.string());

          flowRuntime_umd.param("recordName", _recordNameType2).assert(recordName);
          flowRuntime_umd.param("query", _queryType).assert(query);
          flowRuntime_umd.param("id", _idType5).assert(id);
          flowRuntime_umd.param("isQueryable", _isQueryableType).assert(isQueryable);
          var url = [];
          var prefix = this.urlPrefix();

          if (recordName) {
            var path = this.pathForType(recordName);

            if (path) {
              url.push(path);
            }
          }

          if (prefix) {
            url.unshift(prefix);
          }

          if (id != null) {
            url.push(id);
          }

          var vsUrl = url.join('/');

          if (!this.host && vsUrl && vsUrl.charAt(0) !== '/') {
            vsUrl = '/' + vsUrl;
          }

          return _returnType19.assert(vsUrl);
        }
      }, {
        key: "urlForTakeAll",
        value: function urlForTakeAll(recordName, query) {
          var _recordNameType3 = flowRuntime_umd.string();

          var _queryType2 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

          var _returnType20 = flowRuntime_umd["return"](flowRuntime_umd.string());

          flowRuntime_umd.param("recordName", _recordNameType3).assert(recordName);
          flowRuntime_umd.param("query", _queryType2).assert(query);
          return _returnType20.assert(this.makeURL(recordName, query, null, false));
        }
      }, {
        key: "urlForTake",
        value: function urlForTake(recordName, id) {
          var _recordNameType4 = flowRuntime_umd.string();

          var _idType6 = flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string());

          var _returnType21 = flowRuntime_umd["return"](flowRuntime_umd.string());

          flowRuntime_umd.param("recordName", _recordNameType4).assert(recordName);
          flowRuntime_umd.param("id", _idType6).assert(id);
          return _returnType21.assert(this.makeURL(recordName, null, id, false));
        }
      }, {
        key: "urlForPush",
        value: function urlForPush(recordName, snapshot) {
          var _recordNameType5 = flowRuntime_umd.string();

          var _snapshotType3 = flowRuntime_umd.ref("object");

          var _returnType22 = flowRuntime_umd["return"](flowRuntime_umd.string());

          flowRuntime_umd.param("recordName", _recordNameType5).assert(recordName);
          flowRuntime_umd.param("snapshot", _snapshotType3).assert(snapshot);
          return _returnType22.assert(this.makeURL(recordName, null, null, false));
        }
      }, {
        key: "urlForRemove",
        value: function urlForRemove(recordName, id) {
          var _recordNameType6 = flowRuntime_umd.string();

          var _idType7 = flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string());

          var _returnType23 = flowRuntime_umd["return"](flowRuntime_umd.string());

          flowRuntime_umd.param("recordName", _recordNameType6).assert(recordName);
          flowRuntime_umd.param("id", _idType7).assert(id);
          return _returnType23.assert(this.makeURL(recordName, null, id, false));
        }
      }, {
        key: "urlForOverride",
        value: function urlForOverride(recordName, snapshot, id) {
          var _recordNameType7 = flowRuntime_umd.string();

          var _snapshotType4 = flowRuntime_umd.ref("object");

          var _idType8 = flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.string());

          var _returnType24 = flowRuntime_umd["return"](flowRuntime_umd.string());

          flowRuntime_umd.param("recordName", _recordNameType7).assert(recordName);
          flowRuntime_umd.param("snapshot", _snapshotType4).assert(snapshot);
          flowRuntime_umd.param("id", _idType8).assert(id);
          return _returnType24.assert(this.makeURL(recordName, null, id, false));
        }
      }, {
        key: "buildURL",
        value: function buildURL(recordName, snapshot, id, requestType, query) {
          var _recordNameType8 = flowRuntime_umd.string();

          var _snapshotType5 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

          var _idType9 = flowRuntime_umd.nullable(flowRuntime_umd.string());

          var _requestTypeType = flowRuntime_umd.string();

          var _queryType3 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

          var _returnType25 = flowRuntime_umd["return"](flowRuntime_umd.string());

          flowRuntime_umd.param("recordName", _recordNameType8).assert(recordName);
          flowRuntime_umd.param("snapshot", _snapshotType5).assert(snapshot);
          flowRuntime_umd.param("id", _idType9).assert(id);
          flowRuntime_umd.param("requestType", _requestTypeType).assert(requestType);
          flowRuntime_umd.param("query", _queryType3).assert(query);

          switch (requestType) {
            case 'takeAll':
              return _returnType25.assert(this.urlForTakeAll(recordName, query));

            case 'take':
              return _returnType25.assert(this.urlForTake(recordName, id));

            case 'push':
              return _returnType25.assert(this.urlForPush(recordName, snapshot));

            case 'remove':
              return _returnType25.assert(this.urlForRemove(recordName, id));

            case 'override':
              return _returnType25.assert(this.urlForOverride(recordName, snapshot, id));

            default:
              var vsMethod = "urlFor".concat(inflect.camelize(requestType));
              return _returnType25.assert(typeof this[vsMethod] === "function" ? this[vsMethod](recordName, query, snapshot, id) : undefined);
          }
        }
      }, {
        key: "requestFor",
        value: function requestFor(params) {
          var _paramsType5 = flowRuntime_umd.ref(HttpRequestParamsT$1);

          var _returnType26 = flowRuntime_umd["return"](flowRuntime_umd.ref(HttpRequestHashT$1));

          flowRuntime_umd.param("params", _paramsType5).assert(params);
          var method = this.methodForRequest(params);
          var url = this.urlForRequest(params);
          var headers = this.headersForRequest(params);
          var data = this.dataForRequest(params);
          return _returnType26.assert({
            method: method,
            url: url,
            headers: headers,
            data: data
          });
        }
      }, {
        key: "sendRequest",
        value: function () {
          var _sendRequest = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee9() {
            var T,
                R,
                L,
                _argsType,
                _returnType9,
                _len2,
                args,
                _key2,
                method,
                url,
                options,
                _args9 = arguments;

            return regenerator.wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.any());
                    R = flowRuntime_umd.typeParameter("R", undefined, T);
                    L = flowRuntime_umd.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));
                    _argsType = flowRuntime_umd.ref(RequestArgumentsT$1, T, R);
                    _returnType9 = flowRuntime_umd["return"](flowRuntime_umd.union(L, flowRuntime_umd.ref("Promise", L)));

                    for (_len2 = _args9.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                      args[_key2] = _args9[_key2];
                    }

                    flowRuntime_umd.rest("args", _argsType).assert(args);
                    method = args[0], url = args[1], options = args[2];
                    _context9.t0 = _returnType9;
                    _context9.next = 11;
                    return request(method, url, options);

                  case 11:
                    _context9.t1 = _context9.sent;
                    return _context9.abrupt("return", _context9.t0.assert.call(_context9.t0, _context9.t1));

                  case 13:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9);
          }));

          function sendRequest() {
            return _sendRequest.apply(this, arguments);
          }

          return sendRequest;
        }()
      }, {
        key: "requestHashToArguments",
        value: function requestHashToArguments(hash) {
          var T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.any());
          var R = flowRuntime_umd.typeParameter("R", undefined, T);

          var _hashType = flowRuntime_umd.ref(HttpRequestHashT$1);

          var _returnType27 = flowRuntime_umd["return"](flowRuntime_umd.ref(RequestArgumentsT$1, T, R));

          flowRuntime_umd.param("hash", _hashType).assert(hash);
          var method = hash.method,
              url = hash.url,
              headers = hash.headers,
              data = hash.data;
          var options = {
            responseType: 'json',
            headers: headers
          };

          if (data != null) {
            options.body = data;
          }

          return _returnType27.assert([method, url, options]);
        }
      }, {
        key: "makeRequest",
        value: function () {
          var _makeRequest = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee10(requestObj) {
            var T, R, L, _requestObjType, _returnType10, _Module$NS$Pipes$NS$L, SEND_TO_LOG, LEVELS, DEBUG, hash;

            return regenerator.wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    T = flowRuntime_umd.typeParameter("T", undefined, flowRuntime_umd.any());
                    R = flowRuntime_umd.typeParameter("R", undefined, T);
                    L = flowRuntime_umd.typeParameter("L", undefined, flowRuntime_umd.ref(LegacyResponseInterface$1, flowRuntime_umd.ref(AxiosResponse$1, T, R)));
                    _requestObjType = flowRuntime_umd.ref(HttpRequestHashT$1);
                    _returnType10 = flowRuntime_umd["return"](flowRuntime_umd.union(L, flowRuntime_umd.ref("Promise", L)));
                    flowRuntime_umd.param("requestObj", _requestObjType).assert(requestObj);
                    // result of requestFor
                    _Module$NS$Pipes$NS$L = Module.NS.Pipes.NS.LogMessage, SEND_TO_LOG = _Module$NS$Pipes$NS$L.SEND_TO_LOG, LEVELS = _Module$NS$Pipes$NS$L.LEVELS, DEBUG = _Module$NS$Pipes$NS$L.DEBUG;
                    hash = this.requestHashToArguments(requestObj);
                    this.send(SEND_TO_LOG, "HttpCollectionMixin::makeRequest hash ".concat(JSON.stringify(hash)), LEVELS[DEBUG]);
                    _context10.t0 = _returnType10;
                    _context10.next = 12;
                    return this.sendRequest.apply(this, toConsumableArray(hash));

                  case 12:
                    _context10.t1 = _context10.sent;
                    return _context10.abrupt("return", _context10.t0.assert.call(_context10.t0, _context10.t1));

                  case 14:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10, this);
          }));

          function makeRequest(_x16) {
            return _makeRequest.apply(this, arguments);
          }

          return makeRequest;
        }()
      }]);

      return Mixin;
    }(BaseClass)), _class3[_t$TypeParametersSymb] = _MixinTypeParametersSymbol, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _descriptor = applyDecoratedDescriptor(_class2.prototype, "_recordMultipleName", [_dec2, property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor2 = applyDecoratedDescriptor(_class2.prototype, "_recordSingleName", [_dec3, property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor3 = applyDecoratedDescriptor(_class2.prototype, "headers", [_dec4, property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor4 = applyDecoratedDescriptor(_class2.prototype, "host", [_dec5, property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return 'http://localhost';
      }
    }), _descriptor5 = applyDecoratedDescriptor(_class2.prototype, "namespace", [_dec6, property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return '';
      }
    }), applyDecoratedDescriptor(_class2.prototype, "recordMultipleName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "recordMultipleName"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "recordSingleName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "recordSingleName"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "push", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "push"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "remove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "remove"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "take", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "take"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "takeMany", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "takeMany"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "takeAll", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "takeAll"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "override", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "override"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "includes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "includes"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "length", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "length"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "headersForRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "headersForRequest"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "methodForRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "methodForRequest"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "dataForRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "dataForRequest"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "urlForRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForRequest"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "pathForType", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "pathForType"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "urlPrefix", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlPrefix"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "makeURL", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "makeURL"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "urlForTakeAll", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForTakeAll"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "urlForTake", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForTake"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "urlForPush", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForPush"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "urlForRemove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForRemove"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "urlForOverride", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "urlForOverride"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "buildURL", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "buildURL"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "requestFor", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "requestFor"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "sendRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "sendRequest"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "requestHashToArguments", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "requestHashToArguments"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "makeRequest", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "makeRequest"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$5 = '/mixins/IterableMixin.js';

// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
var IterableInterface = flowRuntime_umd.type("IterableInterface", function (IterableInterface) {
  var Delegate = IterableInterface.typeParameter("Delegate");
  return flowRuntime_umd.object(flowRuntime_umd.property("forEach", flowRuntime_umd["function"](flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", Delegate), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("filter", flowRuntime_umd["function"](flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", Delegate), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(Delegate))))), flowRuntime_umd.property("map", flowRuntime_umd["function"](function (_fn) {
    var R = _fn.typeParameter("R");

    return [flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", Delegate), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", R)))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(R)))];
  })), flowRuntime_umd.property("reduce", flowRuntime_umd["function"](function (_fn2) {
    var I = _fn2.typeParameter("I");

    return [flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", I), flowRuntime_umd.param("_arg1", Delegate), flowRuntime_umd.param("_arg2", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", I)))), flowRuntime_umd.param("initialValue", I), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", I))];
  })));
});

function _createSuper$4(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$4(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$4() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var RecordInterface$4 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var IterableInterface$1 = flowRuntime_umd.tdz(function () {
  return IterableInterface;
});
var IterableMixin = (function (Module) {
  var _Module$NS = Module.NS,
      assert = _Module$NS.assert,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method;
  Module.defineMixin(__filename$5, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("forEach", flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$4)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("filter", flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$4)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref(RecordInterface$4))))), flowRuntime_umd.method("map", function (_fn) {
      var R = _fn.typeParameter("R");

      return [flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$4)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.flowInto(R))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(R)))];
    }), flowRuntime_umd.method("reduce", function (_fn2) {
      var I = _fn2.typeParameter("I");

      return [flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.flowInto(I)), flowRuntime_umd.param("_arg1", flowRuntime_umd.ref(RecordInterface$4)), flowRuntime_umd.param("_arg2", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.flowInto(I))))), flowRuntime_umd.param("initialValue", flowRuntime_umd.flowInto(I)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", I))];
    }))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      inherits(Mixin, _BaseClass);

      var _super = _createSuper$4(Mixin);

      function Mixin() {
        var _this;

        classCallCheck(this, Mixin);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        flowRuntime_umd.ref(IterableInterface$1, flowRuntime_umd.ref(RecordInterface$4)).assert(assertThisInitialized(_this));
        return _this;
      }

      createClass(Mixin, [{
        key: "forEach",
        value: function () {
          var _forEach = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(lambda) {
            var _lambdaType, _returnType, cursor;

            return regenerator.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _lambdaType = flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$4)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("lambda", _lambdaType).assert(lambda);
                    _context2.next = 5;
                    return this.takeAll();

                  case 5:
                    cursor = _context2.sent;
                    _context2.next = 8;
                    return cursor.forEach( /*#__PURE__*/function () {
                      var _ref = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(item, index) {
                        return regenerator.wrap(function _callee$(_context) {
                          while (1) {
                            switch (_context.prev = _context.next) {
                              case 0:
                                _context.next = 2;
                                return lambda(item, index);

                              case 2:
                              case "end":
                                return _context.stop();
                            }
                          }
                        }, _callee);
                      }));

                      return function (_x2, _x3) {
                        return _ref.apply(this, arguments);
                      };
                    }());

                  case 8:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function forEach(_x) {
            return _forEach.apply(this, arguments);
          }

          return forEach;
        }()
      }, {
        key: "filter",
        value: function () {
          var _filter = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(lambda) {
            var _lambdaType2, _returnType2, cursor;

            return regenerator.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _lambdaType2 = flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$4)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())));
                    _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.array(flowRuntime_umd.ref(RecordInterface$4)), flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.ref(RecordInterface$4)))));
                    flowRuntime_umd.param("lambda", _lambdaType2).assert(lambda);
                    _context4.next = 5;
                    return this.takeAll();

                  case 5:
                    cursor = _context4.sent;
                    _context4.t0 = _returnType2;
                    _context4.next = 9;
                    return cursor.filter( /*#__PURE__*/function () {
                      var _ref2 = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(item, index) {
                        return regenerator.wrap(function _callee3$(_context3) {
                          while (1) {
                            switch (_context3.prev = _context3.next) {
                              case 0:
                                _context3.next = 2;
                                return lambda(item, index);

                              case 2:
                                return _context3.abrupt("return", _context3.sent);

                              case 3:
                              case "end":
                                return _context3.stop();
                            }
                          }
                        }, _callee3);
                      }));

                      return function (_x5, _x6) {
                        return _ref2.apply(this, arguments);
                      };
                    }());

                  case 9:
                    _context4.t1 = _context4.sent;
                    return _context4.abrupt("return", _context4.t0.assert.call(_context4.t0, _context4.t1));

                  case 11:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));

          function filter(_x4) {
            return _filter.apply(this, arguments);
          }

          return filter;
        }()
      }, {
        key: "map",
        value: function () {
          var _map = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee6(lambda) {
            var R, _lambdaType3, _returnType3, cursor;

            return regenerator.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    R = flowRuntime_umd.typeParameter("R");
                    _lambdaType3 = flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$4)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.flowInto(R))));
                    _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.array(R), flowRuntime_umd.ref("Promise", flowRuntime_umd.array(R))));
                    flowRuntime_umd.param("lambda", _lambdaType3).assert(lambda);
                    _context6.next = 6;
                    return this.takeAll();

                  case 6:
                    cursor = _context6.sent;
                    _context6.t0 = _returnType3;
                    _context6.next = 10;
                    return cursor.map( /*#__PURE__*/function () {
                      var _ref3 = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5(item, index) {
                        return regenerator.wrap(function _callee5$(_context5) {
                          while (1) {
                            switch (_context5.prev = _context5.next) {
                              case 0:
                                _context5.next = 2;
                                return lambda(item, index);

                              case 2:
                                return _context5.abrupt("return", _context5.sent);

                              case 3:
                              case "end":
                                return _context5.stop();
                            }
                          }
                        }, _callee5);
                      }));

                      return function (_x8, _x9) {
                        return _ref3.apply(this, arguments);
                      };
                    }());

                  case 10:
                    _context6.t1 = _context6.sent;
                    return _context6.abrupt("return", _context6.t0.assert.call(_context6.t0, _context6.t1));

                  case 12:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          function map(_x7) {
            return _map.apply(this, arguments);
          }

          return map;
        }()
      }, {
        key: "reduce",
        value: function () {
          var _reduce = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee8(lambda, initialValue) {
            var I, _lambdaType4, _initialValueType, _returnType4, cursor;

            return regenerator.wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    I = flowRuntime_umd.typeParameter("I");
                    _lambdaType4 = flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.flowInto(I)), flowRuntime_umd.param("_arg1", flowRuntime_umd.ref(RecordInterface$4)), flowRuntime_umd.param("_arg2", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.flowInto(I))));
                    _initialValueType = flowRuntime_umd.flowInto(I);
                    _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(I, flowRuntime_umd.ref("Promise", I)));
                    flowRuntime_umd.param("lambda", _lambdaType4).assert(lambda);
                    flowRuntime_umd.param("initialValue", _initialValueType).assert(initialValue);
                    _context8.next = 8;
                    return this.takeAll();

                  case 8:
                    cursor = _context8.sent;
                    _context8.t0 = _returnType4;
                    _context8.next = 12;
                    return cursor.reduce( /*#__PURE__*/function () {
                      var _ref4 = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee7(prev, item, index) {
                        return regenerator.wrap(function _callee7$(_context7) {
                          while (1) {
                            switch (_context7.prev = _context7.next) {
                              case 0:
                                _context7.next = 2;
                                return lambda(prev, item, index);

                              case 2:
                                return _context7.abrupt("return", _context7.sent);

                              case 3:
                              case "end":
                                return _context7.stop();
                            }
                          }
                        }, _callee7);
                      }));

                      return function (_x12, _x13, _x14) {
                        return _ref4.apply(this, arguments);
                      };
                    }(), initialValue);

                  case 12:
                    _context8.t1 = _context8.sent;
                    return _context8.abrupt("return", _context8.t0.assert.call(_context8.t0, _context8.t1));

                  case 14:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));

          function reduce(_x10, _x11) {
            return _reduce.apply(this, arguments);
          }

          return reduce;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), applyDecoratedDescriptor(_class2.prototype, "forEach", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "forEach"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "filter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "filter"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "map", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "map"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "reduce", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "reduce"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$6 = '/mixins/MemoryAdapterMixin.js';

// This file is part of leanes-mapper-addon.
var CursorInterface$2 = flowRuntime_umd.tdz(function () {
  return CursorInterface;
});
var CollectionInterface = flowRuntime_umd.type("CollectionInterface", function (CollectionInterface) {
  var T = CollectionInterface.typeParameter("T");
  return flowRuntime_umd.object(flowRuntime_umd.property("collectionName", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("collectionPrefix", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("collectionFullName", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("recordHasBeenChanged", flowRuntime_umd["function"](flowRuntime_umd.param("asType", flowRuntime_umd.string()), flowRuntime_umd.param("aoData", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("generateId", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))))), flowRuntime_umd.property("build", flowRuntime_umd["function"](flowRuntime_umd.param("properties", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("create", flowRuntime_umd["function"](flowRuntime_umd.param("properties", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("push", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", T), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("delete", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("destroy", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("remove", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("find", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(T))))), flowRuntime_umd.property("findMany", flowRuntime_umd["function"](flowRuntime_umd.param("ids", flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$2, flowRuntime_umd.ref(CollectionInterface, T), T))))), flowRuntime_umd.property("take", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(T))))), flowRuntime_umd.property("takeMany", flowRuntime_umd["function"](flowRuntime_umd.param("ids", flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$2, flowRuntime_umd.ref(CollectionInterface, T), T))))), flowRuntime_umd.property("takeAll", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$2, flowRuntime_umd.ref(CollectionInterface, T), T))))), flowRuntime_umd.property("update", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd.param("properties", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("override", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd.param("aoRecord", T), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("clone", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", T), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("copy", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", T), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("includes", flowRuntime_umd["function"](flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())))), flowRuntime_umd.property("length", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.number())))));
});

function _createSuper$5(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$5(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$5() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var DriverInterface$2 = flowRuntime_umd.tdz(function () {
  return DriverInterface;
});
var CursorInterface$3 = flowRuntime_umd.tdz(function () {
  return CursorInterface;
});
var RecordInterface$5 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$1 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var MemoryAdapterMixin = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      assert = _Module$NS$Utils.assert;
  Module.defineMixin(__filename$6, function (BaseClass) {
    var _t$TypeParametersSymb;

    var _dec, _dec2, _class, _class2, _init, _descriptor, _class3, _temp;

    var _MixinTypeParametersSymbol = Symbol("MixinTypeParameters");

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", function (Mixin) {
      var R = Mixin.typeParameter("R", undefined, flowRuntime_umd.Class(flowRuntime_umd.existential()));
      var T = Mixin.typeParameter("T", undefined, flowRuntime_umd.ref("object"));
      return [flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_collection", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()), flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("push", flowRuntime_umd.param("aoRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd.param("snapshot", flowRuntime_umd.flowInto(T)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T))), flowRuntime_umd.method("remove", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("take", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(T)))), flowRuntime_umd.method("takeMany", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd.param("ids", flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(T)))), flowRuntime_umd.method("takeAll", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(T)))), flowRuntime_umd.method("override", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd.param("snapshot", flowRuntime_umd.flowInto(T)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T))), flowRuntime_umd.method("includes", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("length", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.number())))];
    })), _dec2 = flowRuntime_umd.decorate(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()), flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = (_t$TypeParametersSymb = flowRuntime_umd.TypeParametersSymbol, _class3 = /*#__PURE__*/function (_BaseClass) {
      inherits(Mixin, _BaseClass);

      var _super = _createSuper$5(Mixin);

      function Mixin() {
        var _this;

        classCallCheck(this, Mixin);

        var _typeParameters = {
          R: flowRuntime_umd.typeParameter("R"),
          T: flowRuntime_umd.typeParameter("T")
        };

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        initializerDefineProperty(_this, "_collection", _descriptor, assertThisInitialized(_this));

        _this[_MixinTypeParametersSymbol] = _typeParameters;
        flowRuntime_umd.ref(DriverInterface$2, _this[_MixinTypeParametersSymbol].R, _this[_MixinTypeParametersSymbol].T).assert(assertThisInitialized(_this));
        return _this;
      }

      createClass(Mixin, [{
        key: "push",
        value: function () {
          var _push = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(aoRecord, snapshot) {
            var _aoRecordType, _snapshotType, _returnType, id;

            return regenerator.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _aoRecordType = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].R);
                    _snapshotType = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].T);
                    _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(this[_MixinTypeParametersSymbol].T, flowRuntime_umd.ref("Promise", this[_MixinTypeParametersSymbol].T)));
                    flowRuntime_umd.param("aoRecord", _aoRecordType).assert(aoRecord);
                    flowRuntime_umd.param("snapshot", _snapshotType).assert(snapshot);
                    id = snapshot.id;
                    assert(id != null, '`id` should be not null');
                    this._collection[id] = snapshot;
                    return _context.abrupt("return", _returnType.assert(this._collection[id]));

                  case 9:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function push(_x, _x2) {
            return _push.apply(this, arguments);
          }

          return push;
        }()
      }, {
        key: "remove",
        value: function () {
          var _remove = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(acRecord, id) {
            var _acRecordType, _idType, _returnType2;

            return regenerator.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _acRecordType = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].R);
                    _idType = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number());
                    _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("acRecord", _acRecordType).assert(acRecord);
                    flowRuntime_umd.param("id", _idType).assert(id);
                    delete this._collection[id];

                  case 6:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function remove(_x3, _x4) {
            return _remove.apply(this, arguments);
          }

          return remove;
        }()
      }, {
        key: "take",
        value: function () {
          var _take = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(acRecord, id) {
            var _acRecordType2, _idType2, _returnType3;

            return regenerator.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _acRecordType2 = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].R);
                    _idType2 = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number());
                    _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(this[_MixinTypeParametersSymbol].T), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(this[_MixinTypeParametersSymbol].T))));
                    flowRuntime_umd.param("acRecord", _acRecordType2).assert(acRecord);
                    flowRuntime_umd.param("id", _idType2).assert(id);
                    return _context3.abrupt("return", _returnType3.assert(this._collection[id]));

                  case 6:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function take(_x5, _x6) {
            return _take.apply(this, arguments);
          }

          return take;
        }()
      }, {
        key: "takeMany",
        value: function () {
          var _takeMany = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(acRecord, ids) {
            var _this2 = this;

            var _acRecordType3, _idsType, _returnType4;

            return regenerator.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _acRecordType3 = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].R);
                    _idsType = flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()));
                    _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.array(this[_MixinTypeParametersSymbol].T), flowRuntime_umd.ref("Promise", flowRuntime_umd.array(this[_MixinTypeParametersSymbol].T))));
                    flowRuntime_umd.param("acRecord", _acRecordType3).assert(acRecord);
                    flowRuntime_umd.param("ids", _idsType).assert(ids);
                    return _context4.abrupt("return", _returnType4.assert(ids.map(function (id) {
                      return _this2._collection[id];
                    })));

                  case 6:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));

          function takeMany(_x7, _x8) {
            return _takeMany.apply(this, arguments);
          }

          return takeMany;
        }()
      }, {
        key: "takeAll",
        value: function () {
          var _takeAll = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5(acRecord) {
            var _acRecordType4, _returnType5;

            return regenerator.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _acRecordType4 = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].R);
                    _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.array(this[_MixinTypeParametersSymbol].T), flowRuntime_umd.ref("Promise", flowRuntime_umd.array(this[_MixinTypeParametersSymbol].T))));
                    flowRuntime_umd.param("acRecord", _acRecordType4).assert(acRecord);
                    return _context5.abrupt("return", _returnType5.assert(_.values(this._collection)));

                  case 4:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));

          function takeAll(_x9) {
            return _takeAll.apply(this, arguments);
          }

          return takeAll;
        }()
      }, {
        key: "override",
        value: function () {
          var _override = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee6(acRecord, id, snapshot) {
            var _acRecordType5, _idType3, _snapshotType2, _returnType6;

            return regenerator.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    _acRecordType5 = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].R);
                    _idType3 = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number());
                    _snapshotType2 = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].T);
                    _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.union(this[_MixinTypeParametersSymbol].T, flowRuntime_umd.ref("Promise", this[_MixinTypeParametersSymbol].T)));
                    flowRuntime_umd.param("acRecord", _acRecordType5).assert(acRecord);
                    flowRuntime_umd.param("id", _idType3).assert(id);
                    flowRuntime_umd.param("snapshot", _snapshotType2).assert(snapshot);
                    this._collection[id] = snapshot;
                    return _context6.abrupt("return", _returnType6.assert(this._collection[id]));

                  case 9:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          function override(_x10, _x11, _x12) {
            return _override.apply(this, arguments);
          }

          return override;
        }()
      }, {
        key: "includes",
        value: function () {
          var _includes = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee7(acRecord, id) {
            var _acRecordType6, _idType4, _returnType7;

            return regenerator.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    _acRecordType6 = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].R);
                    _idType4 = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number());
                    _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())));
                    flowRuntime_umd.param("acRecord", _acRecordType6).assert(acRecord);
                    flowRuntime_umd.param("id", _idType4).assert(id);
                    return _context7.abrupt("return", _returnType7.assert(this._collection[id] != null));

                  case 6:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));

          function includes(_x13, _x14) {
            return _includes.apply(this, arguments);
          }

          return includes;
        }()
      }, {
        key: "length",
        value: function () {
          var _length = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee8(acRecord) {
            var _acRecordType7, _returnType8;

            return regenerator.wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    _acRecordType7 = flowRuntime_umd.flowInto(this[_MixinTypeParametersSymbol].R);
                    _returnType8 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.ref("Promise", flowRuntime_umd.number())));
                    flowRuntime_umd.param("acRecord", _acRecordType7).assert(acRecord);
                    return _context8.abrupt("return", _returnType8.assert(Object.keys(this._collection).length));

                  case 4:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));

          function length(_x15) {
            return _length.apply(this, arguments);
          }

          return length;
        }()
      }]);

      return Mixin;
    }(BaseClass)), _class3[_t$TypeParametersSymb] = _MixinTypeParametersSymbol, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _descriptor = applyDecoratedDescriptor(_class2.prototype, "_collection", [_dec2, property], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return {};
      }
    }), applyDecoratedDescriptor(_class2.prototype, "push", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "push"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "remove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "remove"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "take", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "take"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "takeMany", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "takeMany"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "takeAll", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "takeAll"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "override", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "override"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "includes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "includes"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "length", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "length"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$7 = '/mixins/MemoryMigrationMixin.js';

function _createSuper$6(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$6(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$6() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
var hasProp$1 = {}.hasOwnProperty;
var MemoryMigrationMixin = (function (Module) {
  var _Module$NS = Module.NS,
      UP = _Module$NS.UP,
      DOWN = _Module$NS.DOWN,
      SUPPORTED_TYPES = _Module$NS.SUPPORTED_TYPES,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect;
  Module.defineMixin(__filename$7, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("createCollection", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("createEdgeCollection", flowRuntime_umd.param("collectionName1", flowRuntime_umd.string()), flowRuntime_umd.param("collectionName2", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("addField", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES))), flowRuntime_umd.property("default", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("addIndex", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldNames", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("sparse", flowRuntime_umd["boolean"](), true))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("addTimestamps", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("changeCollection", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("changeField", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("renameField", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd.param("newFieldName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("renameIndex", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("oldCollectionName", flowRuntime_umd.string()), flowRuntime_umd.param("newCollectionName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("renameCollection", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("newCollectionName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("dropCollection", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("dropEdgeCollection", flowRuntime_umd.param("collectionName1", flowRuntime_umd.string()), flowRuntime_umd.param("collectionName2", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("removeField", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("removeIndex", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldNames", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("sparse", flowRuntime_umd["boolean"](), true))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("removeTimestamps", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      inherits(Mixin, _BaseClass);

      var _super = _createSuper$6(Mixin);

      function Mixin() {
        classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      createClass(Mixin, [{
        key: "createCollection",
        value: function () {
          var _createCollection = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(name, options) {
            var _nameType, _optionsType, _returnType;

            return regenerator.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _nameType = flowRuntime_umd.string();
                    _optionsType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                    _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("name", _nameType).assert(name);
                    flowRuntime_umd.param("options", _optionsType).assert(options);
                    return _context.abrupt("return", _returnType.assert());

                  case 6:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          function createCollection(_x, _x2) {
            return _createCollection.apply(this, arguments);
          }

          return createCollection;
        }()
      }, {
        key: "createEdgeCollection",
        value: function () {
          var _createEdgeCollection = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(collectionName1, collectionName2, options) {
            var _collectionName1Type, _collectionName2Type, _optionsType2, _returnType2;

            return regenerator.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _collectionName1Type = flowRuntime_umd.string();
                    _collectionName2Type = flowRuntime_umd.string();
                    _optionsType2 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                    _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("collectionName1", _collectionName1Type).assert(collectionName1);
                    flowRuntime_umd.param("collectionName2", _collectionName2Type).assert(collectionName2);
                    flowRuntime_umd.param("options", _optionsType2).assert(options);
                    return _context2.abrupt("return", _returnType2.assert());

                  case 8:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));

          function createEdgeCollection(_x3, _x4, _x5) {
            return _createEdgeCollection.apply(this, arguments);
          }

          return createEdgeCollection;
        }()
      }, {
        key: "addField",
        value: function () {
          var _addField = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(name, fieldName, options) {
            var _nameType2, _fieldNameType, _optionsType3, _returnType3, collectionName, memCollection, initial, collection, id, doc;

            return regenerator.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    _nameType2 = flowRuntime_umd.string();
                    _fieldNameType = flowRuntime_umd.string();
                    _optionsType3 = flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES))), flowRuntime_umd.property("default", flowRuntime_umd.nullable(flowRuntime_umd.any()))));
                    _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("name", _nameType2).assert(name);
                    flowRuntime_umd.param("fieldName", _fieldNameType).assert(fieldName);
                    flowRuntime_umd.param("options", _optionsType3).assert(options);

                    if (!_.isString(options)) {
                      _context3.next = 9;
                      break;
                    }

                    return _context3.abrupt("return", _returnType3.assert());

                  case 9:
                    collectionName = "".concat(inflect.camelize(name), "Collection");
                    memCollection = this.collection.facade.retrieveProxy(collectionName);
                    initial = options["default"] != null ? _.isNumber(options["default"]) || _.isBoolean(options["default"]) ? options["default"] : _.isDate(options["default"]) ? options["default"].toISOString() : _.isString(options["default"]) ? "".concat(options["default"]) : null : null;
                    collection = memCollection._collection;
                    _context3.t0 = regenerator.keys(collection);

                  case 14:
                    if ((_context3.t1 = _context3.t0()).done) {
                      _context3.next = 22;
                      break;
                    }

                    id = _context3.t1.value;

                    if (hasProp$1.call(collection, id)) {
                      _context3.next = 18;
                      break;
                    }

                    return _context3.abrupt("continue", 14);

                  case 18:
                    doc = collection[id];

                    if (doc[fieldName] == null) {
                      doc[fieldName] = initial;
                    }

                    _context3.next = 14;
                    break;

                  case 22:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function addField(_x6, _x7, _x8) {
            return _addField.apply(this, arguments);
          }

          return addField;
        }()
      }, {
        key: "addIndex",
        value: function () {
          var _addIndex = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(collectionName, fieldNames, options) {
            var _collectionNameType, _fieldNamesType, _optionsType4, _returnType4;

            return regenerator.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _collectionNameType = flowRuntime_umd.string();
                    _fieldNamesType = flowRuntime_umd.array(flowRuntime_umd.string());
                    _optionsType4 = flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("sparse", flowRuntime_umd["boolean"](), true));
                    _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("collectionName", _collectionNameType).assert(collectionName);
                    flowRuntime_umd.param("fieldNames", _fieldNamesType).assert(fieldNames);
                    flowRuntime_umd.param("options", _optionsType4).assert(options);
                    return _context4.abrupt("return", _returnType4.assert());

                  case 8:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4);
          }));

          function addIndex(_x9, _x10, _x11) {
            return _addIndex.apply(this, arguments);
          }

          return addIndex;
        }()
      }, {
        key: "addTimestamps",
        value: function () {
          var _addTimestamps = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5(name) {
            var options,
                _nameType3,
                _optionsType5,
                _returnType5,
                collectionName,
                memCollection,
                collection,
                id,
                doc,
                _args5 = arguments;

            return regenerator.wrap(function _callee5$(_context5) {
              while (1) {
                switch (_context5.prev = _context5.next) {
                  case 0:
                    options = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};
                    _nameType3 = flowRuntime_umd.string();
                    _optionsType5 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                    _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("name", _nameType3).assert(name);
                    flowRuntime_umd.param("options", _optionsType5).assert(options);
                    collectionName = "".concat(inflect.camelize(name), "Collection");
                    memCollection = this.collection.facade.retrieveProxy(collectionName);
                    collection = memCollection._collection;
                    _context5.t0 = regenerator.keys(collection);

                  case 10:
                    if ((_context5.t1 = _context5.t0()).done) {
                      _context5.next = 20;
                      break;
                    }

                    id = _context5.t1.value;

                    if (hasProp$1.call(collection, id)) {
                      _context5.next = 14;
                      break;
                    }

                    return _context5.abrupt("continue", 10);

                  case 14:
                    doc = collection[id];

                    if (doc.createdAt == null) {
                      doc.createdAt = null;
                    }

                    if (doc.updatedAt == null) {
                      doc.updatedAt = null;
                    }

                    if (doc.deletedAt == null) {
                      doc.deletedAt = null;
                    }

                    _context5.next = 10;
                    break;

                  case 20:
                  case "end":
                    return _context5.stop();
                }
              }
            }, _callee5, this);
          }));

          function addTimestamps(_x12) {
            return _addTimestamps.apply(this, arguments);
          }

          return addTimestamps;
        }()
      }, {
        key: "changeCollection",
        value: function () {
          var _changeCollection = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee6(name, options) {
            var _nameType4, _optionsType6, _returnType6;

            return regenerator.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    _nameType4 = flowRuntime_umd.string();
                    _optionsType6 = flowRuntime_umd.ref("object");
                    _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("name", _nameType4).assert(name);
                    flowRuntime_umd.param("options", _optionsType6).assert(options);
                    return _context6.abrupt("return", _returnType6.assert());

                  case 6:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6);
          }));

          function changeCollection(_x13, _x14) {
            return _changeCollection.apply(this, arguments);
          }

          return changeCollection;
        }()
      }, {
        key: "changeField",
        value: function () {
          var _changeField = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee7(name, fieldName) {
            var options,
                _nameType5,
                _fieldNameType2,
                _optionsType7,
                _returnType7,
                collectionName,
                memCollection,
                type,
                collection,
                id,
                doc,
                _args7 = arguments;

            return regenerator.wrap(function _callee7$(_context7) {
              while (1) {
                switch (_context7.prev = _context7.next) {
                  case 0:
                    options = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : {};
                    _nameType5 = flowRuntime_umd.string();
                    _fieldNameType2 = flowRuntime_umd.string();
                    _optionsType7 = flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)))));
                    _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("name", _nameType5).assert(name);
                    flowRuntime_umd.param("fieldName", _fieldNameType2).assert(fieldName);
                    flowRuntime_umd.param("options", _optionsType7).assert(options);
                    collectionName = "".concat(inflect.camelize(name), "Collection");
                    memCollection = this.collection.facade.retrieveProxy(collectionName);
                    type = _.isString(options) ? options : options.type;
                    collection = memCollection._collection;
                    _context7.t0 = regenerator.keys(collection);

                  case 13:
                    if ((_context7.t1 = _context7.t0()).done) {
                      _context7.next = 34;
                      break;
                    }

                    id = _context7.t1.value;

                    if (hasProp$1.call(collection, id)) {
                      _context7.next = 17;
                      break;
                    }

                    return _context7.abrupt("continue", 13);

                  case 17:
                    doc = collection[id];
                    _context7.t2 = type;
                    _context7.next = _context7.t2 === SUPPORTED_TYPES["boolean"] ? 21 : _context7.t2 === SUPPORTED_TYPES.decimal ? 23 : _context7.t2 === SUPPORTED_TYPES["float"] ? 23 : _context7.t2 === SUPPORTED_TYPES.integer ? 23 : _context7.t2 === SUPPORTED_TYPES.number ? 23 : _context7.t2 === SUPPORTED_TYPES.string ? 25 : _context7.t2 === SUPPORTED_TYPES.text ? 25 : _context7.t2 === SUPPORTED_TYPES.primary_key ? 25 : _context7.t2 === SUPPORTED_TYPES.binary ? 25 : _context7.t2 === SUPPORTED_TYPES.json ? 27 : _context7.t2 === SUPPORTED_TYPES.hash ? 27 : _context7.t2 === SUPPORTED_TYPES.array ? 27 : _context7.t2 === SUPPORTED_TYPES.date ? 29 : _context7.t2 === SUPPORTED_TYPES.datetime ? 29 : _context7.t2 === SUPPORTED_TYPES.time ? 31 : _context7.t2 === SUPPORTED_TYPES.timestamp ? 31 : 32;
                    break;

                  case 21:
                    doc[fieldName] = Boolean(doc[fieldName]);
                    return _context7.abrupt("break", 32);

                  case 23:
                    doc[fieldName] = Number(doc[fieldName]);
                    return _context7.abrupt("break", 32);

                  case 25:
                    doc[fieldName] = String(JSON.stringify(doc[fieldName]));
                    return _context7.abrupt("break", 32);

                  case 27:
                    doc[fieldName] = JSON.parse(String(doc[fieldName]));
                    return _context7.abrupt("break", 32);

                  case 29:
                    doc[fieldName] = new Date(String(doc[fieldName])).toISOString();
                    return _context7.abrupt("break", 32);

                  case 31:
                    doc[fieldName] = new Date(String(doc[fieldName])).getTime();

                  case 32:
                    _context7.next = 13;
                    break;

                  case 34:
                  case "end":
                    return _context7.stop();
                }
              }
            }, _callee7, this);
          }));

          function changeField(_x15, _x16) {
            return _changeField.apply(this, arguments);
          }

          return changeField;
        }()
      }, {
        key: "renameField",
        value: function () {
          var _renameField = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee8(name, fieldName, newFieldName) {
            var _nameType6, _fieldNameType3, _newFieldNameType, _returnType8, collectionName, memCollection, collection, id, doc;

            return regenerator.wrap(function _callee8$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    _nameType6 = flowRuntime_umd.string();
                    _fieldNameType3 = flowRuntime_umd.string();
                    _newFieldNameType = flowRuntime_umd.string();
                    _returnType8 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("name", _nameType6).assert(name);
                    flowRuntime_umd.param("fieldName", _fieldNameType3).assert(fieldName);
                    flowRuntime_umd.param("newFieldName", _newFieldNameType).assert(newFieldName);
                    collectionName = "".concat(inflect.camelize(name), "Collection");
                    memCollection = this.collection.facade.retrieveProxy(collectionName);
                    collection = memCollection._collection;
                    _context8.t0 = regenerator.keys(collection);

                  case 11:
                    if ((_context8.t1 = _context8.t0()).done) {
                      _context8.next = 20;
                      break;
                    }

                    id = _context8.t1.value;

                    if (hasProp$1.call(collection, id)) {
                      _context8.next = 15;
                      break;
                    }

                    return _context8.abrupt("continue", 11);

                  case 15:
                    doc = collection[id];
                    doc[newFieldName] = doc[fieldName];
                    delete doc[fieldName];
                    _context8.next = 11;
                    break;

                  case 20:
                  case "end":
                    return _context8.stop();
                }
              }
            }, _callee8, this);
          }));

          function renameField(_x17, _x18, _x19) {
            return _renameField.apply(this, arguments);
          }

          return renameField;
        }()
      }, {
        key: "renameIndex",
        value: function () {
          var _renameIndex = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee9(collectionName, oldCollectionName, newCollectionName) {
            var _collectionNameType2, _oldCollectionNameType, _newCollectionNameType, _returnType9;

            return regenerator.wrap(function _callee9$(_context9) {
              while (1) {
                switch (_context9.prev = _context9.next) {
                  case 0:
                    _collectionNameType2 = flowRuntime_umd.string();
                    _oldCollectionNameType = flowRuntime_umd.string();
                    _newCollectionNameType = flowRuntime_umd.string();
                    _returnType9 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("collectionName", _collectionNameType2).assert(collectionName);
                    flowRuntime_umd.param("oldCollectionName", _oldCollectionNameType).assert(oldCollectionName);
                    flowRuntime_umd.param("newCollectionName", _newCollectionNameType).assert(newCollectionName);
                    return _context9.abrupt("return", _returnType9.assert());

                  case 8:
                  case "end":
                    return _context9.stop();
                }
              }
            }, _callee9);
          }));

          function renameIndex(_x20, _x21, _x22) {
            return _renameIndex.apply(this, arguments);
          }

          return renameIndex;
        }()
      }, {
        key: "renameCollection",
        value: function () {
          var _renameCollection = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee10(collectionName, newCollectionName) {
            var _collectionNameType3, _newCollectionNameType2, _returnType10;

            return regenerator.wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    _collectionNameType3 = flowRuntime_umd.string();
                    _newCollectionNameType2 = flowRuntime_umd.string();
                    _returnType10 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("collectionName", _collectionNameType3).assert(collectionName);
                    flowRuntime_umd.param("newCollectionName", _newCollectionNameType2).assert(newCollectionName);
                    return _context10.abrupt("return", _returnType10.assert());

                  case 6:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10);
          }));

          function renameCollection(_x23, _x24) {
            return _renameCollection.apply(this, arguments);
          }

          return renameCollection;
        }()
      }, {
        key: "dropCollection",
        value: function () {
          var _dropCollection = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee11(name) {
            var _nameType7, _returnType11, collectionName, memCollection, collection, id, doc;

            return regenerator.wrap(function _callee11$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    _nameType7 = flowRuntime_umd.string();
                    _returnType11 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("name", _nameType7).assert(name);
                    collectionName = "".concat(inflect.camelize(name), "Collection");
                    memCollection = this.collection.facade.retrieveProxy(collectionName);
                    collection = this.collection._collection;
                    _context11.t0 = regenerator.keys(collection);

                  case 7:
                    if ((_context11.t1 = _context11.t0()).done) {
                      _context11.next = 15;
                      break;
                    }

                    id = _context11.t1.value;

                    if (hasProp$1.call(collection, id)) {
                      _context11.next = 11;
                      break;
                    }

                    return _context11.abrupt("continue", 7);

                  case 11:
                    doc = collection[id];
                    delete memCollection._collection[id];
                    _context11.next = 7;
                    break;

                  case 15:
                    memCollection._collection = {};

                  case 16:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee11, this);
          }));

          function dropCollection(_x25) {
            return _dropCollection.apply(this, arguments);
          }

          return dropCollection;
        }()
      }, {
        key: "dropEdgeCollection",
        value: function () {
          var _dropEdgeCollection = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee12(collectionName1, collectionName2) {
            var _collectionName1Type2, _collectionName2Type2, _returnType12, qualifiedName, collectionName, memCollection, collection, id, doc;

            return regenerator.wrap(function _callee12$(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    _collectionName1Type2 = flowRuntime_umd.string();
                    _collectionName2Type2 = flowRuntime_umd.string();
                    _returnType12 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("collectionName1", _collectionName1Type2).assert(collectionName1);
                    flowRuntime_umd.param("collectionName2", _collectionName2Type2).assert(collectionName2);
                    qualifiedName = "".concat(collectionName1, "_").concat(collectionName2);
                    collectionName = "".concat(inflect.camelize(qualifiedName), "Collection");
                    memCollection = this.collection.facade.retrieveProxy(collectionName);
                    collection = this.collection._collection;
                    _context12.t0 = regenerator.keys(collection);

                  case 10:
                    if ((_context12.t1 = _context12.t0()).done) {
                      _context12.next = 18;
                      break;
                    }

                    id = _context12.t1.value;

                    if (hasProp$1.call(collection, id)) {
                      _context12.next = 14;
                      break;
                    }

                    return _context12.abrupt("continue", 10);

                  case 14:
                    doc = collection[id];
                    delete memCollection._collection[id];
                    _context12.next = 10;
                    break;

                  case 18:
                    memCollection.adapter._collection = {};

                  case 19:
                  case "end":
                    return _context12.stop();
                }
              }
            }, _callee12, this);
          }));

          function dropEdgeCollection(_x26, _x27) {
            return _dropEdgeCollection.apply(this, arguments);
          }

          return dropEdgeCollection;
        }()
      }, {
        key: "removeField",
        value: function () {
          var _removeField = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee13(name, fieldName) {
            var _nameType8, _fieldNameType4, _returnType13, collectionName, memCollection, collection, id, doc;

            return regenerator.wrap(function _callee13$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    _nameType8 = flowRuntime_umd.string();
                    _fieldNameType4 = flowRuntime_umd.string();
                    _returnType13 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("name", _nameType8).assert(name);
                    flowRuntime_umd.param("fieldName", _fieldNameType4).assert(fieldName);
                    collectionName = "".concat(inflect.camelize(name), "Collection");
                    memCollection = this.collection.facade.retrieveProxy(collectionName);
                    collection = memCollection.adapter._collection;
                    _context13.t0 = regenerator.keys(collection);

                  case 9:
                    if ((_context13.t1 = _context13.t0()).done) {
                      _context13.next = 17;
                      break;
                    }

                    id = _context13.t1.value;

                    if (hasProp$1.call(collection, id)) {
                      _context13.next = 13;
                      break;
                    }

                    return _context13.abrupt("continue", 9);

                  case 13:
                    doc = collection[id];
                    delete doc[fieldName];
                    _context13.next = 9;
                    break;

                  case 17:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee13, this);
          }));

          function removeField(_x28, _x29) {
            return _removeField.apply(this, arguments);
          }

          return removeField;
        }()
      }, {
        key: "removeIndex",
        value: function () {
          var _removeIndex = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee14(collectionName, fieldNames, options) {
            var _collectionNameType4, _fieldNamesType2, _optionsType8, _returnType14;

            return regenerator.wrap(function _callee14$(_context14) {
              while (1) {
                switch (_context14.prev = _context14.next) {
                  case 0:
                    _collectionNameType4 = flowRuntime_umd.string();
                    _fieldNamesType2 = flowRuntime_umd.array(flowRuntime_umd.string());
                    _optionsType8 = flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("sparse", flowRuntime_umd["boolean"](), true));
                    _returnType14 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("collectionName", _collectionNameType4).assert(collectionName);
                    flowRuntime_umd.param("fieldNames", _fieldNamesType2).assert(fieldNames);
                    flowRuntime_umd.param("options", _optionsType8).assert(options);
                    return _context14.abrupt("return", _returnType14.assert());

                  case 8:
                  case "end":
                    return _context14.stop();
                }
              }
            }, _callee14);
          }));

          function removeIndex(_x30, _x31, _x32) {
            return _removeIndex.apply(this, arguments);
          }

          return removeIndex;
        }()
      }, {
        key: "removeTimestamps",
        value: function () {
          var _removeTimestamps = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee15(name) {
            var options,
                _nameType9,
                _optionsType9,
                _returnType15,
                collectionName,
                memCollection,
                collection,
                id,
                doc,
                _args15 = arguments;

            return regenerator.wrap(function _callee15$(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    options = _args15.length > 1 && _args15[1] !== undefined ? _args15[1] : {};
                    _nameType9 = flowRuntime_umd.string();
                    _optionsType9 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                    _returnType15 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("name", _nameType9).assert(name);
                    flowRuntime_umd.param("options", _optionsType9).assert(options);
                    collectionName = "".concat(inflect.camelize(name), "Collection");
                    memCollection = this.collection.facade.retrieveProxy(collectionName);
                    collection = memCollection._collection;
                    _context15.t0 = regenerator.keys(collection);

                  case 10:
                    if ((_context15.t1 = _context15.t0()).done) {
                      _context15.next = 20;
                      break;
                    }

                    id = _context15.t1.value;

                    if (hasProp$1.call(collection, id)) {
                      _context15.next = 14;
                      break;
                    }

                    return _context15.abrupt("continue", 10);

                  case 14:
                    doc = collection[id];
                    delete doc.createdAt;
                    delete doc.updatedAt;
                    delete doc.deletedAt;
                    _context15.next = 10;
                    break;

                  case 20:
                  case "end":
                    return _context15.stop();
                }
              }
            }, _callee15, this);
          }));

          function removeTimestamps(_x33) {
            return _removeTimestamps.apply(this, arguments);
          }

          return removeTimestamps;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), applyDecoratedDescriptor(_class2.prototype, "createCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "createCollection"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "createEdgeCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "createEdgeCollection"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "addField", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addField"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "addIndex", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addIndex"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "addTimestamps", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addTimestamps"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "changeCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "changeCollection"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "changeField", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "changeField"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "renameField", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "renameField"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "renameIndex", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "renameIndex"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "renameCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "renameCollection"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "dropCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "dropCollection"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "dropEdgeCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "dropEdgeCollection"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "removeField", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeField"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "removeIndex", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeIndex"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "removeTimestamps", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeTimestamps"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$8 = '/mixins/MigratifyApplicationMediatorMixin.js';

// This file is part of LeanES.
//
// LeanES is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// LeanES is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with LeanES.  If not, see <https://www.gnu.org/licenses/>.
var NotificationInterface = flowRuntime_umd.type("NotificationInterface", function (NotificationInterface) {
  var T = NotificationInterface.typeParameter("T", undefined, flowRuntime_umd.nullable(flowRuntime_umd.any()));
  return flowRuntime_umd.object(flowRuntime_umd.property("getName", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("setBody", flowRuntime_umd["function"](flowRuntime_umd.param("aoBody", T), flowRuntime_umd["return"](T))), flowRuntime_umd.property("getBody", flowRuntime_umd["function"](flowRuntime_umd["return"](T))), flowRuntime_umd.property("setType", flowRuntime_umd["function"](flowRuntime_umd.param("asType", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.string()))), flowRuntime_umd.property("getType", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string())))));
});

function _createSuper$7(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$7(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$7() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var NotificationInterface$1 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var MigratifyApplicationMediatorMixin = (function (Module) {
  var _Module$NS = Module.NS,
      STOPPED_MIGRATE = _Module$NS.STOPPED_MIGRATE,
      STOPPED_ROLLBACK = _Module$NS.STOPPED_ROLLBACK,
      MIGRATE = _Module$NS.MIGRATE,
      ROLLBACK = _Module$NS.ROLLBACK,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      genRandomAlphaNumbers = _Module$NS.Utils.genRandomAlphaNumbers;
  Module.defineMixin(__filename$8, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("listNotificationInterests", flowRuntime_umd.param("args", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("handleNotification", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$1)), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("migrate", flowRuntime_umd.param("opts", flowRuntime_umd.nullable(flowRuntime_umd.exactObject(flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("rollback", flowRuntime_umd.param("opts", flowRuntime_umd.nullable(flowRuntime_umd.exactObject(flowRuntime_umd.property("steps", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      inherits(Mixin, _BaseClass);

      var _super = _createSuper$7(Mixin);

      function Mixin() {
        classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      createClass(Mixin, [{
        key: "listNotificationInterests",
        value: function listNotificationInterests() {
          var _get2;

          var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()));

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var interests = (_get2 = get(getPrototypeOf(Mixin.prototype), "listNotificationInterests", this)).call.apply(_get2, [this].concat(args));

          interests.push(STOPPED_MIGRATE);
          interests.push(STOPPED_ROLLBACK);
          return _returnType3.assert(interests);
        }
      }, {
        key: "handleNotification",
        value: function handleNotification(aoNotification) {
          var _aoNotificationType = flowRuntime_umd.ref(NotificationInterface$1);

          var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

          flowRuntime_umd.param("aoNotification", _aoNotificationType).assert(aoNotification);
          var vsName = aoNotification.getName();
          var voBody = aoNotification.getBody();
          var vsType = aoNotification.getType();

          switch (vsName) {
            case STOPPED_MIGRATE:
            case STOPPED_ROLLBACK:
              this.emitter.emit(vsType, voBody);
              break;

            default:
              get(getPrototypeOf(Mixin.prototype), "handleNotification", this).call(this, aoNotification);

          }
        }
      }, {
        key: "migrate",
        value: function () {
          var _migrate = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(opts) {
            var _this = this;

            var _optsType, _returnType;

            return regenerator.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _optsType = flowRuntime_umd.nullable(flowRuntime_umd.exactObject(flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string()))));
                    _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("opts", _optsType).assert(opts);
                    _context.t0 = _returnType;
                    _context.next = 6;
                    return new Promise(function (resolve, reject) {
                      try {
                        var reverse = genRandomAlphaNumbers(32);

                        _this.emitter.once(reverse, function (_ref) {
                          var error = _ref.error;

                          if (error != null) {
                            reject(error);
                            return;
                          }

                          resolve();
                        });

                        _this.send(MIGRATE, opts, reverse);
                      } catch (err) {
                        reject(err);
                      }
                    });

                  case 6:
                    _context.t1 = _context.sent;
                    return _context.abrupt("return", _context.t0.assert.call(_context.t0, _context.t1));

                  case 8:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          function migrate(_x) {
            return _migrate.apply(this, arguments);
          }

          return migrate;
        }()
      }, {
        key: "rollback",
        value: function () {
          var _rollback = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(opts) {
            var _this2 = this;

            var _optsType2, _returnType2;

            return regenerator.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _optsType2 = flowRuntime_umd.nullable(flowRuntime_umd.exactObject(flowRuntime_umd.property("steps", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string()))));
                    _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("opts", _optsType2).assert(opts);
                    _context2.t0 = _returnType2;
                    _context2.next = 6;
                    return new Promise(function (resolve, reject) {
                      try {
                        var reverse = genRandomAlphaNumbers(32);

                        _this2.emitter.once(reverse, function (_ref2) {
                          var error = _ref2.error;

                          if (error != null) {
                            reject(error);
                            return;
                          }

                          resolve();
                        });

                        _this2.send(ROLLBACK, opts, reverse);
                      } catch (err) {
                        reject(err);
                      }
                    });

                  case 6:
                    _context2.t1 = _context2.sent;
                    return _context2.abrupt("return", _context2.t0.assert.call(_context2.t0, _context2.t1));

                  case 8:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2);
          }));

          function rollback(_x2) {
            return _rollback.apply(this, arguments);
          }

          return rollback;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), applyDecoratedDescriptor(_class2.prototype, "listNotificationInterests", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "listNotificationInterests"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "handleNotification", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "handleNotification"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "migrate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "migrate"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "rollback", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "rollback"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$9 = '/mixins/MigratifyApplicationMixin.js';

function _createSuper$8(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$8(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$8() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
var MigratifyApplicationMixin = (function (Module) {
  var _Module$NS = Module.NS,
      APPLICATION_MEDIATOR = _Module$NS.APPLICATION_MEDIATOR,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method;
  Module.defineMixin(__filename$9, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("migrate", flowRuntime_umd.param("opts", flowRuntime_umd.object(flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("rollback", flowRuntime_umd.param("opts", flowRuntime_umd.object(flowRuntime_umd.property("steps", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      inherits(Mixin, _BaseClass);

      var _super = _createSuper$8(Mixin);

      function Mixin() {
        classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      createClass(Mixin, [{
        key: "migrate",
        value: function () {
          var _migrate = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(opts) {
            var _optsType, _returnType, appMediator;

            return regenerator.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _optsType = flowRuntime_umd.object(flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string())));
                    _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("opts", _optsType, true).assert(opts);
                    appMediator = this.facade.getMediator(APPLICATION_MEDIATOR);
                    _context.t0 = _returnType;
                    _context.next = 7;
                    return appMediator.migrate(opts);

                  case 7:
                    _context.t1 = _context.sent;
                    return _context.abrupt("return", _context.t0.assert.call(_context.t0, _context.t1));

                  case 9:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function migrate(_x) {
            return _migrate.apply(this, arguments);
          }

          return migrate;
        }()
      }, {
        key: "rollback",
        value: function () {
          var _rollback = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(opts) {
            var _optsType2, _returnType2, appMediator;

            return regenerator.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    _optsType2 = flowRuntime_umd.object(flowRuntime_umd.property("steps", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string())));
                    _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                    flowRuntime_umd.param("opts", _optsType2, true).assert(opts);
                    appMediator = this.facade.getMediator(APPLICATION_MEDIATOR);
                    _context2.t0 = _returnType2;
                    _context2.next = 7;
                    return appMediator.rollback(opts);

                  case 7:
                    _context2.t1 = _context2.sent;
                    return _context2.abrupt("return", _context2.t0.assert.call(_context2.t0, _context2.t1));

                  case 9:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function rollback(_x2) {
            return _rollback.apply(this, arguments);
          }

          return rollback;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), applyDecoratedDescriptor(_class2.prototype, "migrate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "migrate"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "rollback", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "rollback"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$a = '/mixins/OwnerableRecordMixin.js';

function _createSuper$9(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$9(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$9() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
var OwnerableRecordMixin = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      attribute = _Module$NS.attribute;
  Module.defineMixin(__filename$a, function (BaseClass) {
    var _dec, _class, _class2, _init, _descriptor, _class3, _temp;

    var Mixin = (_dec = attribute({
      type: 'string'
    }), initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      inherits(Mixin, _BaseClass);

      var _super = _createSuper$9(Mixin);

      function Mixin() {
        var _this;

        classCallCheck(this, Mixin);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        initializerDefineProperty(_this, "ownerId", _descriptor, assertThisInitialized(_this));

        return _this;
      }

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _descriptor = applyDecoratedDescriptor(_class2.prototype, "ownerId", [_dec], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    })), _class2)) || _class);
    return Mixin;
  });
});

var __filename$b = '/mixins/RelationsMixin.js';

// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
// import type { RecordStaticInterface } from '../interfaces/RecordStaticInterface';
var RelationInverseT = flowRuntime_umd.type("RelationInverseT", flowRuntime_umd.exactObject(flowRuntime_umd.property("recordClass", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd.property("attrName", flowRuntime_umd.string()), flowRuntime_umd.property("relation", flowRuntime_umd.string())));

function _createSuper$a(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$a(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$a() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var RelationInverseT$1 = flowRuntime_umd.tdz(function () {
  return RelationInverseT;
});
var RelationConfigT$5 = flowRuntime_umd.tdz(function () {
  return RelationConfigT;
});
var RelationsMixin = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method;
  Module.defineMixin(__filename$b, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("inverseFor", flowRuntime_umd.param("asAttrName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(RelationInverseT$1))), flowRuntime_umd.staticMethod("relations", flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref(RelationConfigT$5))))))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      inherits(Mixin, _BaseClass);

      var _super = _createSuper$a(Mixin);

      function Mixin() {
        classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      createClass(Mixin, null, [{
        key: "inverseFor",
        value: function inverseFor(asAttrName) {
          var _asAttrNameType = flowRuntime_umd.string();

          var _returnType = flowRuntime_umd["return"](flowRuntime_umd.ref(RelationInverseT$1));

          flowRuntime_umd.param("asAttrName", _asAttrNameType).assert(asAttrName);
          var opts = this.relations[asAttrName];
          var RecordClass = this.findRecordByName(opts.recordName.call(this));
          var attrName = opts.inverse;
          var relation = RecordClass.relations[attrName].relation;
          return _returnType.assert({
            recordClass: RecordClass,
            attrName: attrName,
            relation: relation
          });
        }
      }, {
        key: "relations",
        get: function get() {
          var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref(RelationConfigT$5))));

          return _returnType2.assert(this.metaObject.getGroup('relations', false));
        }
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), applyDecoratedDescriptor(_class2, "inverseFor", [method], Object.getOwnPropertyDescriptor(_class2, "inverseFor"), _class2), applyDecoratedDescriptor(_class2, "relations", [property], Object.getOwnPropertyDescriptor(_class2, "relations"), _class2)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$c = '/mixins/TimestampsRecordMixin.js';

function _createSuper$b(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$b(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$b() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var RecordInterface$6 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var TimestampsRecordMixin = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      attribute = _Module$NS.attribute,
      method = _Module$NS.method;
  Module.defineMixin(__filename$c, function (BaseClass) {
    var _dec, _dec2, _dec3, _dec4, _class, _class2, _init, _descriptor, _descriptor2, _descriptor3, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("createdAt", flowRuntime_umd.any()), flowRuntime_umd.property("updatedAt", flowRuntime_umd.any()), flowRuntime_umd.property("deletedAt", flowRuntime_umd.any()), flowRuntime_umd.method("beforeCreate", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("beforeUpdate", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("beforeDelete", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("touch", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$6)))))), _dec2 = attribute({
      type: 'date'
    }), _dec3 = attribute({
      type: 'date'
    }), _dec4 = attribute({
      type: 'date'
    }), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      inherits(Mixin, _BaseClass);

      var _super = _createSuper$b(Mixin);

      function Mixin() {
        var _this;

        classCallCheck(this, Mixin);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        initializerDefineProperty(_this, "createdAt", _descriptor, assertThisInitialized(_this));

        initializerDefineProperty(_this, "updatedAt", _descriptor2, assertThisInitialized(_this));

        initializerDefineProperty(_this, "deletedAt", _descriptor3, assertThisInitialized(_this));

        return _this;
      }

      createClass(Mixin, [{
        key: "beforeCreate",
        value: function () {
          var _beforeCreate = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
            var _get2;

            var _len2,
                args,
                _key2,
                now,
                _args = arguments;

            return regenerator.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    for (_len2 = _args.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                      args[_key2] = _args[_key2];
                    }

                    _context.next = 3;
                    return (_get2 = get(getPrototypeOf(Mixin.prototype), "beforeCreate", this)).call.apply(_get2, [this].concat(args));

                  case 3:
                    now = new Date();

                    if (this.createdAt == null) {
                      this.createdAt = now;
                    }

                    if (this.updatedAt == null) {
                      this.updatedAt = now;
                    }

                    return _context.abrupt("return", args);

                  case 7:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function beforeCreate() {
            return _beforeCreate.apply(this, arguments);
          }

          return beforeCreate;
        }()
      }, {
        key: "beforeUpdate",
        value: function () {
          var _beforeUpdate = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
            var _get3;

            var _len3,
                args,
                _key3,
                _args2 = arguments;

            return regenerator.wrap(function _callee2$(_context2) {
              while (1) {
                switch (_context2.prev = _context2.next) {
                  case 0:
                    for (_len3 = _args2.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                      args[_key3] = _args2[_key3];
                    }

                    _context2.next = 3;
                    return (_get3 = get(getPrototypeOf(Mixin.prototype), "beforeUpdate", this)).call.apply(_get3, [this].concat(args));

                  case 3:
                    this.updatedAt = new Date();
                    return _context2.abrupt("return", args);

                  case 5:
                  case "end":
                    return _context2.stop();
                }
              }
            }, _callee2, this);
          }));

          function beforeUpdate() {
            return _beforeUpdate.apply(this, arguments);
          }

          return beforeUpdate;
        }()
      }, {
        key: "beforeDelete",
        value: function () {
          var _beforeDelete = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
            var _get4;

            var _len4,
                args,
                _key4,
                now,
                _args3 = arguments;

            return regenerator.wrap(function _callee3$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    for (_len4 = _args3.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                      args[_key4] = _args3[_key4];
                    }

                    _context3.next = 3;
                    return (_get4 = get(getPrototypeOf(Mixin.prototype), "beforeDelete", this)).call.apply(_get4, [this].concat(args));

                  case 3:
                    now = new Date();
                    this.updatedAt = now;
                    this.deletedAt = now;
                    return _context3.abrupt("return", args);

                  case 7:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _callee3, this);
          }));

          function beforeDelete() {
            return _beforeDelete.apply(this, arguments);
          }

          return beforeDelete;
        }()
      }, {
        key: "touch",
        value: function () {
          var _touch = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
            var _returnType;

            return regenerator.wrap(function _callee4$(_context4) {
              while (1) {
                switch (_context4.prev = _context4.next) {
                  case 0:
                    _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$6), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$6))));
                    this.updatedAt = new Date();
                    _context4.t0 = _returnType;
                    _context4.next = 5;
                    return this.save();

                  case 5:
                    _context4.t1 = _context4.sent;
                    return _context4.abrupt("return", _context4.t0.assert.call(_context4.t0, _context4.t1));

                  case 7:
                  case "end":
                    return _context4.stop();
                }
              }
            }, _callee4, this);
          }));

          function touch() {
            return _touch.apply(this, arguments);
          }

          return touch;
        }()
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _descriptor = applyDecoratedDescriptor(_class2.prototype, "createdAt", [_dec2], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor2 = applyDecoratedDescriptor(_class2.prototype, "updatedAt", [_dec3], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), _descriptor3 = applyDecoratedDescriptor(_class2.prototype, "deletedAt", [_dec4], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return null;
      }
    }), applyDecoratedDescriptor(_class2.prototype, "beforeCreate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "beforeCreate"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "beforeUpdate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "beforeUpdate"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "beforeDelete", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "beforeDelete"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "touch", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "touch"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$d = '/mixins/MapperFacadeMixin.js';

function _createSuper$c(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$c(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$c() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
var MapperFacadeMixin = (function (Module) {
  var _Module$NS = Module.NS,
      HTTP_ADAPTER = _Module$NS.HTTP_ADAPTER,
      HTTP_SERIALIZER = _Module$NS.HTTP_SERIALIZER,
      SERIALIZER = _Module$NS.SERIALIZER,
      MEMORY_ADAPTER = _Module$NS.MEMORY_ADAPTER,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      _ = _Module$NS.Utils._;
  Module.defineMixin(__filename$d, function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("initializeFacade", flowRuntime_umd["return"](flowRuntime_umd["void"]())))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      inherits(Mixin, _BaseClass);

      var _super = _createSuper$c(Mixin);

      function Mixin() {
        classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      createClass(Mixin, [{
        key: "initializeFacade",
        value: function initializeFacade() {
          var _this = this;

          var _returnType = flowRuntime_umd["return"](flowRuntime_umd["void"]());

          get(getPrototypeOf(Mixin.prototype), "initializeFacade", this).apply(this, arguments);

          if (!this.isBound('CollectionFactory<*>')) {
            this.bind('CollectionFactory<*>').toFactory(function (context) {
              return flowRuntime_umd.annotate(function (collectionName) {
                var _collectionNameType = flowRuntime_umd.string();

                flowRuntime_umd.param("collectionName", _collectionNameType).assert(collectionName);
                return _this.get("Factory<".concat(collectionName, ">"))();
              }, flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string())));
            });
          }

          if (!this.isBound(SERIALIZER)) {
            this.bind(SERIALIZER).to(this.Module.NS.Serializer);
          }

          if (!this.isBound('SerializerFactory<*>')) {
            this.bind('SerializerFactory<*>').toFactory(function (context) {
              return flowRuntime_umd.annotate(function (name) {
                var customSerializer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SERIALIZER;

                var _nameType = flowRuntime_umd.string();

                var _customSerializerType = flowRuntime_umd.nullable(flowRuntime_umd.string());

                flowRuntime_umd.param("name", _nameType).assert(name);
                flowRuntime_umd.param("customSerializer", _customSerializerType).assert(customSerializer);

                var serializer = _this.get(customSerializer);

                serializer.collectionName = name;
                return serializer;
              }, flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("customSerializer", flowRuntime_umd.nullable(flowRuntime_umd.string()))));
            });
          }

          if (!this.isBound('Objectizer')) {
            this.bind('Objectizer').to(this.Module.NS.Objectizer);
          }

          if (!this.isBound('ObjectizerFactory<*>')) {
            this.bind('ObjectizerFactory<*>').toFactory(function (context) {
              return flowRuntime_umd.annotate(function (name) {
                var customObjectizer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'Objectizer';

                var _nameType2 = flowRuntime_umd.string();

                var _customObjectizerType = flowRuntime_umd.nullable(flowRuntime_umd.string());

                flowRuntime_umd.param("name", _nameType2).assert(name);
                flowRuntime_umd.param("customObjectizer", _customObjectizerType).assert(customObjectizer);

                var objectizer = _this.get(customObjectizer);

                objectizer.collectionName = name;
                return objectizer;
              }, flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("customObjectizer", flowRuntime_umd.nullable(flowRuntime_umd.string()))));
            });
          }

          if (!this.isBound('RecordNewable<*>')) {
            this.bind('RecordNewable<*>').toFactory(function (context) {
              return flowRuntime_umd.annotate(function (delegate) {
                var _delegateType = flowRuntime_umd.string();

                flowRuntime_umd.param("delegate", _delegateType).assert(delegate);

                if (!_this.isBound("Newable<".concat(delegate, ">"))) {
                  var RecordClass = _this.ApplicationModule.NS[delegate];

                  _this.bind("Newable<".concat(delegate, ">")).toConstructor(RecordClass);
                }

                return _this.get("Newable<".concat(delegate, ">"));
              }, flowRuntime_umd["function"](flowRuntime_umd.param("delegate", flowRuntime_umd.string())));
            });
          }

          if (!this.isBound('RecordFactory<*>')) {
            this.bind('RecordFactory<*>').toFactory(function (context) {
              return flowRuntime_umd.annotate(function (recordClass, payload, collectionName) {
                var _recordClassType = flowRuntime_umd.string();

                var _payloadType = flowRuntime_umd.ref("object");

                var _collectionNameType2 = flowRuntime_umd.string();

                flowRuntime_umd.param("recordClass", _recordClassType).assert(recordClass);
                flowRuntime_umd.param("payload", _payloadType).assert(payload);
                flowRuntime_umd.param("collectionName", _collectionNameType2).assert(collectionName);

                var RecordClass = _this.get('RecordNewable<*>')(recordClass);

                var collection = _this.get('CollectionFactory<*>')(collectionName); // payload._container = this._container;
                // return RecordClass.new(payload, collection);


                var record = RecordClass["new"](payload, collection);
                Reflect.defineProperty(record, '_container', {
                  configurable: true,
                  enumerable: true,
                  get: function get() {
                    return _this._container;
                  }
                });
                return record;
              }, flowRuntime_umd["function"](flowRuntime_umd.param("recordClass", flowRuntime_umd.string()), flowRuntime_umd.param("payload", flowRuntime_umd.ref("object")), flowRuntime_umd.param("collectionName", flowRuntime_umd.string())));
            });
          }

          if (!this.isBound('Cursor')) {
            this.bind('Cursor').to(this.Module.NS.Cursor);
          }

          if (!this.isBound('CursorFactory<*>')) {
            this.bind('CursorFactory<*>').toFactory(function (context) {
              return flowRuntime_umd.annotate(function (name, list) {
                var customCursor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'Cursor';

                var _nameType3 = flowRuntime_umd.nullable(flowRuntime_umd.string());

                var _customCursorType = flowRuntime_umd.nullable(flowRuntime_umd.string());

                flowRuntime_umd.param("name", _nameType3).assert(name);
                flowRuntime_umd.param("customCursor", _customCursorType).assert(customCursor);

                var cursor = _this.get(customCursor);

                cursor.collectionName = name;
                cursor.setIterable(list);
                return cursor;
              }, flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("list", flowRuntime_umd.any()), flowRuntime_umd.param("customCursor", flowRuntime_umd.nullable(flowRuntime_umd.string()))));
            });
          }

          this.addAdapter(MEMORY_ADAPTER, 'MemoryAdapter');
          this.addAdapter(HTTP_ADAPTER, 'HttpAdapter');

          if (!this.isBound('AdapterFactory<*>')) {
            this.bind('AdapterFactory<*>').toFactory(function (context) {
              return flowRuntime_umd.annotate(function (name) {
                var customAdapter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MEMORY_ADAPTER;

                var _nameType4 = flowRuntime_umd.nullable(flowRuntime_umd.string());

                var _customAdapterType = flowRuntime_umd.nullable(flowRuntime_umd.string());

                flowRuntime_umd.param("name", _nameType4).assert(name);
                flowRuntime_umd.param("customAdapter", _customAdapterType).assert(customAdapter);
                return _this.get("Factory<".concat(customAdapter, ">"))();
              }, flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("customAdapter", flowRuntime_umd.nullable(flowRuntime_umd.string()))));
            });
          }
        }
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), applyDecoratedDescriptor(_class2.prototype, "initializeFacade", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "initializeFacade"), _class2.prototype)), _class2)) || _class) || _class);
    return Mixin;
  });
});

var __filename$e = '/transforms/ArrayTransform.js';

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$1(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$1(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen); }

function _arrayLikeToArray$1(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper$d(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$d(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$d() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var JoiT$5 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var ArrayTransform = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi,
      moment = _Module$NS$Utils.moment;
  var ArrayTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("ArrayTransform", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$5))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("normalizeSync", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.array())), flowRuntime_umd["return"](flowRuntime_umd.array())), flowRuntime_umd.staticMethod("serializeSync", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.array())), flowRuntime_umd["return"](flowRuntime_umd.array())), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.array())), flowRuntime_umd["return"](flowRuntime_umd.array())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    inherits(ArrayTransform, _CoreObject);

    var _super = _createSuper$d(ArrayTransform);

    function ArrayTransform() {
      classCallCheck(this, ArrayTransform);

      return _super.apply(this, arguments);
    }

    createClass(ArrayTransform, null, [{
      key: "normalize",
      value: function () {
        var _normalize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var _args = arguments;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.normalizeSync.apply(this, _args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize() {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          var _args2 = arguments;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.serializeSync.apply(this, _args2));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize() {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "normalizeSync",
      value: function normalizeSync(serialized) {
        var _serializedType = flowRuntime_umd.nullable(flowRuntime_umd.array());

        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.array());

        flowRuntime_umd.param("serialized", _serializedType).assert(serialized);

        if (serialized == null) {
          return _returnType2.assert([]);
        }

        var result = [];

        var _iterator = _createForOfIteratorHelper(serialized),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var item = _step.value;

            switch (false) {
              case !(_.isString(item) && moment(item, moment.ISO_8601).isValid()):
                result.push(Module.NS.DateTransform.normalizeSync(item));
                break;

              case !_.isString(item):
                result.push(Module.NS.StringTransform.normalizeSync(item));
                break;

              case !_.isNumber(item):
                result.push(Module.NS.NumberTransform.normalizeSync(item));
                break;

              case !_.isBoolean(item):
                result.push(Module.NS.BooleanTransform.normalizeSync(item));
                break;

              case !_.isPlainObject(item):
                result.push(Module.NS.ObjectTransform.normalizeSync(item));
                break;

              case !_.isArray(item):
                result.push(Module.NS.ArrayTransform.normalizeSync(item));
                break;

              default:
                result.push(Module.NS.Transform.normalizeSync(item));
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return _returnType2.assert(result);
      }
    }, {
      key: "serializeSync",
      value: function serializeSync(deserialized) {
        var _deserializedType = flowRuntime_umd.nullable(flowRuntime_umd.array());

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.array());

        flowRuntime_umd.param("deserialized", _deserializedType).assert(deserialized);

        if (deserialized == null) {
          return _returnType3.assert([]);
        }

        var result = [];

        var _iterator2 = _createForOfIteratorHelper(deserialized),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var item = _step2.value;

            switch (false) {
              case !_.isString(item):
                result.push(Module.NS.StringTransform.serializeSync(item));
                break;

              case !_.isNumber(item):
                result.push(Module.NS.NumberTransform.serializeSync(item));
                break;

              case !_.isBoolean(item):
                result.push(Module.NS.BooleanTransform.serializeSync(item));
                break;

              case !_.isDate(item):
                result.push(Module.NS.DateTransform.serializeSync(item));
                break;

              case !_.isPlainObject(item):
                result.push(Module.NS.ObjectTransform.serializeSync(item));
                break;

              case !_.isArray(item):
                result.push(Module.NS.ArrayTransform.serializeSync(item));
                break;

              default:
                result.push(Module.NS.Transform.serializeSync(item));
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }

        return _returnType3.assert(result);
      }
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        var _deserializedType2 = flowRuntime_umd.nullable(flowRuntime_umd.array());

        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.array());

        flowRuntime_umd.param("deserialized", _deserializedType2).assert(deserialized);

        if (deserialized == null) {
          return _returnType4.assert([]);
        }

        var result = [];

        var _iterator3 = _createForOfIteratorHelper(deserialized),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var item = _step3.value;

            switch (false) {
              case !_.isString(item):
                result.push(Module.NS.StringTransform.objectize(item));
                break;

              case !_.isNumber(item):
                result.push(Module.NS.NumberTransform.objectize(item));
                break;

              case !_.isBoolean(item):
                result.push(Module.NS.BooleanTransform.objectize(item));
                break;

              case !_.isDate(item):
                result.push(Module.NS.DateTransform.objectize(item));
                break;

              case !_.isPlainObject(item):
                result.push(Module.NS.ObjectTransform.objectize(item));
                break;

              case !_.isArray(item):
                result.push(Module.NS.ArrayTransform.objectize(item));
                break;

              default:
                result.push(Module.NS.Transform.objectize(item));
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return _returnType4.assert(result);
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "schema",
      get: function get() {
        var _returnType = flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$5));

        return _returnType.assert(joi.array().items(joi.any()).allow(null).optional());
      }
    }]);

    return ArrayTransform;
  }(CoreObject), _class3.__filename = __filename$e, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), applyDecoratedDescriptor(_class2, "normalizeSync", [method], Object.getOwnPropertyDescriptor(_class2, "normalizeSync"), _class2), applyDecoratedDescriptor(_class2, "serializeSync", [method], Object.getOwnPropertyDescriptor(_class2, "serializeSync"), _class2), applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$f = '/transforms/BooleanTransform.js';

function _createSuper$e(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$e(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$e() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var JoiT$6 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var BooleanTransform = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi;
  var BooleanTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("BooleanTransform", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$6))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("normalizeSync", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.staticMethod("serializeSync", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd["boolean"]())), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    inherits(BooleanTransform, _CoreObject);

    var _super = _createSuper$e(BooleanTransform);

    function BooleanTransform() {
      classCallCheck(this, BooleanTransform);

      return _super.apply(this, arguments);
    }

    createClass(BooleanTransform, null, [{
      key: "normalize",
      value: function () {
        var _normalize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var _args = arguments;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.normalizeSync.apply(this, _args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize() {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          var _args2 = arguments;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.serializeSync.apply(this, _args2));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize() {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "normalizeSync",
      value: function normalizeSync(serialized) {
        var _serializedType = flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.string(), flowRuntime_umd.number()));

        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("serialized", _serializedType).assert(serialized);
        var type;
        type = _typeof_1(serialized);

        if (type === "boolean") {
          return _returnType2.assert(serialized);
        } else if (type === "string") {
          return _returnType2.assert(serialized.match(/^true$|^t$|^1$/i) !== null);
        } else if (type === "number") {
          return _returnType2.assert(serialized === 1);
        } else {
          return _returnType2.assert(false);
        }
      }
    }, {
      key: "serializeSync",
      value: function serializeSync(deserialized) {
        var _deserializedType = flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.string(), flowRuntime_umd.number()));

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("deserialized", _deserializedType).assert(deserialized);
        return _returnType3.assert(Boolean(deserialized));
      }
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        var _deserializedType2 = flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.string(), flowRuntime_umd.number()));

        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd["boolean"]());

        flowRuntime_umd.param("deserialized", _deserializedType2).assert(deserialized);
        return _returnType4.assert(Boolean(deserialized));
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "schema",
      get: function get() {
        var _returnType = flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$6));

        return _returnType.assert(joi["boolean"]().allow(null).optional());
      }
    }]);

    return BooleanTransform;
  }(CoreObject), _class3.__filename = __filename$f, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), applyDecoratedDescriptor(_class2, "normalizeSync", [method], Object.getOwnPropertyDescriptor(_class2, "normalizeSync"), _class2), applyDecoratedDescriptor(_class2, "serializeSync", [method], Object.getOwnPropertyDescriptor(_class2, "serializeSync"), _class2), applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$g = '/transforms/DateTransform.js';

function _createSuper$f(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$f(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$f() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var JoiT$7 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var DateTransform = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi,
      assert = _Module$NS$Utils.assert;
  var DateTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("DateTransform", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$7))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("normalizeSync", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number(), flowRuntime_umd.ref("date")))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("date")))), flowRuntime_umd.staticMethod("serializeSync", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.ref("date"))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number(), flowRuntime_umd.ref("date"))))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.ref("date"))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    inherits(DateTransform, _CoreObject);

    var _super = _createSuper$f(DateTransform);

    function DateTransform() {
      classCallCheck(this, DateTransform);

      return _super.apply(this, arguments);
    }

    createClass(DateTransform, null, [{
      key: "normalize",
      value: function () {
        var _normalize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var _args = arguments;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.normalizeSync.apply(this, _args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize() {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          var _args2 = arguments;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.serializeSync.apply(this, _args2));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize() {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "normalizeSync",
      value: function normalizeSync(serialized) {
        var _serializedType = flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number(), flowRuntime_umd.ref("date")));

        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("date")));

        flowRuntime_umd.param("serialized", _serializedType).assert(serialized);
        if (_.isString(serialized)) joi.string().isoDate().validate(serialized);
        return _returnType2.assert(_.isNil(serialized) ? null : new Date(serialized));
      }
    }, {
      key: "serializeSync",
      value: function serializeSync(deserialized) {
        var _deserializedType = flowRuntime_umd.nullable(flowRuntime_umd.ref("date"));

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number(), flowRuntime_umd.ref("date"))));

        flowRuntime_umd.param("deserialized", _deserializedType).assert(deserialized);

        if (_.isDate(deserialized) && !_.isNaN(deserialized)) {
          return _returnType3.assert(deserialized.toISOString());
        } else {
          return _returnType3.assert(null);
        }
      }
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        var _deserializedType2 = flowRuntime_umd.nullable(flowRuntime_umd.ref("date"));

        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()));

        flowRuntime_umd.param("deserialized", _deserializedType2).assert(deserialized);

        if (_.isDate(deserialized) && !_.isNaN(deserialized)) {
          return _returnType4.assert(deserialized.toISOString());
        } else {
          return _returnType4.assert(null);
        }
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "schema",
      get: function get() {
        var _returnType = flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$7));

        return _returnType.assert(joi.date().iso().allow(null).optional());
      }
    }]);

    return DateTransform;
  }(CoreObject), _class3.__filename = __filename$g, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), applyDecoratedDescriptor(_class2, "normalizeSync", [method], Object.getOwnPropertyDescriptor(_class2, "normalizeSync"), _class2), applyDecoratedDescriptor(_class2, "serializeSync", [method], Object.getOwnPropertyDescriptor(_class2, "serializeSync"), _class2), applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$h = '/transforms/NumberTransform.js';

function _createSuper$g(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$g(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$g() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var JoiT$8 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var NumberTransform = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi;
  var NumberTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("NumberTransform", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$8))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("normalizeSync", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.number()))), flowRuntime_umd.staticMethod("serializeSync", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.number()))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.number()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    inherits(NumberTransform, _CoreObject);

    var _super = _createSuper$g(NumberTransform);

    function NumberTransform() {
      classCallCheck(this, NumberTransform);

      return _super.apply(this, arguments);
    }

    createClass(NumberTransform, null, [{
      key: "normalize",
      value: function () {
        var _normalize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var _args = arguments;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.normalizeSync.apply(this, _args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize() {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          var _args2 = arguments;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.serializeSync.apply(this, _args2));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize() {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "normalizeSync",
      value: function normalizeSync(serialized) {
        var _serializedType = flowRuntime_umd.nullable(flowRuntime_umd.number());

        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.number()));

        flowRuntime_umd.param("serialized", _serializedType).assert(serialized);

        if (_.isNil(serialized)) {
          return _returnType2.assert(null);
        } else {
          var transformed = Number(serialized);
          return _returnType2.assert(_.isNumber(transformed) ? transformed : null);
        }
      }
    }, {
      key: "serializeSync",
      value: function serializeSync(deserialized) {
        var _deserializedType = flowRuntime_umd.nullable(flowRuntime_umd.number());

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.number()));

        flowRuntime_umd.param("deserialized", _deserializedType).assert(deserialized);

        if (_.isNil(deserialized)) {
          return _returnType3.assert(null);
        } else {
          var transformed = Number(deserialized);
          return _returnType3.assert(_.isNumber(transformed) ? transformed : null);
        }
      }
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        var _deserializedType2 = flowRuntime_umd.nullable(flowRuntime_umd.number());

        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.number()));

        flowRuntime_umd.param("deserialized", _deserializedType2).assert(deserialized);

        if (_.isNil(deserialized)) {
          return _returnType4.assert(null);
        } else {
          var transformed = Number(deserialized);

          if (_.isNumber(transformed)) {
            return _returnType4.assert(transformed);
          } else {
            return _returnType4.assert(null);
          }
        }
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "schema",
      get: function get() {
        var _returnType = flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$8));

        return _returnType.assert(joi.number().allow(null).optional());
      }
    }]);

    return NumberTransform;
  }(CoreObject), _class3.__filename = __filename$h, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), applyDecoratedDescriptor(_class2, "normalizeSync", [method], Object.getOwnPropertyDescriptor(_class2, "normalizeSync"), _class2), applyDecoratedDescriptor(_class2, "serializeSync", [method], Object.getOwnPropertyDescriptor(_class2, "serializeSync"), _class2), applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$i = '/transforms/ObjectTransform.js';

function _createSuper$h(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$h(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$h() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var JoiT$9 = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var hasProp$2 = {}.hasOwnProperty;
var ObjectTransform = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi,
      moment = _Module$NS$Utils.moment;
  var ObjectTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("ObjectTransform", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$9))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("normalizeSync", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.staticMethod("serializeSync", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    inherits(ObjectTransform, _CoreObject);

    var _super = _createSuper$h(ObjectTransform);

    function ObjectTransform() {
      classCallCheck(this, ObjectTransform);

      return _super.apply(this, arguments);
    }

    createClass(ObjectTransform, null, [{
      key: "normalize",
      value: function () {
        var _normalize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var _args = arguments;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.normalizeSync.apply(this, _args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize() {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          var _args2 = arguments;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.serializeSync.apply(this, _args2));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize() {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "normalizeSync",
      value: function normalizeSync(serialized) {
        var _serializedType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.ref("object"));

        flowRuntime_umd.param("serialized", _serializedType).assert(serialized);

        if (serialized == null) {
          return _returnType2.assert({});
        }

        var result = {};

        var _loop = function _loop(key) {
          if (!hasProp$2.call(serialized, key)) return "continue";
          var value = serialized[key];

          result[key] = function () {
            switch (false) {
              case !(_.isString(value) && moment(value, moment.ISO_8601).isValid()):
                return Module.NS.DateTransform.normalizeSync(value);

              case !_.isString(value):
                return Module.NS.StringTransform.normalizeSync(value);

              case !_.isNumber(value):
                return Module.NS.NumberTransform.normalizeSync(value);

              case !_.isBoolean(value):
                return Module.NS.BooleanTransform.normalizeSync(value);

              case !_.isPlainObject(value):
                return Module.NS.ObjectTransform.normalizeSync(value);

              case !_.isArray(value):
                return Module.NS.ArrayTransform.normalizeSync(value);

              default:
                return Module.NS.Transform.normalizeSync(value);
            }
          }();
        };

        for (var key in serialized) {
          var _ret = _loop(key);

          if (_ret === "continue") continue;
        }

        return _returnType2.assert(result);
      }
    }, {
      key: "serializeSync",
      value: function serializeSync(deserialized) {
        var _deserializedType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.ref("object"));

        flowRuntime_umd.param("deserialized", _deserializedType).assert(deserialized);

        if (deserialized == null) {
          return _returnType3.assert({});
        }

        var result = {};

        var _loop2 = function _loop2(key) {
          if (!hasProp$2.call(deserialized, key)) return "continue";
          var value = deserialized[key];

          result[key] = function () {
            switch (false) {
              case !_.isString(value):
                return Module.NS.StringTransform.serializeSync(value);

              case !_.isNumber(value):
                return Module.NS.NumberTransform.serializeSync(value);

              case !_.isBoolean(value):
                return Module.NS.BooleanTransform.serializeSync(value);

              case !_.isDate(value):
                return Module.NS.DateTransform.serializeSync(value);

              case !_.isPlainObject(value):
                return Module.NS.ObjectTransform.serializeSync(value);

              case !_.isArray(value):
                return Module.NS.ArrayTransform.serializeSync(value);

              default:
                return Module.NS.Transform.serializeSync(value);
            }
          }();
        };

        for (var key in deserialized) {
          var _ret2 = _loop2(key);

          if (_ret2 === "continue") continue;
        }

        return _returnType3.assert(result);
      }
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        var _deserializedType2 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.ref("object"));

        flowRuntime_umd.param("deserialized", _deserializedType2).assert(deserialized);

        if (deserialized == null) {
          return _returnType4.assert({});
        }

        var result = {};

        var _loop3 = function _loop3(key) {
          if (!hasProp$2.call(deserialized, key)) return "continue";
          var value = deserialized[key];

          result[key] = function () {
            switch (false) {
              case !_.isString(value):
                return Module.NS.StringTransform.objectize(value);

              case !_.isNumber(value):
                return Module.NS.NumberTransform.objectize(value);

              case !_.isBoolean(value):
                return Module.NS.BooleanTransform.objectize(value);

              case !_.isDate(value):
                return Module.NS.DateTransform.objectize(value);

              case !_.isPlainObject(value):
                return Module.NS.ObjectTransform.objectize(value);

              case !_.isArray(value):
                return Module.NS.ArrayTransform.objectize(value);

              default:
                return Module.NS.Transform.objectize(value);
            }
          }();
        };

        for (var key in deserialized) {
          var _ret3 = _loop3(key);

          if (_ret3 === "continue") continue;
        }

        return _returnType4.assert(result);
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "schema",
      get: function get() {
        var _returnType = flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$9));

        return _returnType.assert(joi.object().allow(null).optional());
      }
    }]);

    return ObjectTransform;
  }(CoreObject), _class3.__filename = __filename$i, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), applyDecoratedDescriptor(_class2, "normalizeSync", [method], Object.getOwnPropertyDescriptor(_class2, "normalizeSync"), _class2), applyDecoratedDescriptor(_class2, "serializeSync", [method], Object.getOwnPropertyDescriptor(_class2, "serializeSync"), _class2), applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$j = '/transforms/PrimaryKeyTransform.js';

function _createSuper$i(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$i(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$i() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var JoiT$a = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var PrimaryKeyTransform = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi;
  var PrimaryKeyTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("PrimaryKeyTransform", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$a))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("normalizeSync", flowRuntime_umd.param("serialized", flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number()))), flowRuntime_umd.staticMethod("serializeSync", flowRuntime_umd.param("deserialized", flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number()))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    inherits(PrimaryKeyTransform, _CoreObject);

    var _super = _createSuper$i(PrimaryKeyTransform);

    function PrimaryKeyTransform() {
      classCallCheck(this, PrimaryKeyTransform);

      return _super.apply(this, arguments);
    }

    createClass(PrimaryKeyTransform, null, [{
      key: "normalize",
      value: function () {
        var _normalize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var _args = arguments;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.normalizeSync.apply(this, _args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize() {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          var _args2 = arguments;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.serializeSync.apply(this, _args2));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize() {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "normalizeSync",
      value: function normalizeSync(serialized) {
        var _serializedType = flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number());

        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number()));

        flowRuntime_umd.param("serialized", _serializedType).assert(serialized);
        return _returnType2.assert(_.isNil(serialized) ? null : serialized);
      }
    }, {
      key: "serializeSync",
      value: function serializeSync(deserialized) {
        var _deserializedType = flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number());

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number()));

        flowRuntime_umd.param("deserialized", _deserializedType).assert(deserialized);
        return _returnType3.assert(_.isNil(deserialized) ? null : deserialized);
      }
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        var _deserializedType2 = flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number());

        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.string()), flowRuntime_umd.number()));

        flowRuntime_umd.param("deserialized", _deserializedType2).assert(deserialized);

        if (_.isNil(deserialized)) {
          return _returnType4.assert(null);
        } else {
          return _returnType4.assert(deserialized);
        }
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "schema",
      get: function get() {
        var _returnType = flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$a));

        return _returnType.assert(joi.alternatives()["try"](joi.number(), joi.string()).allow(null).optional());
      }
    }]);

    return PrimaryKeyTransform;
  }(CoreObject), _class3.__filename = __filename$j, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), applyDecoratedDescriptor(_class2, "normalizeSync", [method], Object.getOwnPropertyDescriptor(_class2, "normalizeSync"), _class2), applyDecoratedDescriptor(_class2, "serializeSync", [method], Object.getOwnPropertyDescriptor(_class2, "serializeSync"), _class2), applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$k = '/transforms/StringTransform.js';

function _createSuper$j(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$j(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$j() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var JoiT$b = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var StringTransform = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi;
  var StringTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("StringTransform", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$b))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("normalizeSync", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.staticMethod("serializeSync", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    inherits(StringTransform, _CoreObject);

    var _super = _createSuper$j(StringTransform);

    function StringTransform() {
      classCallCheck(this, StringTransform);

      return _super.apply(this, arguments);
    }

    createClass(StringTransform, null, [{
      key: "normalize",
      value: function () {
        var _normalize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var _args = arguments;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.normalizeSync.apply(this, _args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize() {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          var _args2 = arguments;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.serializeSync.apply(this, _args2));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize() {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "normalizeSync",
      value: function normalizeSync(serialized) {
        var _serializedType = flowRuntime_umd.nullable(flowRuntime_umd.string());

        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()));

        flowRuntime_umd.param("serialized", _serializedType).assert(serialized);
        return _returnType2.assert(_.isNil(serialized) ? null : String(serialized));
      }
    }, {
      key: "serializeSync",
      value: function serializeSync(deserialized) {
        var _deserializedType = flowRuntime_umd.nullable(flowRuntime_umd.string());

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()));

        flowRuntime_umd.param("deserialized", _deserializedType).assert(deserialized);
        return _returnType3.assert(_.isNil(deserialized) ? null : String(deserialized));
      }
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        var _deserializedType2 = flowRuntime_umd.nullable(flowRuntime_umd.string());

        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.string()));

        flowRuntime_umd.param("deserialized", _deserializedType2).assert(deserialized);

        if (_.isNil(deserialized)) {
          return _returnType4.assert(null);
        } else {
          return _returnType4.assert(String(deserialized));
        }
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "schema",
      get: function get() {
        var _returnType = flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$b));

        return _returnType.assert(joi.string().allow(null).optional());
      }
    }]);

    return StringTransform;
  }(CoreObject), _class3.__filename = __filename$k, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), applyDecoratedDescriptor(_class2, "normalizeSync", [method], Object.getOwnPropertyDescriptor(_class2, "normalizeSync"), _class2), applyDecoratedDescriptor(_class2, "serializeSync", [method], Object.getOwnPropertyDescriptor(_class2, "serializeSync"), _class2), applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$l = '/transforms/ComplexArrayTransform.js';

function _createForOfIteratorHelper$1(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen); }

function _arrayLikeToArray$2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper$k(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$k(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$k() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var JoiT$c = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var ComplexArrayTransform = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      ArrayTransform = _Module$NS.ArrayTransform,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect,
      moment = _Module$NS$Utils.moment;
  var ComplexArrayTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("ComplexArrayTransform", flowRuntime_umd["extends"](ArrayTransform), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("parseRecordName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.string()))), flowRuntime_umd.staticMethod("findRecordByName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.array())), flowRuntime_umd["return"](flowRuntime_umd.array())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.array())), flowRuntime_umd["return"](flowRuntime_umd.array())), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.array())), flowRuntime_umd["return"](flowRuntime_umd.array())))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_ArrayTransform) {
    inherits(ComplexArrayTransform, _ArrayTransform);

    var _super = _createSuper$k(ComplexArrayTransform);

    function ComplexArrayTransform() {
      classCallCheck(this, ComplexArrayTransform);

      return _super.apply(this, arguments);
    }

    createClass(ComplexArrayTransform, null, [{
      key: "parseRecordName",
      value: function parseRecordName(asName) {
        var _asNameType = flowRuntime_umd.string();

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.string()));

        flowRuntime_umd.param("asName", _asNameType).assert(asName);
        var vsModuleName, vsRecordName;

        if (/.*[:][:].*/.test(asName)) {
          var _asName$split = asName.split('::');

          var _asName$split2 = slicedToArray(_asName$split, 2);

          vsModuleName = _asName$split2[0];
          vsRecordName = _asName$split2[1];
        } else {
          var _ref = [this.moduleName(), inflect.camelize(inflect.underscore(inflect.singularize(asName)))];
          vsModuleName = _ref[0];
          vsRecordName = _ref[1];
        }

        if (!/(Record$)|(Migration$)/.test(vsRecordName)) {
          vsRecordName += 'Record';
        }

        return _returnType3.assert([vsModuleName, vsRecordName]);
      } // @method static findRecordByName(asName: string): RecordStaticInterface {

    }, {
      key: "findRecordByName",
      value: function findRecordByName(asName) {
        var _asNameType2 = flowRuntime_umd.string();

        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()));

        flowRuntime_umd.param("asName", _asNameType2).assert(asName);

        var _this$parseRecordName = this.parseRecordName(asName),
            _this$parseRecordName2 = slicedToArray(_this$parseRecordName, 2),
            vsModuleName = _this$parseRecordName2[0],
            vsRecordName = _this$parseRecordName2[1];

        return _returnType4.assert(this.Module.NS[vsRecordName]);
      }
    }, {
      key: "normalize",
      value: function () {
        var _normalize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(serialized) {
          var _serializedType, _returnType, result, _iterator, _step, item, RecordClass, _yield$RecordClass$no, _yield$RecordClass$no2, bh, normalized;

          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _serializedType = flowRuntime_umd.nullable(flowRuntime_umd.array());
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.mixed());
                  flowRuntime_umd.param("serialized", _serializedType).assert(serialized);

                  if (!(serialized == null)) {
                    _context.next = 5;
                    break;
                  }

                  return _context.abrupt("return", _returnType.assert([]));

                case 5:
                  result = [];
                  _iterator = _createForOfIteratorHelper$1(serialized);
                  _context.prev = 7;

                  _iterator.s();

                case 9:
                  if ((_step = _iterator.n()).done) {
                    _context.next = 46;
                    break;
                  }

                  item = _step.value;
                  _context.t0 = false;
                  _context.next = _context.t0 === !(_.isString(item) && moment(item, moment.ISO_8601).isValid()) ? 14 : _context.t0 === !_.isString(item) ? 16 : _context.t0 === !_.isNumber(item) ? 18 : _context.t0 === !_.isBoolean(item) ? 20 : _context.t0 === !(_.isPlainObject(item) && /.{2,}[:][:].{2,}/.test(item.type)) ? 22 : _context.t0 === !_.isPlainObject(item) ? 31 : _context.t0 === !_.isArray(item) ? 37 : 43;
                  break;

                case 14:
                  result.push(Module.NS.DateTransform.normalizeSync(item));
                  return _context.abrupt("break", 44);

                case 16:
                  result.push(Module.NS.StringTransform.normalizeSync(item));
                  return _context.abrupt("break", 44);

                case 18:
                  result.push(Module.NS.NumberTransform.normalizeSync(item));
                  return _context.abrupt("break", 44);

                case 20:
                  result.push(Module.NS.BooleanTransform.normalizeSync(item));
                  return _context.abrupt("break", 44);

                case 22:
                  RecordClass = this.findRecordByName(item.type); // NOTE: в правильном использовании вторым аргументом должна передаваться ссылка на коллекцию, то тут мы не можем ее получить
                  // а так как рекорды в этом случае используются ТОЛЬКО для оформления структуры и хранения данных внутри родительского рекорда, то коллекции физически просто нет.

                  _context.next = 25;
                  return RecordClass.normalize(item);

                case 25:
                  _yield$RecordClass$no = _context.sent;
                  _yield$RecordClass$no2 = slicedToArray(_yield$RecordClass$no, 2);
                  bh = _yield$RecordClass$no2[0];
                  normalized = _yield$RecordClass$no2[1];
                  // result.push(await RecordClass.normalize(item));
                  result.push(RecordClass["new"](normalized));
                  return _context.abrupt("break", 44);

                case 31:
                  _context.t1 = result;
                  _context.next = 34;
                  return Module.NS.ComplexObjectTransform.normalize(item);

                case 34:
                  _context.t2 = _context.sent;

                  _context.t1.push.call(_context.t1, _context.t2);

                  return _context.abrupt("break", 44);

                case 37:
                  _context.t3 = result;
                  _context.next = 40;
                  return Module.NS.ComplexArrayTransform.normalize(item);

                case 40:
                  _context.t4 = _context.sent;

                  _context.t3.push.call(_context.t3, _context.t4);

                  return _context.abrupt("break", 44);

                case 43:
                  result.push(Module.NS.Transform.normalizeSync(item));

                case 44:
                  _context.next = 9;
                  break;

                case 46:
                  _context.next = 51;
                  break;

                case 48:
                  _context.prev = 48;
                  _context.t5 = _context["catch"](7);

                  _iterator.e(_context.t5);

                case 51:
                  _context.prev = 51;

                  _iterator.f();

                  return _context.finish(51);

                case 54:
                  return _context.abrupt("return", _returnType.assert(result));

                case 55:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this, [[7, 48, 51, 54]]);
        }));

        function normalize(_x) {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(deserialized) {
          var _deserializedType, _returnType2, result, _iterator2, _step2, item, RecordClass;

          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _deserializedType = flowRuntime_umd.nullable(flowRuntime_umd.array());
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.mixed());
                  flowRuntime_umd.param("deserialized", _deserializedType).assert(deserialized);

                  if (!(deserialized == null)) {
                    _context2.next = 5;
                    break;
                  }

                  return _context2.abrupt("return", _returnType2.assert([]));

                case 5:
                  result = [];
                  _iterator2 = _createForOfIteratorHelper$1(deserialized);
                  _context2.prev = 7;

                  _iterator2.s();

                case 9:
                  if ((_step2 = _iterator2.n()).done) {
                    _context2.next = 44;
                    break;
                  }

                  item = _step2.value;
                  _context2.t0 = false;
                  _context2.next = _context2.t0 === !_.isString(item) ? 14 : _context2.t0 === !_.isNumber(item) ? 16 : _context2.t0 === !_.isBoolean(item) ? 18 : _context2.t0 === !_.isDate(item) ? 20 : _context2.t0 === !(_.isObject(item) && /.{2,}[:][:].{2,}/.test(item.type)) ? 22 : _context2.t0 === !_.isPlainObject(item) ? 29 : _context2.t0 === !_.isArray(item) ? 35 : 41;
                  break;

                case 14:
                  result.push(Module.NS.StringTransform.serializeSync(item));
                  return _context2.abrupt("break", 42);

                case 16:
                  result.push(Module.NS.NumberTransform.serializeSync(item));
                  return _context2.abrupt("break", 42);

                case 18:
                  result.push(Module.NS.BooleanTransform.serializeSync(item));
                  return _context2.abrupt("break", 42);

                case 20:
                  result.push(Module.NS.DateTransform.serializeSync(item));
                  return _context2.abrupt("break", 42);

                case 22:
                  RecordClass = this.findRecordByName(item.type);
                  _context2.t1 = result;
                  _context2.next = 26;
                  return RecordClass.serialize(item);

                case 26:
                  _context2.t2 = _context2.sent;

                  _context2.t1.push.call(_context2.t1, _context2.t2);

                  return _context2.abrupt("break", 42);

                case 29:
                  _context2.t3 = result;
                  _context2.next = 32;
                  return Module.NS.ComplexObjectTransform.serialize(item);

                case 32:
                  _context2.t4 = _context2.sent;

                  _context2.t3.push.call(_context2.t3, _context2.t4);

                  return _context2.abrupt("break", 42);

                case 35:
                  _context2.t5 = result;
                  _context2.next = 38;
                  return Module.NS.ComplexArrayTransform.serialize(item);

                case 38:
                  _context2.t6 = _context2.sent;

                  _context2.t5.push.call(_context2.t5, _context2.t6);

                  return _context2.abrupt("break", 42);

                case 41:
                  result.push(Module.NS.Transform.serializeSync(item));

                case 42:
                  _context2.next = 9;
                  break;

                case 44:
                  _context2.next = 49;
                  break;

                case 46:
                  _context2.prev = 46;
                  _context2.t7 = _context2["catch"](7);

                  _iterator2.e(_context2.t7);

                case 49:
                  _context2.prev = 49;

                  _iterator2.f();

                  return _context2.finish(49);

                case 52:
                  return _context2.abrupt("return", _returnType2.assert(result));

                case 53:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this, [[7, 46, 49, 52]]);
        }));

        function serialize(_x2) {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        var _deserializedType2 = flowRuntime_umd.nullable(flowRuntime_umd.array());

        var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.array());

        flowRuntime_umd.param("deserialized", _deserializedType2).assert(deserialized);

        if (deserialized == null) {
          return _returnType5.assert([]);
        }

        var result = [];

        var _iterator3 = _createForOfIteratorHelper$1(deserialized),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var item = _step3.value;

            switch (false) {
              case !_.isString(item):
                result.push(Module.NS.StringTransform.objectize(item));
                break;

              case !_.isNumber(item):
                result.push(Module.NS.NumberTransform.objectize(item));
                break;

              case !_.isBoolean(item):
                result.push(Module.NS.BooleanTransform.objectize(item));
                break;

              case !_.isDate(item):
                result.push(Module.NS.DateTransform.objectize(item));
                break;

              case !(_.isObject(item) && /.{2,}[:][:].{2,}/.test(item.type)):
                var RecordClass = this.findRecordByName(item.type);
                result.push(RecordClass.objectize(item));
                break;

              case !_.isPlainObject(item):
                result.push(Module.NS.ComplexObjectTransform.objectize(item));
                break;

              case !_.isArray(item):
                result.push(Module.NS.ComplexArrayTransform.objectize(item));
                break;

              default:
                result.push(Module.NS.Transform.objectize(item));
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        return _returnType5.assert(result);
      }
    }]);

    return ComplexArrayTransform;
  }(ArrayTransform), _class3.__filename = __filename$l, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "parseRecordName", [method], Object.getOwnPropertyDescriptor(_class2, "parseRecordName"), _class2), applyDecoratedDescriptor(_class2, "findRecordByName", [method], Object.getOwnPropertyDescriptor(_class2, "findRecordByName"), _class2), applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$m = '/transforms/ComplexObjectTransform.js';

function _createSuper$l(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$l(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$l() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var JoiT$d = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var hasProp$3 = {}.hasOwnProperty;
var ComplexObjectTransform = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      ObjectTransform = _Module$NS.ObjectTransform,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect,
      moment = _Module$NS$Utils.moment;
  var ComplexObjectTransform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("ComplexObjectTransform", flowRuntime_umd["extends"](ObjectTransform), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("parseRecordName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.string()))), flowRuntime_umd.staticMethod("findRecordByName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("object"))))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_ObjectTransform) {
    inherits(ComplexObjectTransform, _ObjectTransform);

    var _super = _createSuper$l(ComplexObjectTransform);

    function ComplexObjectTransform() {
      classCallCheck(this, ComplexObjectTransform);

      return _super.apply(this, arguments);
    }

    createClass(ComplexObjectTransform, null, [{
      key: "parseRecordName",
      value: function parseRecordName(asName) {
        var _asNameType = flowRuntime_umd.string();

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.string()));

        flowRuntime_umd.param("asName", _asNameType).assert(asName);
        var vsModuleName, vsRecordName;

        if (/.*[:][:].*/.test(asName)) {
          var _asName$split = asName.split('::');

          var _asName$split2 = slicedToArray(_asName$split, 2);

          vsModuleName = _asName$split2[0];
          vsRecordName = _asName$split2[1];
        } else {
          var _ref = [this.moduleName(), inflect.camelize(inflect.underscore(inflect.singularize(asName)))];
          vsModuleName = _ref[0];
          vsRecordName = _ref[1];
        }

        if (!/(Record$)|(Migration$)/.test(vsRecordName)) {
          vsRecordName += 'Record';
        }

        return _returnType3.assert([vsModuleName, vsRecordName]);
      } // @method static findRecordByName(asName: string): RecordStaticInterface {

    }, {
      key: "findRecordByName",
      value: function findRecordByName(asName) {
        var _asNameType2 = flowRuntime_umd.string();

        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()));

        flowRuntime_umd.param("asName", _asNameType2).assert(asName);

        var _this$parseRecordName = this.parseRecordName(asName),
            _this$parseRecordName2 = slicedToArray(_this$parseRecordName, 2),
            vsModuleName = _this$parseRecordName2[0],
            vsRecordName = _this$parseRecordName2[1];

        return _returnType4.assert(this.Module.NS[vsRecordName]);
      }
    }, {
      key: "normalize",
      value: function () {
        var _normalize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(serialized) {
          var _this = this;

          var _serializedType, _returnType, result, _loop, key, _ret;

          return regenerator.wrap(function _callee2$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _serializedType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.mixed());
                  flowRuntime_umd.param("serialized", _serializedType).assert(serialized);

                  if (!(serialized == null)) {
                    _context3.next = 5;
                    break;
                  }

                  return _context3.abrupt("return", _returnType.assert({}));

                case 5:
                  result = {};
                  _loop = /*#__PURE__*/regenerator.mark(function _loop(key) {
                    var value;
                    return regenerator.wrap(function _loop$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            if (hasProp$3.call(serialized, key)) {
                              _context2.next = 2;
                              break;
                            }

                            return _context2.abrupt("return", "continue");

                          case 2:
                            value = serialized[key];
                            _context2.next = 5;
                            return asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
                              var RecordClass, _yield$RecordClass$no, _yield$RecordClass$no2, bh, normalized;

                              return regenerator.wrap(function _callee$(_context) {
                                while (1) {
                                  switch (_context.prev = _context.next) {
                                    case 0:
                                      _context.t0 = false;
                                      _context.next = _context.t0 === !(_.isString(value) && moment(value, moment.ISO_8601).isValid()) ? 3 : _context.t0 === !_.isString(value) ? 4 : _context.t0 === !_.isNumber(value) ? 5 : _context.t0 === !_.isBoolean(value) ? 6 : _context.t0 === !(_.isPlainObject(value) && /.{2,}[:][:].{2,}/.test(value.type)) ? 7 : _context.t0 === !_.isPlainObject(value) ? 17 : _context.t0 === !_.isArray(value) ? 20 : 23;
                                      break;

                                    case 3:
                                      return _context.abrupt("return", Module.NS.DateTransform.normalizeSync(value));

                                    case 4:
                                      return _context.abrupt("return", Module.NS.StringTransform.normalizeSync(value));

                                    case 5:
                                      return _context.abrupt("return", Module.NS.NumberTransform.normalizeSync(value));

                                    case 6:
                                      return _context.abrupt("return", Module.NS.BooleanTransform.normalizeSync(value));

                                    case 7:
                                      RecordClass = _this.findRecordByName(value.type); // NOTE: в правильном использовании вторым аргументом должна передаваться ссылка на коллекцию, то тут мы не можем ее получить
                                      // а так как рекорды в этом случае используются ТОЛЬКО для оформления структуры и хранения данных внутри родительского рекорда, то коллекции физически просто нет.

                                      _context.next = 10;
                                      return RecordClass.normalize(item);

                                    case 10:
                                      _yield$RecordClass$no = _context.sent;
                                      _yield$RecordClass$no2 = slicedToArray(_yield$RecordClass$no, 2);
                                      bh = _yield$RecordClass$no2[0];
                                      normalized = _yield$RecordClass$no2[1];
                                      _context.next = 16;
                                      return RecordClass["new"](normalized);

                                    case 16:
                                      return _context.abrupt("return", _context.sent);

                                    case 17:
                                      _context.next = 19;
                                      return Module.NS.ComplexObjectTransform.normalize(value);

                                    case 19:
                                      return _context.abrupt("return", _context.sent);

                                    case 20:
                                      _context.next = 22;
                                      return Module.NS.ComplexArrayTransform.normalize(value);

                                    case 22:
                                      return _context.abrupt("return", _context.sent);

                                    case 23:
                                      return _context.abrupt("return", Module.NS.Transform.normalizeSync(value));

                                    case 24:
                                    case "end":
                                      return _context.stop();
                                  }
                                }
                              }, _callee);
                            }))();

                          case 5:
                            result[key] = _context2.sent;

                          case 6:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _loop);
                  });
                  _context3.t0 = regenerator.keys(serialized);

                case 8:
                  if ((_context3.t1 = _context3.t0()).done) {
                    _context3.next = 16;
                    break;
                  }

                  key = _context3.t1.value;
                  return _context3.delegateYield(_loop(key), "t2", 11);

                case 11:
                  _ret = _context3.t2;

                  if (!(_ret === "continue")) {
                    _context3.next = 14;
                    break;
                  }

                  return _context3.abrupt("continue", 8);

                case 14:
                  _context3.next = 8;
                  break;

                case 16:
                  return _context3.abrupt("return", _returnType.assert(result));

                case 17:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee2);
        }));

        function normalize(_x) {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(deserialized) {
          var _this2 = this;

          var _deserializedType, _returnType2, result, _loop2, key, _ret2;

          return regenerator.wrap(function _callee4$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _deserializedType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.mixed());
                  flowRuntime_umd.param("deserialized", _deserializedType).assert(deserialized);

                  if (!(deserialized == null)) {
                    _context6.next = 5;
                    break;
                  }

                  return _context6.abrupt("return", _returnType2.assert({}));

                case 5:
                  result = {};
                  _loop2 = /*#__PURE__*/regenerator.mark(function _loop2(key) {
                    var value;
                    return regenerator.wrap(function _loop2$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            if (hasProp$3.call(deserialized, key)) {
                              _context5.next = 2;
                              break;
                            }

                            return _context5.abrupt("return", "continue");

                          case 2:
                            value = deserialized[key];
                            _context5.next = 5;
                            return asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
                              var RecordClass;
                              return regenerator.wrap(function _callee3$(_context4) {
                                while (1) {
                                  switch (_context4.prev = _context4.next) {
                                    case 0:
                                      _context4.t0 = false;
                                      _context4.next = _context4.t0 === !_.isString(value) ? 3 : _context4.t0 === !_.isNumber(value) ? 4 : _context4.t0 === !_.isBoolean(value) ? 5 : _context4.t0 === !_.isDate(value) ? 6 : _context4.t0 === !(_.isObject(value) && /.{2,}[:][:].{2,}/.test(value.type)) ? 7 : _context4.t0 === !_.isPlainObject(value) ? 11 : _context4.t0 === !_.isArray(value) ? 14 : 17;
                                      break;

                                    case 3:
                                      return _context4.abrupt("return", Module.NS.StringTransform.serializeSync(value));

                                    case 4:
                                      return _context4.abrupt("return", Module.NS.NumberTransform.serializeSync(value));

                                    case 5:
                                      return _context4.abrupt("return", Module.NS.BooleanTransform.serializeSync(value));

                                    case 6:
                                      return _context4.abrupt("return", Module.NS.DateTransform.serializeSync(value));

                                    case 7:
                                      RecordClass = _this2.findRecordByName(value.type);
                                      _context4.next = 10;
                                      return RecordClass.serialize(value);

                                    case 10:
                                      return _context4.abrupt("return", _context4.sent);

                                    case 11:
                                      _context4.next = 13;
                                      return Module.NS.ComplexObjectTransform.serialize(value);

                                    case 13:
                                      return _context4.abrupt("return", _context4.sent);

                                    case 14:
                                      _context4.next = 16;
                                      return Module.NS.ComplexArrayTransform.serialize(value);

                                    case 16:
                                      return _context4.abrupt("return", _context4.sent);

                                    case 17:
                                      return _context4.abrupt("return", Module.NS.Transform.serializeSync(value));

                                    case 18:
                                    case "end":
                                      return _context4.stop();
                                  }
                                }
                              }, _callee3);
                            }))();

                          case 5:
                            result[key] = _context5.sent;

                          case 6:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, _loop2);
                  });
                  _context6.t0 = regenerator.keys(deserialized);

                case 8:
                  if ((_context6.t1 = _context6.t0()).done) {
                    _context6.next = 16;
                    break;
                  }

                  key = _context6.t1.value;
                  return _context6.delegateYield(_loop2(key), "t2", 11);

                case 11:
                  _ret2 = _context6.t2;

                  if (!(_ret2 === "continue")) {
                    _context6.next = 14;
                    break;
                  }

                  return _context6.abrupt("continue", 8);

                case 14:
                  _context6.next = 8;
                  break;

                case 16:
                  return _context6.abrupt("return", _returnType2.assert(result));

                case 17:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee4);
        }));

        function serialize(_x2) {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        var _this3 = this;

        var _deserializedType2 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.ref("object"));

        flowRuntime_umd.param("deserialized", _deserializedType2).assert(deserialized);

        if (deserialized == null) {
          return _returnType5.assert({});
        }

        var result = {};

        var _loop3 = function _loop3(key) {
          if (!hasProp$3.call(deserialized, key)) return "continue";
          var value = deserialized[key];

          result[key] = function () {
            switch (false) {
              case !_.isString(value):
                return Module.NS.StringTransform.objectize(value);

              case !_.isNumber(value):
                return Module.NS.NumberTransform.objectize(value);

              case !_.isBoolean(value):
                return Module.NS.BooleanTransform.objectize(value);

              case !_.isDate(value):
                return Module.NS.DateTransform.objectize(value);

              case !(_.isObject(value) && /.{2,}[:][:].{2,}/.test(value.type)):
                var RecordClass = _this3.findRecordByName(value.type);

                return RecordClass.objectize(value);

              case !_.isPlainObject(value):
                return Module.NS.ComplexObjectTransform.objectize(value);

              case !_.isArray(value):
                return Module.NS.ComplexArrayTransform.objectize(value);

              default:
                return Module.NS.Transform.objectize(value);
            }
          }();
        };

        for (var key in deserialized) {
          var _ret3 = _loop3(key);

          if (_ret3 === "continue") continue;
        }

        return _returnType5.assert(result);
      }
    }]);

    return ComplexObjectTransform;
  }(ObjectTransform), _class3.__filename = __filename$m, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "parseRecordName", [method], Object.getOwnPropertyDescriptor(_class2, "parseRecordName"), _class2), applyDecoratedDescriptor(_class2, "findRecordByName", [method], Object.getOwnPropertyDescriptor(_class2, "findRecordByName"), _class2), applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$n = '/mapper/Cursor.js';

var metadata_keys = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.NAMED_TAG = "named";
exports.NAME_TAG = "name";
exports.UNMANAGED_TAG = "unmanaged";
exports.OPTIONAL_TAG = "optional";
exports.INJECT_TAG = "inject";
exports.MULTI_INJECT_TAG = "multi_inject";
exports.TAGGED = "inversify:tagged";
exports.TAGGED_PROP = "inversify:tagged_props";
exports.PARAM_TYPES = "inversify:paramtypes";
exports.DESIGN_PARAM_TYPES = "design:paramtypes";
exports.POST_CONSTRUCT = "post_construct";
});

unwrapExports(metadata_keys);
var metadata_keys_1 = metadata_keys.NAMED_TAG;
var metadata_keys_2 = metadata_keys.NAME_TAG;
var metadata_keys_3 = metadata_keys.UNMANAGED_TAG;
var metadata_keys_4 = metadata_keys.OPTIONAL_TAG;
var metadata_keys_5 = metadata_keys.INJECT_TAG;
var metadata_keys_6 = metadata_keys.MULTI_INJECT_TAG;
var metadata_keys_7 = metadata_keys.TAGGED;
var metadata_keys_8 = metadata_keys.TAGGED_PROP;
var metadata_keys_9 = metadata_keys.PARAM_TYPES;
var metadata_keys_10 = metadata_keys.DESIGN_PARAM_TYPES;
var metadata_keys_11 = metadata_keys.POST_CONSTRUCT;

var literal_types = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
var BindingScopeEnum = {
    Request: "Request",
    Singleton: "Singleton",
    Transient: "Transient"
};
exports.BindingScopeEnum = BindingScopeEnum;
var BindingTypeEnum = {
    ConstantValue: "ConstantValue",
    Constructor: "Constructor",
    DynamicValue: "DynamicValue",
    Factory: "Factory",
    Function: "Function",
    Instance: "Instance",
    Invalid: "Invalid",
    Provider: "Provider"
};
exports.BindingTypeEnum = BindingTypeEnum;
var TargetTypeEnum = {
    ClassProperty: "ClassProperty",
    ConstructorArgument: "ConstructorArgument",
    Variable: "Variable"
};
exports.TargetTypeEnum = TargetTypeEnum;
});

unwrapExports(literal_types);
var literal_types_1 = literal_types.BindingScopeEnum;
var literal_types_2 = literal_types.BindingTypeEnum;
var literal_types_3 = literal_types.TargetTypeEnum;

var id_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
var idCounter = 0;
function id() {
    return idCounter++;
}
exports.id = id;
});

unwrapExports(id_1);
var id_2 = id_1.id;

var binding = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });


var Binding = (function () {
    function Binding(serviceIdentifier, scope) {
        this.id = id_1.id();
        this.activated = false;
        this.serviceIdentifier = serviceIdentifier;
        this.scope = scope;
        this.type = literal_types.BindingTypeEnum.Invalid;
        this.constraint = function (request) { return true; };
        this.implementationType = null;
        this.cache = null;
        this.factory = null;
        this.provider = null;
        this.onActivation = null;
        this.dynamicValue = null;
    }
    Binding.prototype.clone = function () {
        var clone = new Binding(this.serviceIdentifier, this.scope);
        clone.activated = false;
        clone.implementationType = this.implementationType;
        clone.dynamicValue = this.dynamicValue;
        clone.scope = this.scope;
        clone.type = this.type;
        clone.factory = this.factory;
        clone.provider = this.provider;
        clone.constraint = this.constraint;
        clone.onActivation = this.onActivation;
        clone.cache = this.cache;
        return clone;
    };
    return Binding;
}());
exports.Binding = Binding;
});

unwrapExports(binding);
var binding_1 = binding.Binding;

var error_msgs = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.DUPLICATED_INJECTABLE_DECORATOR = "Cannot apply @injectable decorator multiple times.";
exports.DUPLICATED_METADATA = "Metadata key was used more than once in a parameter:";
exports.NULL_ARGUMENT = "NULL argument";
exports.KEY_NOT_FOUND = "Key Not Found";
exports.AMBIGUOUS_MATCH = "Ambiguous match found for serviceIdentifier:";
exports.CANNOT_UNBIND = "Could not unbind serviceIdentifier:";
exports.NOT_REGISTERED = "No matching bindings found for serviceIdentifier:";
exports.MISSING_INJECTABLE_ANNOTATION = "Missing required @injectable annotation in:";
exports.MISSING_INJECT_ANNOTATION = "Missing required @inject or @multiInject annotation in:";
exports.UNDEFINED_INJECT_ANNOTATION = function (name) {
    return "@inject called with undefined this could mean that the class " + name + " has " +
        "a circular dependency problem. You can use a LazyServiceIdentifer to  " +
        "overcome this limitation.";
};
exports.CIRCULAR_DEPENDENCY = "Circular dependency found:";
exports.NOT_IMPLEMENTED = "Sorry, this feature is not fully implemented yet.";
exports.INVALID_BINDING_TYPE = "Invalid binding type:";
exports.NO_MORE_SNAPSHOTS_AVAILABLE = "No snapshot available to restore.";
exports.INVALID_MIDDLEWARE_RETURN = "Invalid return type in middleware. Middleware must return!";
exports.INVALID_FUNCTION_BINDING = "Value provided to function binding must be a function!";
exports.INVALID_TO_SELF_VALUE = "The toSelf function can only be applied when a constructor is " +
    "used as service identifier";
exports.INVALID_DECORATOR_OPERATION = "The @inject @multiInject @tagged and @named decorators " +
    "must be applied to the parameters of a class constructor or a class property.";
exports.ARGUMENTS_LENGTH_MISMATCH = function () {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    return "The number of constructor arguments in the derived class " +
        (values[0] + " must be >= than the number of constructor arguments of its base class.");
};
exports.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT = "Invalid Container constructor argument. Container options " +
    "must be an object.";
exports.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE = "Invalid Container option. Default scope must " +
    "be a string ('singleton' or 'transient').";
exports.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE = "Invalid Container option. Auto bind injectable must " +
    "be a boolean";
exports.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK = "Invalid Container option. Skip base check must " +
    "be a boolean";
exports.MULTIPLE_POST_CONSTRUCT_METHODS = "Cannot apply @postConstruct decorator multiple times in the same class";
exports.POST_CONSTRUCT_ERROR = function () {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    return "@postConstruct error in class " + values[0] + ": " + values[1];
};
exports.CIRCULAR_DEPENDENCY_IN_FACTORY = function () {
    var values = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        values[_i] = arguments[_i];
    }
    return "It looks like there is a circular dependency " +
        ("in one of the '" + values[0] + "' bindings. Please investigate bindings with") +
        ("service identifier '" + values[1] + "'.");
};
exports.STACK_OVERFLOW = "Maximum call stack size exceeded";
});

unwrapExports(error_msgs);
var error_msgs_1 = error_msgs.DUPLICATED_INJECTABLE_DECORATOR;
var error_msgs_2 = error_msgs.DUPLICATED_METADATA;
var error_msgs_3 = error_msgs.NULL_ARGUMENT;
var error_msgs_4 = error_msgs.KEY_NOT_FOUND;
var error_msgs_5 = error_msgs.AMBIGUOUS_MATCH;
var error_msgs_6 = error_msgs.CANNOT_UNBIND;
var error_msgs_7 = error_msgs.NOT_REGISTERED;
var error_msgs_8 = error_msgs.MISSING_INJECTABLE_ANNOTATION;
var error_msgs_9 = error_msgs.MISSING_INJECT_ANNOTATION;
var error_msgs_10 = error_msgs.UNDEFINED_INJECT_ANNOTATION;
var error_msgs_11 = error_msgs.CIRCULAR_DEPENDENCY;
var error_msgs_12 = error_msgs.NOT_IMPLEMENTED;
var error_msgs_13 = error_msgs.INVALID_BINDING_TYPE;
var error_msgs_14 = error_msgs.NO_MORE_SNAPSHOTS_AVAILABLE;
var error_msgs_15 = error_msgs.INVALID_MIDDLEWARE_RETURN;
var error_msgs_16 = error_msgs.INVALID_FUNCTION_BINDING;
var error_msgs_17 = error_msgs.INVALID_TO_SELF_VALUE;
var error_msgs_18 = error_msgs.INVALID_DECORATOR_OPERATION;
var error_msgs_19 = error_msgs.ARGUMENTS_LENGTH_MISMATCH;
var error_msgs_20 = error_msgs.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT;
var error_msgs_21 = error_msgs.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE;
var error_msgs_22 = error_msgs.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE;
var error_msgs_23 = error_msgs.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK;
var error_msgs_24 = error_msgs.MULTIPLE_POST_CONSTRUCT_METHODS;
var error_msgs_25 = error_msgs.POST_CONSTRUCT_ERROR;
var error_msgs_26 = error_msgs.CIRCULAR_DEPENDENCY_IN_FACTORY;
var error_msgs_27 = error_msgs.STACK_OVERFLOW;

var metadata_reader = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

var MetadataReader = (function () {
    function MetadataReader() {
    }
    MetadataReader.prototype.getConstructorMetadata = function (constructorFunc) {
        var compilerGeneratedMetadata = Reflect.getMetadata(metadata_keys.PARAM_TYPES, constructorFunc);
        var userGeneratedMetadata = Reflect.getMetadata(metadata_keys.TAGGED, constructorFunc);
        return {
            compilerGeneratedMetadata: compilerGeneratedMetadata,
            userGeneratedMetadata: userGeneratedMetadata || {}
        };
    };
    MetadataReader.prototype.getPropertiesMetadata = function (constructorFunc) {
        var userGeneratedMetadata = Reflect.getMetadata(metadata_keys.TAGGED_PROP, constructorFunc) || [];
        return userGeneratedMetadata;
    };
    return MetadataReader;
}());
exports.MetadataReader = MetadataReader;
});

unwrapExports(metadata_reader);
var metadata_reader_1 = metadata_reader.MetadataReader;

var binding_count = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
var BindingCount = {
    MultipleBindingsAvailable: 2,
    NoBindingsAvailable: 0,
    OnlyOneBindingAvailable: 1
};
exports.BindingCount = BindingCount;
});

unwrapExports(binding_count);
var binding_count_1 = binding_count.BindingCount;

var exceptions = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

function isStackOverflowExeption(error) {
    return (error instanceof RangeError ||
        error.message === error_msgs.STACK_OVERFLOW);
}
exports.isStackOverflowExeption = isStackOverflowExeption;
});

unwrapExports(exceptions);
var exceptions_1 = exceptions.isStackOverflowExeption;

var serialization = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

function getServiceIdentifierAsString(serviceIdentifier) {
    if (typeof serviceIdentifier === "function") {
        var _serviceIdentifier = serviceIdentifier;
        return _serviceIdentifier.name;
    }
    else if (typeof serviceIdentifier === "symbol") {
        return serviceIdentifier.toString();
    }
    else {
        var _serviceIdentifier = serviceIdentifier;
        return _serviceIdentifier;
    }
}
exports.getServiceIdentifierAsString = getServiceIdentifierAsString;
function listRegisteredBindingsForServiceIdentifier(container, serviceIdentifier, getBindings) {
    var registeredBindingsList = "";
    var registeredBindings = getBindings(container, serviceIdentifier);
    if (registeredBindings.length !== 0) {
        registeredBindingsList = "\nRegistered bindings:";
        registeredBindings.forEach(function (binding) {
            var name = "Object";
            if (binding.implementationType !== null) {
                name = getFunctionName(binding.implementationType);
            }
            registeredBindingsList = registeredBindingsList + "\n " + name;
            if (binding.constraint.metaData) {
                registeredBindingsList = registeredBindingsList + " - " + binding.constraint.metaData;
            }
        });
    }
    return registeredBindingsList;
}
exports.listRegisteredBindingsForServiceIdentifier = listRegisteredBindingsForServiceIdentifier;
function alreadyDependencyChain(request, serviceIdentifier) {
    if (request.parentRequest === null) {
        return false;
    }
    else if (request.parentRequest.serviceIdentifier === serviceIdentifier) {
        return true;
    }
    else {
        return alreadyDependencyChain(request.parentRequest, serviceIdentifier);
    }
}
function dependencyChainToString(request) {
    function _createStringArr(req, result) {
        if (result === void 0) { result = []; }
        var serviceIdentifier = getServiceIdentifierAsString(req.serviceIdentifier);
        result.push(serviceIdentifier);
        if (req.parentRequest !== null) {
            return _createStringArr(req.parentRequest, result);
        }
        return result;
    }
    var stringArr = _createStringArr(request);
    return stringArr.reverse().join(" --> ");
}
function circularDependencyToException(request) {
    request.childRequests.forEach(function (childRequest) {
        if (alreadyDependencyChain(childRequest, childRequest.serviceIdentifier)) {
            var services = dependencyChainToString(childRequest);
            throw new Error(error_msgs.CIRCULAR_DEPENDENCY + " " + services);
        }
        else {
            circularDependencyToException(childRequest);
        }
    });
}
exports.circularDependencyToException = circularDependencyToException;
function listMetadataForTarget(serviceIdentifierString, target) {
    if (target.isTagged() || target.isNamed()) {
        var m_1 = "";
        var namedTag = target.getNamedTag();
        var otherTags = target.getCustomTags();
        if (namedTag !== null) {
            m_1 += namedTag.toString() + "\n";
        }
        if (otherTags !== null) {
            otherTags.forEach(function (tag) {
                m_1 += tag.toString() + "\n";
            });
        }
        return " " + serviceIdentifierString + "\n " + serviceIdentifierString + " - " + m_1;
    }
    else {
        return " " + serviceIdentifierString;
    }
}
exports.listMetadataForTarget = listMetadataForTarget;
function getFunctionName(v) {
    if (v.name) {
        return v.name;
    }
    else {
        var name_1 = v.toString();
        var match = name_1.match(/^function\s*([^\s(]+)/);
        return match ? match[1] : "Anonymous function: " + name_1;
    }
}
exports.getFunctionName = getFunctionName;
});

unwrapExports(serialization);
var serialization_1 = serialization.getServiceIdentifierAsString;
var serialization_2 = serialization.listRegisteredBindingsForServiceIdentifier;
var serialization_3 = serialization.circularDependencyToException;
var serialization_4 = serialization.listMetadataForTarget;
var serialization_5 = serialization.getFunctionName;

var context = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

var Context = (function () {
    function Context(container) {
        this.id = id_1.id();
        this.container = container;
    }
    Context.prototype.addPlan = function (plan) {
        this.plan = plan;
    };
    Context.prototype.setCurrentRequest = function (currentRequest) {
        this.currentRequest = currentRequest;
    };
    return Context;
}());
exports.Context = Context;
});

unwrapExports(context);
var context_1 = context.Context;

var metadata = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

var Metadata = (function () {
    function Metadata(key, value) {
        this.key = key;
        this.value = value;
    }
    Metadata.prototype.toString = function () {
        if (this.key === metadata_keys.NAMED_TAG) {
            return "named: " + this.value.toString() + " ";
        }
        else {
            return "tagged: { key:" + this.key.toString() + ", value: " + this.value + " }";
        }
    };
    return Metadata;
}());
exports.Metadata = Metadata;
});

unwrapExports(metadata);
var metadata_1 = metadata.Metadata;

var plan = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
var Plan = (function () {
    function Plan(parentContext, rootRequest) {
        this.parentContext = parentContext;
        this.rootRequest = rootRequest;
    }
    return Plan;
}());
exports.Plan = Plan;
});

unwrapExports(plan);
var plan_1 = plan.Plan;

var decorator_utils = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });


function tagParameter(annotationTarget, propertyName, parameterIndex, metadata) {
    var metadataKey = metadata_keys.TAGGED;
    _tagParameterOrProperty(metadataKey, annotationTarget, propertyName, metadata, parameterIndex);
}
exports.tagParameter = tagParameter;
function tagProperty(annotationTarget, propertyName, metadata) {
    var metadataKey = metadata_keys.TAGGED_PROP;
    _tagParameterOrProperty(metadataKey, annotationTarget.constructor, propertyName, metadata);
}
exports.tagProperty = tagProperty;
function _tagParameterOrProperty(metadataKey, annotationTarget, propertyName, metadata, parameterIndex) {
    var paramsOrPropertiesMetadata = {};
    var isParameterDecorator = (typeof parameterIndex === "number");
    var key = (parameterIndex !== undefined && isParameterDecorator) ? parameterIndex.toString() : propertyName;
    if (isParameterDecorator && propertyName !== undefined) {
        throw new Error(error_msgs.INVALID_DECORATOR_OPERATION);
    }
    if (Reflect.hasOwnMetadata(metadataKey, annotationTarget)) {
        paramsOrPropertiesMetadata = Reflect.getMetadata(metadataKey, annotationTarget);
    }
    var paramOrPropertyMetadata = paramsOrPropertiesMetadata[key];
    if (!Array.isArray(paramOrPropertyMetadata)) {
        paramOrPropertyMetadata = [];
    }
    else {
        for (var _i = 0, paramOrPropertyMetadata_1 = paramOrPropertyMetadata; _i < paramOrPropertyMetadata_1.length; _i++) {
            var m = paramOrPropertyMetadata_1[_i];
            if (m.key === metadata.key) {
                throw new Error(error_msgs.DUPLICATED_METADATA + " " + m.key.toString());
            }
        }
    }
    paramOrPropertyMetadata.push(metadata);
    paramsOrPropertiesMetadata[key] = paramOrPropertyMetadata;
    Reflect.defineMetadata(metadataKey, paramsOrPropertiesMetadata, annotationTarget);
}
function _decorate(decorators, target) {
    Reflect.decorate(decorators, target);
}
function _param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); };
}
function decorate(decorator, target, parameterIndex) {
    if (typeof parameterIndex === "number") {
        _decorate([_param(parameterIndex, decorator)], target);
    }
    else if (typeof parameterIndex === "string") {
        Reflect.decorate([decorator], target, parameterIndex);
    }
    else {
        _decorate([decorator], target);
    }
}
exports.decorate = decorate;
});

unwrapExports(decorator_utils);
var decorator_utils_1 = decorator_utils.tagParameter;
var decorator_utils_2 = decorator_utils.tagProperty;
var decorator_utils_3 = decorator_utils.decorate;

var inject_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });




var LazyServiceIdentifer = (function () {
    function LazyServiceIdentifer(cb) {
        this._cb = cb;
    }
    LazyServiceIdentifer.prototype.unwrap = function () {
        return this._cb();
    };
    return LazyServiceIdentifer;
}());
exports.LazyServiceIdentifer = LazyServiceIdentifer;
function inject(serviceIdentifier) {
    return function (target, targetKey, index) {
        if (serviceIdentifier === undefined) {
            throw new Error(error_msgs.UNDEFINED_INJECT_ANNOTATION(target.name));
        }
        var metadata$1 = new metadata.Metadata(metadata_keys.INJECT_TAG, serviceIdentifier);
        if (typeof index === "number") {
            decorator_utils.tagParameter(target, targetKey, index, metadata$1);
        }
        else {
            decorator_utils.tagProperty(target, targetKey, metadata$1);
        }
    };
}
exports.inject = inject;
});

unwrapExports(inject_1);
var inject_2 = inject_1.LazyServiceIdentifer;
var inject_3 = inject_1.inject;

var queryable_string = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
var QueryableString = (function () {
    function QueryableString(str) {
        this.str = str;
    }
    QueryableString.prototype.startsWith = function (searchString) {
        return this.str.indexOf(searchString) === 0;
    };
    QueryableString.prototype.endsWith = function (searchString) {
        var reverseString = "";
        var reverseSearchString = searchString.split("").reverse().join("");
        reverseString = this.str.split("").reverse().join("");
        return this.startsWith.call({ str: reverseString }, reverseSearchString);
    };
    QueryableString.prototype.contains = function (searchString) {
        return (this.str.indexOf(searchString) !== -1);
    };
    QueryableString.prototype.equals = function (compareString) {
        return this.str === compareString;
    };
    QueryableString.prototype.value = function () {
        return this.str;
    };
    return QueryableString;
}());
exports.QueryableString = QueryableString;
});

unwrapExports(queryable_string);
var queryable_string_1 = queryable_string.QueryableString;

var target = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });




var Target = (function () {
    function Target(type, name, serviceIdentifier, namedOrTagged) {
        this.id = id_1.id();
        this.type = type;
        this.serviceIdentifier = serviceIdentifier;
        this.name = new queryable_string.QueryableString(name || "");
        this.metadata = new Array();
        var metadataItem = null;
        if (typeof namedOrTagged === "string") {
            metadataItem = new metadata.Metadata(metadata_keys.NAMED_TAG, namedOrTagged);
        }
        else if (namedOrTagged instanceof metadata.Metadata) {
            metadataItem = namedOrTagged;
        }
        if (metadataItem !== null) {
            this.metadata.push(metadataItem);
        }
    }
    Target.prototype.hasTag = function (key) {
        for (var _i = 0, _a = this.metadata; _i < _a.length; _i++) {
            var m = _a[_i];
            if (m.key === key) {
                return true;
            }
        }
        return false;
    };
    Target.prototype.isArray = function () {
        return this.hasTag(metadata_keys.MULTI_INJECT_TAG);
    };
    Target.prototype.matchesArray = function (name) {
        return this.matchesTag(metadata_keys.MULTI_INJECT_TAG)(name);
    };
    Target.prototype.isNamed = function () {
        return this.hasTag(metadata_keys.NAMED_TAG);
    };
    Target.prototype.isTagged = function () {
        return this.metadata.some(function (m) {
            return (m.key !== metadata_keys.INJECT_TAG) &&
                (m.key !== metadata_keys.MULTI_INJECT_TAG) &&
                (m.key !== metadata_keys.NAME_TAG) &&
                (m.key !== metadata_keys.UNMANAGED_TAG) &&
                (m.key !== metadata_keys.NAMED_TAG);
        });
    };
    Target.prototype.isOptional = function () {
        return this.matchesTag(metadata_keys.OPTIONAL_TAG)(true);
    };
    Target.prototype.getNamedTag = function () {
        if (this.isNamed()) {
            return this.metadata.filter(function (m) { return m.key === metadata_keys.NAMED_TAG; })[0];
        }
        return null;
    };
    Target.prototype.getCustomTags = function () {
        if (this.isTagged()) {
            return this.metadata.filter(function (m) {
                return (m.key !== metadata_keys.INJECT_TAG) &&
                    (m.key !== metadata_keys.MULTI_INJECT_TAG) &&
                    (m.key !== metadata_keys.NAME_TAG) &&
                    (m.key !== metadata_keys.UNMANAGED_TAG) &&
                    (m.key !== metadata_keys.NAMED_TAG);
            });
        }
        return null;
    };
    Target.prototype.matchesNamedTag = function (name) {
        return this.matchesTag(metadata_keys.NAMED_TAG)(name);
    };
    Target.prototype.matchesTag = function (key) {
        var _this = this;
        return function (value) {
            for (var _i = 0, _a = _this.metadata; _i < _a.length; _i++) {
                var m = _a[_i];
                if (m.key === key && m.value === value) {
                    return true;
                }
            }
            return false;
        };
    };
    return Target;
}());
exports.Target = Target;
});

unwrapExports(target);
var target_1 = target.Target;

var reflection_utils = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });





exports.getFunctionName = serialization.getFunctionName;

function getDependencies(metadataReader, func) {
    var constructorName = serialization.getFunctionName(func);
    var targets = getTargets(metadataReader, constructorName, func, false);
    return targets;
}
exports.getDependencies = getDependencies;
function getTargets(metadataReader, constructorName, func, isBaseClass) {
    var metadata = metadataReader.getConstructorMetadata(func);
    var serviceIdentifiers = metadata.compilerGeneratedMetadata;
    if (serviceIdentifiers === undefined) {
        var msg = error_msgs.MISSING_INJECTABLE_ANNOTATION + " " + constructorName + ".";
        throw new Error(msg);
    }
    var constructorArgsMetadata = metadata.userGeneratedMetadata;
    var keys = Object.keys(constructorArgsMetadata);
    var hasUserDeclaredUnknownInjections = (func.length === 0 && keys.length > 0);
    var iterations = (hasUserDeclaredUnknownInjections) ? keys.length : func.length;
    var constructorTargets = getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations);
    var propertyTargets = getClassPropsAsTargets(metadataReader, func);
    var targets = constructorTargets.concat(propertyTargets);
    return targets;
}
function getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata) {
    var targetMetadata = constructorArgsMetadata[index.toString()] || [];
    var metadata = formatTargetMetadata(targetMetadata);
    var isManaged = metadata.unmanaged !== true;
    var serviceIdentifier = serviceIdentifiers[index];
    var injectIdentifier = (metadata.inject || metadata.multiInject);
    serviceIdentifier = (injectIdentifier) ? (injectIdentifier) : serviceIdentifier;
    if (serviceIdentifier instanceof inject_1.LazyServiceIdentifer) {
        serviceIdentifier = serviceIdentifier.unwrap();
    }
    if (isManaged) {
        var isObject = serviceIdentifier === Object;
        var isFunction = serviceIdentifier === Function;
        var isUndefined = serviceIdentifier === undefined;
        var isUnknownType = (isObject || isFunction || isUndefined);
        if (!isBaseClass && isUnknownType) {
            var msg = error_msgs.MISSING_INJECT_ANNOTATION + " argument " + index + " in class " + constructorName + ".";
            throw new Error(msg);
        }
        var target$1 = new target.Target(literal_types.TargetTypeEnum.ConstructorArgument, metadata.targetName, serviceIdentifier);
        target$1.metadata = targetMetadata;
        return target$1;
    }
    return null;
}
function getConstructorArgsAsTargets(isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata, iterations) {
    var targets = [];
    for (var i = 0; i < iterations; i++) {
        var index = i;
        var target = getConstructorArgsAsTarget(index, isBaseClass, constructorName, serviceIdentifiers, constructorArgsMetadata);
        if (target !== null) {
            targets.push(target);
        }
    }
    return targets;
}
function getClassPropsAsTargets(metadataReader, constructorFunc) {
    var classPropsMetadata = metadataReader.getPropertiesMetadata(constructorFunc);
    var targets = [];
    var keys = Object.keys(classPropsMetadata);
    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        var targetMetadata = classPropsMetadata[key];
        var metadata = formatTargetMetadata(classPropsMetadata[key]);
        var targetName = metadata.targetName || key;
        var serviceIdentifier = (metadata.inject || metadata.multiInject);
        var target$1 = new target.Target(literal_types.TargetTypeEnum.ClassProperty, targetName, serviceIdentifier);
        target$1.metadata = targetMetadata;
        targets.push(target$1);
    }
    var baseConstructor = Object.getPrototypeOf(constructorFunc.prototype).constructor;
    if (baseConstructor !== Object) {
        var baseTargets = getClassPropsAsTargets(metadataReader, baseConstructor);
        targets = targets.concat(baseTargets);
    }
    return targets;
}
function getBaseClassDependencyCount(metadataReader, func) {
    var baseConstructor = Object.getPrototypeOf(func.prototype).constructor;
    if (baseConstructor !== Object) {
        var baseConstructorName = serialization.getFunctionName(baseConstructor);
        var targets = getTargets(metadataReader, baseConstructorName, baseConstructor, true);
        var metadata = targets.map(function (t) {
            return t.metadata.filter(function (m) {
                return m.key === metadata_keys.UNMANAGED_TAG;
            });
        });
        var unmanagedCount = [].concat.apply([], metadata).length;
        var dependencyCount = targets.length - unmanagedCount;
        if (dependencyCount > 0) {
            return dependencyCount;
        }
        else {
            return getBaseClassDependencyCount(metadataReader, baseConstructor);
        }
    }
    else {
        return 0;
    }
}
exports.getBaseClassDependencyCount = getBaseClassDependencyCount;
function formatTargetMetadata(targetMetadata) {
    var targetMetadataMap = {};
    targetMetadata.forEach(function (m) {
        targetMetadataMap[m.key.toString()] = m.value;
    });
    return {
        inject: targetMetadataMap[metadata_keys.INJECT_TAG],
        multiInject: targetMetadataMap[metadata_keys.MULTI_INJECT_TAG],
        targetName: targetMetadataMap[metadata_keys.NAME_TAG],
        unmanaged: targetMetadataMap[metadata_keys.UNMANAGED_TAG]
    };
}
});

unwrapExports(reflection_utils);
var reflection_utils_1 = reflection_utils.getFunctionName;
var reflection_utils_2 = reflection_utils.getDependencies;
var reflection_utils_3 = reflection_utils.getBaseClassDependencyCount;

var request = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

var Request = (function () {
    function Request(serviceIdentifier, parentContext, parentRequest, bindings, target) {
        this.id = id_1.id();
        this.serviceIdentifier = serviceIdentifier;
        this.parentContext = parentContext;
        this.parentRequest = parentRequest;
        this.target = target;
        this.childRequests = [];
        this.bindings = (Array.isArray(bindings) ? bindings : [bindings]);
        this.requestScope = parentRequest === null
            ? new Map()
            : null;
    }
    Request.prototype.addChildRequest = function (serviceIdentifier, bindings, target) {
        var child = new Request(serviceIdentifier, this.parentContext, this, bindings, target);
        this.childRequests.push(child);
        return child;
    };
    return Request;
}());
exports.Request = Request;
});

unwrapExports(request);
var request_1 = request.Request;

var planner = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });












function getBindingDictionary(cntnr) {
    return cntnr._bindingDictionary;
}
exports.getBindingDictionary = getBindingDictionary;
function _createTarget(isMultiInject, targetType, serviceIdentifier, name, key, value) {
    var metadataKey = isMultiInject ? metadata_keys.MULTI_INJECT_TAG : metadata_keys.INJECT_TAG;
    var injectMetadata = new metadata.Metadata(metadataKey, serviceIdentifier);
    var target$1 = new target.Target(targetType, name, serviceIdentifier, injectMetadata);
    if (key !== undefined) {
        var tagMetadata = new metadata.Metadata(key, value);
        target$1.metadata.push(tagMetadata);
    }
    return target$1;
}
function _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target) {
    var bindings = getBindings(context.container, target.serviceIdentifier);
    var activeBindings = [];
    if (bindings.length === binding_count.BindingCount.NoBindingsAvailable &&
        context.container.options.autoBindInjectable &&
        typeof target.serviceIdentifier === "function" &&
        metadataReader.getConstructorMetadata(target.serviceIdentifier).compilerGeneratedMetadata) {
        context.container.bind(target.serviceIdentifier).toSelf();
        bindings = getBindings(context.container, target.serviceIdentifier);
    }
    if (!avoidConstraints) {
        activeBindings = bindings.filter(function (binding) {
            var request$1 = new request.Request(binding.serviceIdentifier, context, parentRequest, binding, target);
            return binding.constraint(request$1);
        });
    }
    else {
        activeBindings = bindings;
    }
    _validateActiveBindingCount(target.serviceIdentifier, activeBindings, target, context.container);
    return activeBindings;
}
function _validateActiveBindingCount(serviceIdentifier, bindings, target, container) {
    switch (bindings.length) {
        case binding_count.BindingCount.NoBindingsAvailable:
            if (target.isOptional()) {
                return bindings;
            }
            else {
                var serviceIdentifierString = serialization.getServiceIdentifierAsString(serviceIdentifier);
                var msg = error_msgs.NOT_REGISTERED;
                msg += serialization.listMetadataForTarget(serviceIdentifierString, target);
                msg += serialization.listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);
                throw new Error(msg);
            }
        case binding_count.BindingCount.OnlyOneBindingAvailable:
            if (!target.isArray()) {
                return bindings;
            }
        case binding_count.BindingCount.MultipleBindingsAvailable:
        default:
            if (!target.isArray()) {
                var serviceIdentifierString = serialization.getServiceIdentifierAsString(serviceIdentifier);
                var msg = error_msgs.AMBIGUOUS_MATCH + " " + serviceIdentifierString;
                msg += serialization.listRegisteredBindingsForServiceIdentifier(container, serviceIdentifierString, getBindings);
                throw new Error(msg);
            }
            else {
                return bindings;
            }
    }
}
function _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, parentRequest, target) {
    var activeBindings;
    var childRequest;
    if (parentRequest === null) {
        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, null, target);
        childRequest = new request.Request(serviceIdentifier, context, null, activeBindings, target);
        var thePlan = new plan.Plan(context, childRequest);
        context.addPlan(thePlan);
    }
    else {
        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target);
        childRequest = parentRequest.addChildRequest(target.serviceIdentifier, activeBindings, target);
    }
    activeBindings.forEach(function (binding) {
        var subChildRequest = null;
        if (target.isArray()) {
            subChildRequest = childRequest.addChildRequest(binding.serviceIdentifier, binding, target);
        }
        else {
            if (binding.cache) {
                return;
            }
            subChildRequest = childRequest;
        }
        if (binding.type === literal_types.BindingTypeEnum.Instance && binding.implementationType !== null) {
            var dependencies = reflection_utils.getDependencies(metadataReader, binding.implementationType);
            if (!context.container.options.skipBaseClassChecks) {
                var baseClassDependencyCount = reflection_utils.getBaseClassDependencyCount(metadataReader, binding.implementationType);
                if (dependencies.length < baseClassDependencyCount) {
                    var error = error_msgs.ARGUMENTS_LENGTH_MISMATCH(reflection_utils.getFunctionName(binding.implementationType));
                    throw new Error(error);
                }
            }
            dependencies.forEach(function (dependency) {
                _createSubRequests(metadataReader, false, dependency.serviceIdentifier, context, subChildRequest, dependency);
            });
        }
    });
}
function getBindings(container, serviceIdentifier) {
    var bindings = [];
    var bindingDictionary = getBindingDictionary(container);
    if (bindingDictionary.hasKey(serviceIdentifier)) {
        bindings = bindingDictionary.get(serviceIdentifier);
    }
    else if (container.parent !== null) {
        bindings = getBindings(container.parent, serviceIdentifier);
    }
    return bindings;
}
function plan$1(metadataReader, container, isMultiInject, targetType, serviceIdentifier, key, value, avoidConstraints) {
    if (avoidConstraints === void 0) { avoidConstraints = false; }
    var context$1 = new context.Context(container);
    var target = _createTarget(isMultiInject, targetType, serviceIdentifier, "", key, value);
    try {
        _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context$1, null, target);
        return context$1;
    }
    catch (error) {
        if (exceptions.isStackOverflowExeption(error)) {
            if (context$1.plan) {
                serialization.circularDependencyToException(context$1.plan.rootRequest);
            }
        }
        throw error;
    }
}
exports.plan = plan$1;
function createMockRequest(container, serviceIdentifier, key, value) {
    var target$1 = new target.Target(literal_types.TargetTypeEnum.Variable, "", serviceIdentifier, new metadata.Metadata(key, value));
    var context$1 = new context.Context(container);
    var request$1 = new request.Request(serviceIdentifier, context$1, null, [], target$1);
    return request$1;
}
exports.createMockRequest = createMockRequest;
});

unwrapExports(planner);
var planner_1 = planner.getBindingDictionary;
var planner_2 = planner.plan;
var planner_3 = planner.createMockRequest;

var instantiation = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });



function _injectProperties(instance, childRequests, resolveRequest) {
    var propertyInjectionsRequests = childRequests.filter(function (childRequest) {
        return (childRequest.target !== null &&
            childRequest.target.type === literal_types.TargetTypeEnum.ClassProperty);
    });
    var propertyInjections = propertyInjectionsRequests.map(resolveRequest);
    propertyInjectionsRequests.forEach(function (r, index) {
        var propertyName = "";
        propertyName = r.target.name.value();
        var injection = propertyInjections[index];
        instance[propertyName] = injection;
    });
    return instance;
}
function _createInstance(Func, injections) {
    return new (Func.bind.apply(Func, [void 0].concat(injections)))();
}
function _postConstruct(constr, result) {
    if (Reflect.hasMetadata(metadata_keys.POST_CONSTRUCT, constr)) {
        var data = Reflect.getMetadata(metadata_keys.POST_CONSTRUCT, constr);
        try {
            result[data.value]();
        }
        catch (e) {
            throw new Error(error_msgs.POST_CONSTRUCT_ERROR(constr.name, e.message));
        }
    }
}
function resolveInstance(constr, childRequests, resolveRequest) {
    var result = null;
    if (childRequests.length > 0) {
        var constructorInjectionsRequests = childRequests.filter(function (childRequest) {
            return (childRequest.target !== null && childRequest.target.type === literal_types.TargetTypeEnum.ConstructorArgument);
        });
        var constructorInjections = constructorInjectionsRequests.map(resolveRequest);
        result = _createInstance(constr, constructorInjections);
        result = _injectProperties(result, childRequests, resolveRequest);
    }
    else {
        result = new constr();
    }
    _postConstruct(constr, result);
    return result;
}
exports.resolveInstance = resolveInstance;
});

unwrapExports(instantiation);
var instantiation_1 = instantiation.resolveInstance;

var resolver = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });





var invokeFactory = function (factoryType, serviceIdentifier, fn) {
    try {
        return fn();
    }
    catch (error) {
        if (exceptions.isStackOverflowExeption(error)) {
            throw new Error(error_msgs.CIRCULAR_DEPENDENCY_IN_FACTORY(factoryType, serviceIdentifier.toString()));
        }
        else {
            throw error;
        }
    }
};
var _resolveRequest = function (requestScope) {
    return function (request) {
        request.parentContext.setCurrentRequest(request);
        var bindings = request.bindings;
        var childRequests = request.childRequests;
        var targetIsAnArray = request.target && request.target.isArray();
        var targetParentIsNotAnArray = !request.parentRequest ||
            !request.parentRequest.target ||
            !request.target ||
            !request.parentRequest.target.matchesArray(request.target.serviceIdentifier);
        if (targetIsAnArray && targetParentIsNotAnArray) {
            return childRequests.map(function (childRequest) {
                var _f = _resolveRequest(requestScope);
                return _f(childRequest);
            });
        }
        else {
            var result = null;
            if (request.target.isOptional() && bindings.length === 0) {
                return undefined;
            }
            var binding_1 = bindings[0];
            var isSingleton = binding_1.scope === literal_types.BindingScopeEnum.Singleton;
            var isRequestSingleton = binding_1.scope === literal_types.BindingScopeEnum.Request;
            if (isSingleton && binding_1.activated) {
                return binding_1.cache;
            }
            if (isRequestSingleton &&
                requestScope !== null &&
                requestScope.has(binding_1.id)) {
                return requestScope.get(binding_1.id);
            }
            if (binding_1.type === literal_types.BindingTypeEnum.ConstantValue) {
                result = binding_1.cache;
            }
            else if (binding_1.type === literal_types.BindingTypeEnum.Function) {
                result = binding_1.cache;
            }
            else if (binding_1.type === literal_types.BindingTypeEnum.Constructor) {
                result = binding_1.implementationType;
            }
            else if (binding_1.type === literal_types.BindingTypeEnum.DynamicValue && binding_1.dynamicValue !== null) {
                result = invokeFactory("toDynamicValue", binding_1.serviceIdentifier, function () { return binding_1.dynamicValue(request.parentContext); });
            }
            else if (binding_1.type === literal_types.BindingTypeEnum.Factory && binding_1.factory !== null) {
                result = invokeFactory("toFactory", binding_1.serviceIdentifier, function () { return binding_1.factory(request.parentContext); });
            }
            else if (binding_1.type === literal_types.BindingTypeEnum.Provider && binding_1.provider !== null) {
                result = invokeFactory("toProvider", binding_1.serviceIdentifier, function () { return binding_1.provider(request.parentContext); });
            }
            else if (binding_1.type === literal_types.BindingTypeEnum.Instance && binding_1.implementationType !== null) {
                result = instantiation.resolveInstance(binding_1.implementationType, childRequests, _resolveRequest(requestScope));
            }
            else {
                var serviceIdentifier = serialization.getServiceIdentifierAsString(request.serviceIdentifier);
                throw new Error(error_msgs.INVALID_BINDING_TYPE + " " + serviceIdentifier);
            }
            if (typeof binding_1.onActivation === "function") {
                result = binding_1.onActivation(request.parentContext, result);
            }
            if (isSingleton) {
                binding_1.cache = result;
                binding_1.activated = true;
            }
            if (isRequestSingleton &&
                requestScope !== null &&
                !requestScope.has(binding_1.id)) {
                requestScope.set(binding_1.id, result);
            }
            return result;
        }
    };
};
function resolve(context) {
    var _f = _resolveRequest(context.plan.rootRequest.requestScope);
    return _f(context.plan.rootRequest);
}
exports.resolve = resolve;
});

unwrapExports(resolver);
var resolver_1 = resolver.resolve;

var constraint_helpers = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });


var traverseAncerstors = function (request, constraint) {
    var parent = request.parentRequest;
    if (parent !== null) {
        return constraint(parent) ? true : traverseAncerstors(parent, constraint);
    }
    else {
        return false;
    }
};
exports.traverseAncerstors = traverseAncerstors;
var taggedConstraint = function (key) { return function (value) {
    var constraint = function (request) {
        return request !== null && request.target !== null && request.target.matchesTag(key)(value);
    };
    constraint.metaData = new metadata.Metadata(key, value);
    return constraint;
}; };
exports.taggedConstraint = taggedConstraint;
var namedConstraint = taggedConstraint(metadata_keys.NAMED_TAG);
exports.namedConstraint = namedConstraint;
var typeConstraint = function (type) { return function (request) {
    var binding = null;
    if (request !== null) {
        binding = request.bindings[0];
        if (typeof type === "string") {
            var serviceIdentifier = binding.serviceIdentifier;
            return serviceIdentifier === type;
        }
        else {
            var constructor = request.bindings[0].implementationType;
            return type === constructor;
        }
    }
    return false;
}; };
exports.typeConstraint = typeConstraint;
});

unwrapExports(constraint_helpers);
var constraint_helpers_1 = constraint_helpers.traverseAncerstors;
var constraint_helpers_2 = constraint_helpers.taggedConstraint;
var constraint_helpers_3 = constraint_helpers.namedConstraint;
var constraint_helpers_4 = constraint_helpers.typeConstraint;

var binding_when_syntax = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });


var BindingWhenSyntax = (function () {
    function BindingWhenSyntax(binding) {
        this._binding = binding;
    }
    BindingWhenSyntax.prototype.when = function (constraint) {
        this._binding.constraint = constraint;
        return new binding_on_syntax.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenTargetNamed = function (name) {
        this._binding.constraint = constraint_helpers.namedConstraint(name);
        return new binding_on_syntax.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenTargetIsDefault = function () {
        this._binding.constraint = function (request) {
            var targetIsDefault = (request.target !== null) &&
                (!request.target.isNamed()) &&
                (!request.target.isTagged());
            return targetIsDefault;
        };
        return new binding_on_syntax.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenTargetTagged = function (tag, value) {
        this._binding.constraint = constraint_helpers.taggedConstraint(tag)(value);
        return new binding_on_syntax.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenInjectedInto = function (parent) {
        this._binding.constraint = function (request) {
            return constraint_helpers.typeConstraint(parent)(request.parentRequest);
        };
        return new binding_on_syntax.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenParentNamed = function (name) {
        this._binding.constraint = function (request) {
            return constraint_helpers.namedConstraint(name)(request.parentRequest);
        };
        return new binding_on_syntax.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenParentTagged = function (tag, value) {
        this._binding.constraint = function (request) {
            return constraint_helpers.taggedConstraint(tag)(value)(request.parentRequest);
        };
        return new binding_on_syntax.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenAnyAncestorIs = function (ancestor) {
        this._binding.constraint = function (request) {
            return constraint_helpers.traverseAncerstors(request, constraint_helpers.typeConstraint(ancestor));
        };
        return new binding_on_syntax.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenNoAncestorIs = function (ancestor) {
        this._binding.constraint = function (request) {
            return !constraint_helpers.traverseAncerstors(request, constraint_helpers.typeConstraint(ancestor));
        };
        return new binding_on_syntax.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenAnyAncestorNamed = function (name) {
        this._binding.constraint = function (request) {
            return constraint_helpers.traverseAncerstors(request, constraint_helpers.namedConstraint(name));
        };
        return new binding_on_syntax.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenNoAncestorNamed = function (name) {
        this._binding.constraint = function (request) {
            return !constraint_helpers.traverseAncerstors(request, constraint_helpers.namedConstraint(name));
        };
        return new binding_on_syntax.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {
        this._binding.constraint = function (request) {
            return constraint_helpers.traverseAncerstors(request, constraint_helpers.taggedConstraint(tag)(value));
        };
        return new binding_on_syntax.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenNoAncestorTagged = function (tag, value) {
        this._binding.constraint = function (request) {
            return !constraint_helpers.traverseAncerstors(request, constraint_helpers.taggedConstraint(tag)(value));
        };
        return new binding_on_syntax.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenAnyAncestorMatches = function (constraint) {
        this._binding.constraint = function (request) {
            return constraint_helpers.traverseAncerstors(request, constraint);
        };
        return new binding_on_syntax.BindingOnSyntax(this._binding);
    };
    BindingWhenSyntax.prototype.whenNoAncestorMatches = function (constraint) {
        this._binding.constraint = function (request) {
            return !constraint_helpers.traverseAncerstors(request, constraint);
        };
        return new binding_on_syntax.BindingOnSyntax(this._binding);
    };
    return BindingWhenSyntax;
}());
exports.BindingWhenSyntax = BindingWhenSyntax;
});

unwrapExports(binding_when_syntax);
var binding_when_syntax_1 = binding_when_syntax.BindingWhenSyntax;

var binding_on_syntax = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

var BindingOnSyntax = (function () {
    function BindingOnSyntax(binding) {
        this._binding = binding;
    }
    BindingOnSyntax.prototype.onActivation = function (handler) {
        this._binding.onActivation = handler;
        return new binding_when_syntax.BindingWhenSyntax(this._binding);
    };
    return BindingOnSyntax;
}());
exports.BindingOnSyntax = BindingOnSyntax;
});

unwrapExports(binding_on_syntax);
var binding_on_syntax_1 = binding_on_syntax.BindingOnSyntax;

var binding_when_on_syntax = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });


var BindingWhenOnSyntax = (function () {
    function BindingWhenOnSyntax(binding) {
        this._binding = binding;
        this._bindingWhenSyntax = new binding_when_syntax.BindingWhenSyntax(this._binding);
        this._bindingOnSyntax = new binding_on_syntax.BindingOnSyntax(this._binding);
    }
    BindingWhenOnSyntax.prototype.when = function (constraint) {
        return this._bindingWhenSyntax.when(constraint);
    };
    BindingWhenOnSyntax.prototype.whenTargetNamed = function (name) {
        return this._bindingWhenSyntax.whenTargetNamed(name);
    };
    BindingWhenOnSyntax.prototype.whenTargetIsDefault = function () {
        return this._bindingWhenSyntax.whenTargetIsDefault();
    };
    BindingWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {
        return this._bindingWhenSyntax.whenTargetTagged(tag, value);
    };
    BindingWhenOnSyntax.prototype.whenInjectedInto = function (parent) {
        return this._bindingWhenSyntax.whenInjectedInto(parent);
    };
    BindingWhenOnSyntax.prototype.whenParentNamed = function (name) {
        return this._bindingWhenSyntax.whenParentNamed(name);
    };
    BindingWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {
        return this._bindingWhenSyntax.whenParentTagged(tag, value);
    };
    BindingWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {
        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);
    };
    BindingWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {
        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);
    };
    BindingWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {
        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);
    };
    BindingWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {
        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);
    };
    BindingWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {
        return this._bindingWhenSyntax.whenNoAncestorNamed(name);
    };
    BindingWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {
        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);
    };
    BindingWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {
        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);
    };
    BindingWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {
        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);
    };
    BindingWhenOnSyntax.prototype.onActivation = function (handler) {
        return this._bindingOnSyntax.onActivation(handler);
    };
    return BindingWhenOnSyntax;
}());
exports.BindingWhenOnSyntax = BindingWhenOnSyntax;
});

unwrapExports(binding_when_on_syntax);
var binding_when_on_syntax_1 = binding_when_on_syntax.BindingWhenOnSyntax;

var binding_in_syntax = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });


var BindingInSyntax = (function () {
    function BindingInSyntax(binding) {
        this._binding = binding;
    }
    BindingInSyntax.prototype.inRequestScope = function () {
        this._binding.scope = literal_types.BindingScopeEnum.Request;
        return new binding_when_on_syntax.BindingWhenOnSyntax(this._binding);
    };
    BindingInSyntax.prototype.inSingletonScope = function () {
        this._binding.scope = literal_types.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax.BindingWhenOnSyntax(this._binding);
    };
    BindingInSyntax.prototype.inTransientScope = function () {
        this._binding.scope = literal_types.BindingScopeEnum.Transient;
        return new binding_when_on_syntax.BindingWhenOnSyntax(this._binding);
    };
    return BindingInSyntax;
}());
exports.BindingInSyntax = BindingInSyntax;
});

unwrapExports(binding_in_syntax);
var binding_in_syntax_1 = binding_in_syntax.BindingInSyntax;

var binding_in_when_on_syntax = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });



var BindingInWhenOnSyntax = (function () {
    function BindingInWhenOnSyntax(binding) {
        this._binding = binding;
        this._bindingWhenSyntax = new binding_when_syntax.BindingWhenSyntax(this._binding);
        this._bindingOnSyntax = new binding_on_syntax.BindingOnSyntax(this._binding);
        this._bindingInSyntax = new binding_in_syntax.BindingInSyntax(binding);
    }
    BindingInWhenOnSyntax.prototype.inRequestScope = function () {
        return this._bindingInSyntax.inRequestScope();
    };
    BindingInWhenOnSyntax.prototype.inSingletonScope = function () {
        return this._bindingInSyntax.inSingletonScope();
    };
    BindingInWhenOnSyntax.prototype.inTransientScope = function () {
        return this._bindingInSyntax.inTransientScope();
    };
    BindingInWhenOnSyntax.prototype.when = function (constraint) {
        return this._bindingWhenSyntax.when(constraint);
    };
    BindingInWhenOnSyntax.prototype.whenTargetNamed = function (name) {
        return this._bindingWhenSyntax.whenTargetNamed(name);
    };
    BindingInWhenOnSyntax.prototype.whenTargetIsDefault = function () {
        return this._bindingWhenSyntax.whenTargetIsDefault();
    };
    BindingInWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {
        return this._bindingWhenSyntax.whenTargetTagged(tag, value);
    };
    BindingInWhenOnSyntax.prototype.whenInjectedInto = function (parent) {
        return this._bindingWhenSyntax.whenInjectedInto(parent);
    };
    BindingInWhenOnSyntax.prototype.whenParentNamed = function (name) {
        return this._bindingWhenSyntax.whenParentNamed(name);
    };
    BindingInWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {
        return this._bindingWhenSyntax.whenParentTagged(tag, value);
    };
    BindingInWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {
        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);
    };
    BindingInWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {
        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);
    };
    BindingInWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {
        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);
    };
    BindingInWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {
        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);
    };
    BindingInWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {
        return this._bindingWhenSyntax.whenNoAncestorNamed(name);
    };
    BindingInWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {
        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);
    };
    BindingInWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {
        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);
    };
    BindingInWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {
        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);
    };
    BindingInWhenOnSyntax.prototype.onActivation = function (handler) {
        return this._bindingOnSyntax.onActivation(handler);
    };
    return BindingInWhenOnSyntax;
}());
exports.BindingInWhenOnSyntax = BindingInWhenOnSyntax;
});

unwrapExports(binding_in_when_on_syntax);
var binding_in_when_on_syntax_1 = binding_in_when_on_syntax.BindingInWhenOnSyntax;

var binding_to_syntax = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });




var BindingToSyntax = (function () {
    function BindingToSyntax(binding) {
        this._binding = binding;
    }
    BindingToSyntax.prototype.to = function (constructor) {
        this._binding.type = literal_types.BindingTypeEnum.Instance;
        this._binding.implementationType = constructor;
        return new binding_in_when_on_syntax.BindingInWhenOnSyntax(this._binding);
    };
    BindingToSyntax.prototype.toSelf = function () {
        if (typeof this._binding.serviceIdentifier !== "function") {
            throw new Error("" + error_msgs.INVALID_TO_SELF_VALUE);
        }
        var self = this._binding.serviceIdentifier;
        return this.to(self);
    };
    BindingToSyntax.prototype.toConstantValue = function (value) {
        this._binding.type = literal_types.BindingTypeEnum.ConstantValue;
        this._binding.cache = value;
        this._binding.dynamicValue = null;
        this._binding.implementationType = null;
        return new binding_when_on_syntax.BindingWhenOnSyntax(this._binding);
    };
    BindingToSyntax.prototype.toDynamicValue = function (func) {
        this._binding.type = literal_types.BindingTypeEnum.DynamicValue;
        this._binding.cache = null;
        this._binding.dynamicValue = func;
        this._binding.implementationType = null;
        return new binding_in_when_on_syntax.BindingInWhenOnSyntax(this._binding);
    };
    BindingToSyntax.prototype.toConstructor = function (constructor) {
        this._binding.type = literal_types.BindingTypeEnum.Constructor;
        this._binding.implementationType = constructor;
        return new binding_when_on_syntax.BindingWhenOnSyntax(this._binding);
    };
    BindingToSyntax.prototype.toFactory = function (factory) {
        this._binding.type = literal_types.BindingTypeEnum.Factory;
        this._binding.factory = factory;
        return new binding_when_on_syntax.BindingWhenOnSyntax(this._binding);
    };
    BindingToSyntax.prototype.toFunction = function (func) {
        if (typeof func !== "function") {
            throw new Error(error_msgs.INVALID_FUNCTION_BINDING);
        }
        var bindingWhenOnSyntax = this.toConstantValue(func);
        this._binding.type = literal_types.BindingTypeEnum.Function;
        return bindingWhenOnSyntax;
    };
    BindingToSyntax.prototype.toAutoFactory = function (serviceIdentifier) {
        this._binding.type = literal_types.BindingTypeEnum.Factory;
        this._binding.factory = function (context) {
            var autofactory = function () { return context.container.get(serviceIdentifier); };
            return autofactory;
        };
        return new binding_when_on_syntax.BindingWhenOnSyntax(this._binding);
    };
    BindingToSyntax.prototype.toProvider = function (provider) {
        this._binding.type = literal_types.BindingTypeEnum.Provider;
        this._binding.provider = provider;
        return new binding_when_on_syntax.BindingWhenOnSyntax(this._binding);
    };
    BindingToSyntax.prototype.toService = function (service) {
        this.toDynamicValue(function (context) { return context.container.get(service); });
    };
    return BindingToSyntax;
}());
exports.BindingToSyntax = BindingToSyntax;
});

unwrapExports(binding_to_syntax);
var binding_to_syntax_1 = binding_to_syntax.BindingToSyntax;

var container_snapshot = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
var ContainerSnapshot = (function () {
    function ContainerSnapshot() {
    }
    ContainerSnapshot.of = function (bindings, middleware) {
        var snapshot = new ContainerSnapshot();
        snapshot.bindings = bindings;
        snapshot.middleware = middleware;
        return snapshot;
    };
    return ContainerSnapshot;
}());
exports.ContainerSnapshot = ContainerSnapshot;
});

unwrapExports(container_snapshot);
var container_snapshot_1 = container_snapshot.ContainerSnapshot;

var lookup = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

var Lookup = (function () {
    function Lookup() {
        this._map = new Map();
    }
    Lookup.prototype.getMap = function () {
        return this._map;
    };
    Lookup.prototype.add = function (serviceIdentifier, value) {
        if (serviceIdentifier === null || serviceIdentifier === undefined) {
            throw new Error(error_msgs.NULL_ARGUMENT);
        }
        if (value === null || value === undefined) {
            throw new Error(error_msgs.NULL_ARGUMENT);
        }
        var entry = this._map.get(serviceIdentifier);
        if (entry !== undefined) {
            entry.push(value);
            this._map.set(serviceIdentifier, entry);
        }
        else {
            this._map.set(serviceIdentifier, [value]);
        }
    };
    Lookup.prototype.get = function (serviceIdentifier) {
        if (serviceIdentifier === null || serviceIdentifier === undefined) {
            throw new Error(error_msgs.NULL_ARGUMENT);
        }
        var entry = this._map.get(serviceIdentifier);
        if (entry !== undefined) {
            return entry;
        }
        else {
            throw new Error(error_msgs.KEY_NOT_FOUND);
        }
    };
    Lookup.prototype.remove = function (serviceIdentifier) {
        if (serviceIdentifier === null || serviceIdentifier === undefined) {
            throw new Error(error_msgs.NULL_ARGUMENT);
        }
        if (!this._map.delete(serviceIdentifier)) {
            throw new Error(error_msgs.KEY_NOT_FOUND);
        }
    };
    Lookup.prototype.removeByCondition = function (condition) {
        var _this = this;
        this._map.forEach(function (entries, key) {
            var updatedEntries = entries.filter(function (entry) { return !condition(entry); });
            if (updatedEntries.length > 0) {
                _this._map.set(key, updatedEntries);
            }
            else {
                _this._map.delete(key);
            }
        });
    };
    Lookup.prototype.hasKey = function (serviceIdentifier) {
        if (serviceIdentifier === null || serviceIdentifier === undefined) {
            throw new Error(error_msgs.NULL_ARGUMENT);
        }
        return this._map.has(serviceIdentifier);
    };
    Lookup.prototype.clone = function () {
        var copy = new Lookup();
        this._map.forEach(function (value, key) {
            value.forEach(function (b) { return copy.add(key, b.clone()); });
        });
        return copy;
    };
    Lookup.prototype.traverse = function (func) {
        this._map.forEach(function (value, key) {
            func(key, value);
        });
    };
    return Lookup;
}());
exports.Lookup = Lookup;
});

unwrapExports(lookup);
var lookup_1 = lookup.Lookup;

var container = createCommonjsModule(function (module, exports) {
var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });












var Container = (function () {
    function Container(containerOptions) {
        var options = containerOptions || {};
        if (typeof options !== "object") {
            throw new Error("" + error_msgs.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT);
        }
        if (options.defaultScope === undefined) {
            options.defaultScope = literal_types.BindingScopeEnum.Transient;
        }
        else if (options.defaultScope !== literal_types.BindingScopeEnum.Singleton &&
            options.defaultScope !== literal_types.BindingScopeEnum.Transient &&
            options.defaultScope !== literal_types.BindingScopeEnum.Request) {
            throw new Error("" + error_msgs.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);
        }
        if (options.autoBindInjectable === undefined) {
            options.autoBindInjectable = false;
        }
        else if (typeof options.autoBindInjectable !== "boolean") {
            throw new Error("" + error_msgs.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE);
        }
        if (options.skipBaseClassChecks === undefined) {
            options.skipBaseClassChecks = false;
        }
        else if (typeof options.skipBaseClassChecks !== "boolean") {
            throw new Error("" + error_msgs.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK);
        }
        this.options = {
            autoBindInjectable: options.autoBindInjectable,
            defaultScope: options.defaultScope,
            skipBaseClassChecks: options.skipBaseClassChecks
        };
        this.id = id_1.id();
        this._bindingDictionary = new lookup.Lookup();
        this._snapshots = [];
        this._middleware = null;
        this.parent = null;
        this._metadataReader = new metadata_reader.MetadataReader();
    }
    Container.merge = function (container1, container2) {
        var container = new Container();
        var bindingDictionary = planner.getBindingDictionary(container);
        var bindingDictionary1 = planner.getBindingDictionary(container1);
        var bindingDictionary2 = planner.getBindingDictionary(container2);
        function copyDictionary(origin, destination) {
            origin.traverse(function (key, value) {
                value.forEach(function (binding) {
                    destination.add(binding.serviceIdentifier, binding.clone());
                });
            });
        }
        copyDictionary(bindingDictionary1, bindingDictionary);
        copyDictionary(bindingDictionary2, bindingDictionary);
        return container;
    };
    Container.prototype.load = function () {
        var modules = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            modules[_i] = arguments[_i];
        }
        var getHelpers = this._getContainerModuleHelpersFactory();
        for (var _a = 0, modules_1 = modules; _a < modules_1.length; _a++) {
            var currentModule = modules_1[_a];
            var containerModuleHelpers = getHelpers(currentModule.id);
            currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction);
        }
    };
    Container.prototype.loadAsync = function () {
        var modules = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            modules[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var getHelpers, _a, modules_2, currentModule, containerModuleHelpers;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        getHelpers = this._getContainerModuleHelpersFactory();
                        _a = 0, modules_2 = modules;
                        _b.label = 1;
                    case 1:
                        if (!(_a < modules_2.length)) return [3, 4];
                        currentModule = modules_2[_a];
                        containerModuleHelpers = getHelpers(currentModule.id);
                        return [4, currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _a++;
                        return [3, 1];
                    case 4: return [2];
                }
            });
        });
    };
    Container.prototype.unload = function () {
        var _this = this;
        var modules = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            modules[_i] = arguments[_i];
        }
        var conditionFactory = function (expected) { return function (item) {
            return item.moduleId === expected;
        }; };
        modules.forEach(function (module) {
            var condition = conditionFactory(module.id);
            _this._bindingDictionary.removeByCondition(condition);
        });
    };
    Container.prototype.bind = function (serviceIdentifier) {
        var scope = this.options.defaultScope || literal_types.BindingScopeEnum.Transient;
        var binding$1 = new binding.Binding(serviceIdentifier, scope);
        this._bindingDictionary.add(serviceIdentifier, binding$1);
        return new binding_to_syntax.BindingToSyntax(binding$1);
    };
    Container.prototype.rebind = function (serviceIdentifier) {
        this.unbind(serviceIdentifier);
        return this.bind(serviceIdentifier);
    };
    Container.prototype.unbind = function (serviceIdentifier) {
        try {
            this._bindingDictionary.remove(serviceIdentifier);
        }
        catch (e) {
            throw new Error(error_msgs.CANNOT_UNBIND + " " + serialization.getServiceIdentifierAsString(serviceIdentifier));
        }
    };
    Container.prototype.unbindAll = function () {
        this._bindingDictionary = new lookup.Lookup();
    };
    Container.prototype.isBound = function (serviceIdentifier) {
        var bound = this._bindingDictionary.hasKey(serviceIdentifier);
        if (!bound && this.parent) {
            bound = this.parent.isBound(serviceIdentifier);
        }
        return bound;
    };
    Container.prototype.isBoundNamed = function (serviceIdentifier, named) {
        return this.isBoundTagged(serviceIdentifier, metadata_keys.NAMED_TAG, named);
    };
    Container.prototype.isBoundTagged = function (serviceIdentifier, key, value) {
        var bound = false;
        if (this._bindingDictionary.hasKey(serviceIdentifier)) {
            var bindings = this._bindingDictionary.get(serviceIdentifier);
            var request_1 = planner.createMockRequest(this, serviceIdentifier, key, value);
            bound = bindings.some(function (b) { return b.constraint(request_1); });
        }
        if (!bound && this.parent) {
            bound = this.parent.isBoundTagged(serviceIdentifier, key, value);
        }
        return bound;
    };
    Container.prototype.snapshot = function () {
        this._snapshots.push(container_snapshot.ContainerSnapshot.of(this._bindingDictionary.clone(), this._middleware));
    };
    Container.prototype.restore = function () {
        var snapshot = this._snapshots.pop();
        if (snapshot === undefined) {
            throw new Error(error_msgs.NO_MORE_SNAPSHOTS_AVAILABLE);
        }
        this._bindingDictionary = snapshot.bindings;
        this._middleware = snapshot.middleware;
    };
    Container.prototype.createChild = function (containerOptions) {
        var child = new Container(containerOptions || this.options);
        child.parent = this;
        return child;
    };
    Container.prototype.applyMiddleware = function () {
        var middlewares = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            middlewares[_i] = arguments[_i];
        }
        var initial = (this._middleware) ? this._middleware : this._planAndResolve();
        this._middleware = middlewares.reduce(function (prev, curr) { return curr(prev); }, initial);
    };
    Container.prototype.applyCustomMetadataReader = function (metadataReader) {
        this._metadataReader = metadataReader;
    };
    Container.prototype.get = function (serviceIdentifier) {
        return this._get(false, false, literal_types.TargetTypeEnum.Variable, serviceIdentifier);
    };
    Container.prototype.getTagged = function (serviceIdentifier, key, value) {
        return this._get(false, false, literal_types.TargetTypeEnum.Variable, serviceIdentifier, key, value);
    };
    Container.prototype.getNamed = function (serviceIdentifier, named) {
        return this.getTagged(serviceIdentifier, metadata_keys.NAMED_TAG, named);
    };
    Container.prototype.getAll = function (serviceIdentifier) {
        return this._get(true, true, literal_types.TargetTypeEnum.Variable, serviceIdentifier);
    };
    Container.prototype.getAllTagged = function (serviceIdentifier, key, value) {
        return this._get(false, true, literal_types.TargetTypeEnum.Variable, serviceIdentifier, key, value);
    };
    Container.prototype.getAllNamed = function (serviceIdentifier, named) {
        return this.getAllTagged(serviceIdentifier, metadata_keys.NAMED_TAG, named);
    };
    Container.prototype.resolve = function (constructorFunction) {
        var tempContainer = this.createChild();
        tempContainer.bind(constructorFunction).toSelf();
        return tempContainer.get(constructorFunction);
    };
    Container.prototype._getContainerModuleHelpersFactory = function () {
        var _this = this;
        var setModuleId = function (bindingToSyntax, moduleId) {
            bindingToSyntax._binding.moduleId = moduleId;
        };
        var getBindFunction = function (moduleId) {
            return function (serviceIdentifier) {
                var _bind = _this.bind.bind(_this);
                var bindingToSyntax = _bind(serviceIdentifier);
                setModuleId(bindingToSyntax, moduleId);
                return bindingToSyntax;
            };
        };
        var getUnbindFunction = function (moduleId) {
            return function (serviceIdentifier) {
                var _unbind = _this.unbind.bind(_this);
                _unbind(serviceIdentifier);
            };
        };
        var getIsboundFunction = function (moduleId) {
            return function (serviceIdentifier) {
                var _isBound = _this.isBound.bind(_this);
                return _isBound(serviceIdentifier);
            };
        };
        var getRebindFunction = function (moduleId) {
            return function (serviceIdentifier) {
                var _rebind = _this.rebind.bind(_this);
                var bindingToSyntax = _rebind(serviceIdentifier);
                setModuleId(bindingToSyntax, moduleId);
                return bindingToSyntax;
            };
        };
        return function (mId) { return ({
            bindFunction: getBindFunction(mId),
            isboundFunction: getIsboundFunction(),
            rebindFunction: getRebindFunction(mId),
            unbindFunction: getUnbindFunction()
        }); };
    };
    Container.prototype._get = function (avoidConstraints, isMultiInject, targetType, serviceIdentifier, key, value) {
        var result = null;
        var defaultArgs = {
            avoidConstraints: avoidConstraints,
            contextInterceptor: function (context) { return context; },
            isMultiInject: isMultiInject,
            key: key,
            serviceIdentifier: serviceIdentifier,
            targetType: targetType,
            value: value
        };
        if (this._middleware) {
            result = this._middleware(defaultArgs);
            if (result === undefined || result === null) {
                throw new Error(error_msgs.INVALID_MIDDLEWARE_RETURN);
            }
        }
        else {
            result = this._planAndResolve()(defaultArgs);
        }
        return result;
    };
    Container.prototype._planAndResolve = function () {
        var _this = this;
        return function (args) {
            var context = planner.plan(_this._metadataReader, _this, args.isMultiInject, args.targetType, args.serviceIdentifier, args.key, args.value, args.avoidConstraints);
            context = args.contextInterceptor(context);
            var result = resolver.resolve(context);
            return result;
        };
    };
    return Container;
}());
exports.Container = Container;
});

unwrapExports(container);
var container_1 = container.Container;

var container_module = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

var ContainerModule = (function () {
    function ContainerModule(registry) {
        this.id = id_1.id();
        this.registry = registry;
    }
    return ContainerModule;
}());
exports.ContainerModule = ContainerModule;
var AsyncContainerModule = (function () {
    function AsyncContainerModule(registry) {
        this.id = id_1.id();
        this.registry = registry;
    }
    return AsyncContainerModule;
}());
exports.AsyncContainerModule = AsyncContainerModule;
});

unwrapExports(container_module);
var container_module_1 = container_module.ContainerModule;
var container_module_2 = container_module.AsyncContainerModule;

var injectable_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });


function injectable() {
    return function (target) {
        if (Reflect.hasOwnMetadata(metadata_keys.PARAM_TYPES, target)) {
            throw new Error(error_msgs.DUPLICATED_INJECTABLE_DECORATOR);
        }
        var types = Reflect.getMetadata(metadata_keys.DESIGN_PARAM_TYPES, target) || [];
        Reflect.defineMetadata(metadata_keys.PARAM_TYPES, types, target);
        return target;
    };
}
exports.injectable = injectable;
});

unwrapExports(injectable_1);
var injectable_2 = injectable_1.injectable;

var tagged_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });


function tagged(metadataKey, metadataValue) {
    return function (target, targetKey, index) {
        var metadata$1 = new metadata.Metadata(metadataKey, metadataValue);
        if (typeof index === "number") {
            decorator_utils.tagParameter(target, targetKey, index, metadata$1);
        }
        else {
            decorator_utils.tagProperty(target, targetKey, metadata$1);
        }
    };
}
exports.tagged = tagged;
});

unwrapExports(tagged_1);
var tagged_2 = tagged_1.tagged;

var named_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });



function named(name) {
    return function (target, targetKey, index) {
        var metadata$1 = new metadata.Metadata(metadata_keys.NAMED_TAG, name);
        if (typeof index === "number") {
            decorator_utils.tagParameter(target, targetKey, index, metadata$1);
        }
        else {
            decorator_utils.tagProperty(target, targetKey, metadata$1);
        }
    };
}
exports.named = named;
});

unwrapExports(named_1);
var named_2 = named_1.named;

var optional_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });



function optional() {
    return function (target, targetKey, index) {
        var metadata$1 = new metadata.Metadata(metadata_keys.OPTIONAL_TAG, true);
        if (typeof index === "number") {
            decorator_utils.tagParameter(target, targetKey, index, metadata$1);
        }
        else {
            decorator_utils.tagProperty(target, targetKey, metadata$1);
        }
    };
}
exports.optional = optional;
});

unwrapExports(optional_1);
var optional_2 = optional_1.optional;

var unmanaged_1 = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });



function unmanaged() {
    return function (target, targetKey, index) {
        var metadata$1 = new metadata.Metadata(metadata_keys.UNMANAGED_TAG, true);
        decorator_utils.tagParameter(target, targetKey, index, metadata$1);
    };
}
exports.unmanaged = unmanaged;
});

unwrapExports(unmanaged_1);
var unmanaged_2 = unmanaged_1.unmanaged;

var multi_inject = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });



function multiInject(serviceIdentifier) {
    return function (target, targetKey, index) {
        var metadata$1 = new metadata.Metadata(metadata_keys.MULTI_INJECT_TAG, serviceIdentifier);
        if (typeof index === "number") {
            decorator_utils.tagParameter(target, targetKey, index, metadata$1);
        }
        else {
            decorator_utils.tagProperty(target, targetKey, metadata$1);
        }
    };
}
exports.multiInject = multiInject;
});

unwrapExports(multi_inject);
var multi_inject_1 = multi_inject.multiInject;

var target_name = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });



function targetName(name) {
    return function (target, targetKey, index) {
        var metadata$1 = new metadata.Metadata(metadata_keys.NAME_TAG, name);
        decorator_utils.tagParameter(target, targetKey, index, metadata$1);
    };
}
exports.targetName = targetName;
});

unwrapExports(target_name);
var target_name_1 = target_name.targetName;

var post_construct = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });



function postConstruct() {
    return function (target, propertyKey, descriptor) {
        var metadata$1 = new metadata.Metadata(metadata_keys.POST_CONSTRUCT, propertyKey);
        if (Reflect.hasOwnMetadata(metadata_keys.POST_CONSTRUCT, target.constructor)) {
            throw new Error(error_msgs.MULTIPLE_POST_CONSTRUCT_METHODS);
        }
        Reflect.defineMetadata(metadata_keys.POST_CONSTRUCT, metadata$1, target.constructor);
    };
}
exports.postConstruct = postConstruct;
});

unwrapExports(post_construct);
var post_construct_1 = post_construct.postConstruct;

var binding_utils = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });
exports.multiBindToService = function (container) {
    return function (service) {
        return function () {
            var types = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                types[_i] = arguments[_i];
            }
            return types.forEach(function (t) { return container.bind(t).toService(service); });
        };
    };
};
});

unwrapExports(binding_utils);
var binding_utils_1 = binding_utils.multiBindToService;

var inversify = createCommonjsModule(function (module, exports) {
Object.defineProperty(exports, "__esModule", { value: true });

exports.METADATA_KEY = metadata_keys;

exports.Container = container.Container;

exports.BindingScopeEnum = literal_types.BindingScopeEnum;
exports.BindingTypeEnum = literal_types.BindingTypeEnum;
exports.TargetTypeEnum = literal_types.TargetTypeEnum;

exports.AsyncContainerModule = container_module.AsyncContainerModule;
exports.ContainerModule = container_module.ContainerModule;

exports.injectable = injectable_1.injectable;

exports.tagged = tagged_1.tagged;

exports.named = named_1.named;

exports.inject = inject_1.inject;
exports.LazyServiceIdentifer = inject_1.LazyServiceIdentifer;

exports.optional = optional_1.optional;

exports.unmanaged = unmanaged_1.unmanaged;

exports.multiInject = multi_inject.multiInject;

exports.targetName = target_name.targetName;

exports.postConstruct = post_construct.postConstruct;

exports.MetadataReader = metadata_reader.MetadataReader;

exports.id = id_1.id;

exports.decorate = decorator_utils.decorate;

exports.traverseAncerstors = constraint_helpers.traverseAncerstors;
exports.taggedConstraint = constraint_helpers.taggedConstraint;
exports.namedConstraint = constraint_helpers.namedConstraint;
exports.typeConstraint = constraint_helpers.typeConstraint;

exports.getServiceIdentifierAsString = serialization.getServiceIdentifierAsString;

exports.multiBindToService = binding_utils.multiBindToService;
});

unwrapExports(inversify);
var inversify_1 = inversify.METADATA_KEY;
var inversify_2 = inversify.Container;
var inversify_3 = inversify.BindingScopeEnum;
var inversify_4 = inversify.BindingTypeEnum;
var inversify_5 = inversify.TargetTypeEnum;
var inversify_6 = inversify.AsyncContainerModule;
var inversify_7 = inversify.ContainerModule;
var inversify_8 = inversify.injectable;
var inversify_9 = inversify.tagged;
var inversify_10 = inversify.named;
var inversify_11 = inversify.inject;
var inversify_12 = inversify.LazyServiceIdentifer;
var inversify_13 = inversify.optional;
var inversify_14 = inversify.unmanaged;
var inversify_15 = inversify.multiInject;
var inversify_16 = inversify.targetName;
var inversify_17 = inversify.postConstruct;
var inversify_18 = inversify.MetadataReader;
var inversify_19 = inversify.id;
var inversify_20 = inversify.decorate;
var inversify_21 = inversify.traverseAncerstors;
var inversify_22 = inversify.taggedConstraint;
var inversify_23 = inversify.namedConstraint;
var inversify_24 = inversify.typeConstraint;
var inversify_25 = inversify.getServiceIdentifierAsString;
var inversify_26 = inversify.multiBindToService;

function _createSuper$m(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$m(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$m() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var CursorInterface$4 = flowRuntime_umd.tdz(function () {
  return CursorInterface;
});
var RecordInterface$7 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var Cursor = (function (Module) {
  var _t$TypeParametersSymb;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _ = _Module$NS.Utils._;

  var _CursorTypeParametersSymbol = Symbol("CursorTypeParameters");

  var Cursor = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Cursor", function (Cursor) {
    var C = Cursor.typeParameter("C", undefined, flowRuntime_umd.object(flowRuntime_umd.property("normalize", flowRuntime_umd["function"](flowRuntime_umd.param("ahData", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$7)))))));
    var T = Cursor.typeParameter("T", undefined, flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))));
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_currentIndex", flowRuntime_umd.number()), flowRuntime_umd.property("_array", flowRuntime_umd.flowInto(T)), flowRuntime_umd.property("_collection", flowRuntime_umd.nullable(flowRuntime_umd.flowInto(C))), flowRuntime_umd.property("isClosed", flowRuntime_umd["boolean"]()), flowRuntime_umd.method("setCollection", flowRuntime_umd.param("aoCollection", flowRuntime_umd.flowInto(C)), flowRuntime_umd["return"](flowRuntime_umd.ref(CursorInterface$4, C, flowRuntime_umd.ref(RecordInterface$7), T))), flowRuntime_umd.method("setIterable", flowRuntime_umd.param("alArray", flowRuntime_umd.flowInto(T)), flowRuntime_umd["return"](flowRuntime_umd.ref(CursorInterface$4, C, flowRuntime_umd.ref(RecordInterface$7), T))), flowRuntime_umd.property("collectionName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.property("_collectionFactory", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.flowInto(C)))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("collection", flowRuntime_umd["return"](flowRuntime_umd.nullable(C))), flowRuntime_umd.method("toArray", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7)))))), flowRuntime_umd.method("next", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7))))), flowRuntime_umd.method("hasNext", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("close", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("count", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.number()))), flowRuntime_umd.method("forEach", flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$7)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("map", function (_fn) {
      var R = _fn.typeParameter("R");

      return [flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$7)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.flowInto(R), flowRuntime_umd.ref("Promise", flowRuntime_umd.flowInto(R)))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.nullable(R))))];
    }), flowRuntime_umd.method("filter", flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$7)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7)))))), flowRuntime_umd.method("find", flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$7)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7))))), flowRuntime_umd.method("compact", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7)))))), flowRuntime_umd.method("reduce", function (_fn2) {
      var I = _fn2.typeParameter("I");

      return [flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.flowInto(I)), flowRuntime_umd.param("_arg1", flowRuntime_umd.ref(RecordInterface$7)), flowRuntime_umd.param("_arg2", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.flowInto(I), flowRuntime_umd.ref("Promise", flowRuntime_umd.flowInto(I)))))), flowRuntime_umd.param("initialValue", flowRuntime_umd.flowInto(I)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", I))];
    }), flowRuntime_umd.method("first", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7))))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject")];
  })), _dec2 = inversify_8(), _dec3 = partOf(Module), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.number()), _dec5 = flowRuntime_umd.decorate(function () {
    return flowRuntime_umd.flowInto(this[_CursorTypeParametersSymbol].T);
  }), _dec6 = flowRuntime_umd.decorate(function () {
    return flowRuntime_umd.nullable(flowRuntime_umd.flowInto(this[_CursorTypeParametersSymbol].C));
  }), _dec7 = flowRuntime_umd.decorate(flowRuntime_umd["boolean"]()), _dec8 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.string())), _dec9 = flowRuntime_umd.decorate(function () {
    return flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.flowInto(this[_CursorTypeParametersSymbol].C)));
  }), _dec10 = inversify_11('CollectionFactory<*>'), _dec(_class = initialize(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = (_t$TypeParametersSymb = flowRuntime_umd.TypeParametersSymbol, _class3 = /*#__PURE__*/function (_CoreObject) {
    inherits(Cursor, _CoreObject);

    var _super = _createSuper$m(Cursor);

    createClass(Cursor, [{
      key: "setCollection",
      value: function setCollection(aoCollection) {
        var _aoCollectionType = flowRuntime_umd.flowInto(this[_CursorTypeParametersSymbol].C);

        var _returnType13 = flowRuntime_umd["return"](flowRuntime_umd.ref(CursorInterface$4, this[_CursorTypeParametersSymbol].C, flowRuntime_umd.ref(RecordInterface$7), this[_CursorTypeParametersSymbol].T));

        flowRuntime_umd.param("aoCollection", _aoCollectionType).assert(aoCollection);
        this._collection = aoCollection;
        return _returnType13.assert(this);
      }
    }, {
      key: "setIterable",
      value: function setIterable(alArray) {
        var _alArrayType = flowRuntime_umd.flowInto(this[_CursorTypeParametersSymbol].T);

        var _returnType14 = flowRuntime_umd["return"](flowRuntime_umd.ref(CursorInterface$4, this[_CursorTypeParametersSymbol].C, flowRuntime_umd.ref(RecordInterface$7), this[_CursorTypeParametersSymbol].T));

        flowRuntime_umd.param("alArray", _alArrayType).assert(alArray);
        this._array = alArray;
        return _returnType14.assert(this);
      }
    }]);

    function Cursor() {
      var _this;

      classCallCheck(this, Cursor);

      var _typeParameters = {
        C: flowRuntime_umd.typeParameter("C"),
        T: flowRuntime_umd.typeParameter("T")
      };

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      initializerDefineProperty(_this, "_currentIndex", _descriptor, assertThisInitialized(_this));

      initializerDefineProperty(_this, "_array", _descriptor2, assertThisInitialized(_this));

      initializerDefineProperty(_this, "_collection", _descriptor3, assertThisInitialized(_this));

      initializerDefineProperty(_this, "isClosed", _descriptor4, assertThisInitialized(_this));

      initializerDefineProperty(_this, "collectionName", _descriptor5, assertThisInitialized(_this));

      initializerDefineProperty(_this, "_collectionFactory", _descriptor6, assertThisInitialized(_this));

      _this[_CursorTypeParametersSymbol] = _typeParameters;
      flowRuntime_umd.ref(CursorInterface$4, _this[_CursorTypeParametersSymbol].C, flowRuntime_umd.ref(RecordInterface$7), _this[_CursorTypeParametersSymbol].T).assert(assertThisInitialized(_this));
      return _this;
    }

    createClass(Cursor, [{
      key: "toArray",
      value: function () {
        var _toArray = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var _returnType, results;

          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7))), flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7))))));
                  results = [];

                case 2:
                  _context.next = 4;
                  return this.hasNext();

                case 4:
                  if (!_context.sent) {
                    _context.next = 12;
                    break;
                  }

                  _context.t0 = results;
                  _context.next = 8;
                  return this.next();

                case 8:
                  _context.t1 = _context.sent;

                  _context.t0.push.call(_context.t0, _context.t1);

                  _context.next = 2;
                  break;

                case 12:
                  return _context.abrupt("return", _returnType.assert(results));

                case 13:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function toArray() {
          return _toArray.apply(this, arguments);
        }

        return toArray;
      }()
    }, {
      key: "next",
      value: function () {
        var _next = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          var _returnType2, data;

          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7)), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7)))));
                  _context2.next = 3;
                  return this._array[this._currentIndex];

                case 3:
                  data = _context2.sent;
                  this._currentIndex++;
                  _context2.t0 = _returnType2;
                  _context2.next = 8;
                  return this.collection != null ? this.collection.normalize(data) : data;

                case 8:
                  _context2.t1 = _context2.sent;
                  return _context2.abrupt("return", _context2.t0.assert.call(_context2.t0, _context2.t1));

                case 10:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function next() {
          return _next.apply(this, arguments);
        }

        return next;
      }()
    }, {
      key: "hasNext",
      value: function () {
        var _hasNext = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
          var _returnType3;

          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())));

                  if (!_.isNil(this._array)) {
                    _context3.next = 3;
                    break;
                  }

                  return _context3.abrupt("return", _returnType3.assert(false));

                case 3:
                  _context3.t0 = _returnType3;
                  _context3.next = 6;
                  return !_.isNil(this._array[this._currentIndex]);

                case 6:
                  _context3.t1 = _context3.sent;
                  return _context3.abrupt("return", _context3.t0.assert.call(_context3.t0, _context3.t1));

                case 8:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function hasNext() {
          return _hasNext.apply(this, arguments);
        }

        return hasNext;
      }()
    }, {
      key: "close",
      value: function () {
        var _close = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
          var _returnType4, j, i, len;

          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));

                  for (i = j = 0, len = this._array.length; j < len; i = ++j) {
                    delete this._array[i];
                  }

                  delete this._array;

                case 3:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function close() {
          return _close.apply(this, arguments);
        }

        return close;
      }()
    }, {
      key: "count",
      value: function () {
        var _count = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5() {
          var _returnType5, array, length;

          return regenerator.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.ref("Promise", flowRuntime_umd.number())));
                  array = this._array || [];
                  length = typeof array.length === "function" ? array.length() : undefined;
                  _context5.t0 = _returnType5;
                  _context5.next = 6;
                  return length || array.length;

                case 6:
                  _context5.t1 = _context5.sent;
                  return _context5.abrupt("return", _context5.t0.assert.call(_context5.t0, _context5.t1));

                case 8:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function count() {
          return _count.apply(this, arguments);
        }

        return count;
      }()
    }, {
      key: "forEach",
      value: function () {
        var _forEach = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee6(lambda) {
          var _lambdaType, _returnType6, index;

          return regenerator.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _lambdaType = flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$7)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))));
                  _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("lambda", _lambdaType).assert(lambda);
                  index = 0;
                  _context6.prev = 4;

                case 5:
                  _context6.next = 7;
                  return this.hasNext();

                case 7:
                  if (!_context6.sent) {
                    _context6.next = 17;
                    break;
                  }

                  _context6.t0 = lambda;
                  _context6.next = 11;
                  return this.next();

                case 11:
                  _context6.t1 = _context6.sent;
                  _context6.t2 = index++;
                  _context6.next = 15;
                  return (0, _context6.t0)(_context6.t1, _context6.t2);

                case 15:
                  _context6.next = 5;
                  break;

                case 17:
                  _context6.next = 24;
                  break;

                case 19:
                  _context6.prev = 19;
                  _context6.t3 = _context6["catch"](4);
                  _context6.next = 23;
                  return this.close();

                case 23:
                  throw _context6.t3;

                case 24:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this, [[4, 19]]);
        }));

        function forEach(_x) {
          return _forEach.apply(this, arguments);
        }

        return forEach;
      }()
    }, {
      key: "map",
      value: function () {
        var _map = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee7(lambda) {
          var R, _lambdaType2, _returnType7, index, results;

          return regenerator.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  R = flowRuntime_umd.typeParameter("R");
                  _lambdaType2 = flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$7)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.flowInto(R), flowRuntime_umd.ref("Promise", flowRuntime_umd.flowInto(R)))));
                  _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.array(flowRuntime_umd.nullable(R)), flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.nullable(R)))));
                  flowRuntime_umd.param("lambda", _lambdaType2).assert(lambda);
                  index = 0;
                  _context7.prev = 5;
                  results = [];

                case 7:
                  _context7.next = 9;
                  return this.hasNext();

                case 9:
                  if (!_context7.sent) {
                    _context7.next = 22;
                    break;
                  }

                  _context7.t0 = results;
                  _context7.t1 = lambda;
                  _context7.next = 14;
                  return this.next();

                case 14:
                  _context7.t2 = _context7.sent;
                  _context7.t3 = index++;
                  _context7.next = 18;
                  return (0, _context7.t1)(_context7.t2, _context7.t3);

                case 18:
                  _context7.t4 = _context7.sent;

                  _context7.t0.push.call(_context7.t0, _context7.t4);

                  _context7.next = 7;
                  break;

                case 22:
                  return _context7.abrupt("return", _returnType7.assert(results));

                case 25:
                  _context7.prev = 25;
                  _context7.t5 = _context7["catch"](5);
                  _context7.next = 29;
                  return this.close();

                case 29:
                  throw _context7.t5;

                case 30:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this, [[5, 25]]);
        }));

        function map(_x2) {
          return _map.apply(this, arguments);
        }

        return map;
      }()
    }, {
      key: "filter",
      value: function () {
        var _filter = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee8(lambda) {
          var _lambdaType3, _returnType8, index, records, record;

          return regenerator.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _lambdaType3 = flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$7)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))));
                  _returnType8 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7))), flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7))))));
                  flowRuntime_umd.param("lambda", _lambdaType3).assert(lambda);
                  index = 0;
                  records = [];
                  _context8.prev = 5;

                case 6:
                  _context8.next = 8;
                  return this.hasNext();

                case 8:
                  if (!_context8.sent) {
                    _context8.next = 18;
                    break;
                  }

                  _context8.next = 11;
                  return this.next();

                case 11:
                  record = _context8.sent;
                  _context8.next = 14;
                  return lambda(record, index++);

                case 14:
                  if (!_context8.sent) {
                    _context8.next = 16;
                    break;
                  }

                  records.push(record);

                case 16:
                  _context8.next = 6;
                  break;

                case 18:
                  return _context8.abrupt("return", _returnType8.assert(records));

                case 21:
                  _context8.prev = 21;
                  _context8.t0 = _context8["catch"](5);
                  _context8.next = 25;
                  return this.close();

                case 25:
                  throw _context8.t0;

                case 26:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this, [[5, 21]]);
        }));

        function filter(_x3) {
          return _filter.apply(this, arguments);
        }

        return filter;
      }()
    }, {
      key: "find",
      value: function () {
        var _find = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee9(lambda) {
          var _lambdaType4, _returnType9, index, _record, record;

          return regenerator.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _lambdaType4 = flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.ref(RecordInterface$7)), flowRuntime_umd.param("_arg1", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))));
                  _returnType9 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7)), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7)))));
                  flowRuntime_umd.param("lambda", _lambdaType4).assert(lambda);
                  index = 0;
                  _record = null;
                  _context9.prev = 5;

                case 6:
                  _context9.next = 8;
                  return this.hasNext();

                case 8:
                  if (!_context9.sent) {
                    _context9.next = 19;
                    break;
                  }

                  _context9.next = 11;
                  return this.next();

                case 11:
                  record = _context9.sent;
                  _context9.next = 14;
                  return lambda(record, index++);

                case 14:
                  if (!_context9.sent) {
                    _context9.next = 17;
                    break;
                  }

                  _record = record;
                  return _context9.abrupt("break", 19);

                case 17:
                  _context9.next = 6;
                  break;

                case 19:
                  return _context9.abrupt("return", _returnType9.assert(_record));

                case 22:
                  _context9.prev = 22;
                  _context9.t0 = _context9["catch"](5);
                  _context9.next = 26;
                  return this.close();

                case 26:
                  throw _context9.t0;

                case 27:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this, [[5, 22]]);
        }));

        function find(_x4) {
          return _find.apply(this, arguments);
        }

        return find;
      }()
    }, {
      key: "compact",
      value: function () {
        var _compact = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee10() {
          var _returnType10, results, rawResult, result;

          return regenerator.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _returnType10 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7))), flowRuntime_umd.ref("Promise", flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7))))));
                  results = [];
                  _context10.prev = 2;

                case 3:
                  _context10.t0 = this._currentIndex;
                  _context10.next = 6;
                  return this.count();

                case 6:
                  _context10.t1 = _context10.sent;

                  if (!(_context10.t0 < _context10.t1)) {
                    _context10.next = 17;
                    break;
                  }

                  rawResult = this._array[this._currentIndex];
                  ++this._currentIndex;

                  if (_.isEmpty(rawResult)) {
                    _context10.next = 15;
                    break;
                  }

                  _context10.next = 13;
                  return this.collection != null ? this.collection.normalize(rawResult) : rawResult;

                case 13:
                  result = _context10.sent;
                  results.push(result);

                case 15:
                  _context10.next = 3;
                  break;

                case 17:
                  return _context10.abrupt("return", _returnType10.assert(results));

                case 20:
                  _context10.prev = 20;
                  _context10.t2 = _context10["catch"](2);
                  _context10.next = 24;
                  return this.close();

                case 24:
                  throw _context10.t2;

                case 25:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this, [[2, 20]]);
        }));

        function compact() {
          return _compact.apply(this, arguments);
        }

        return compact;
      }()
    }, {
      key: "reduce",
      value: function () {
        var _reduce = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee11(lambda, initialValue) {
          var I, _lambdaType5, _initialValueType, _returnType11, index, _initialValue;

          return regenerator.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  I = flowRuntime_umd.typeParameter("I");
                  _lambdaType5 = flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.flowInto(I)), flowRuntime_umd.param("_arg1", flowRuntime_umd.ref(RecordInterface$7)), flowRuntime_umd.param("_arg2", flowRuntime_umd.number()), flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.flowInto(I), flowRuntime_umd.ref("Promise", flowRuntime_umd.flowInto(I)))));
                  _initialValueType = flowRuntime_umd.flowInto(I);
                  _returnType11 = flowRuntime_umd["return"](flowRuntime_umd.union(I, flowRuntime_umd.ref("Promise", I)));
                  flowRuntime_umd.param("lambda", _lambdaType5).assert(lambda);
                  flowRuntime_umd.param("initialValue", _initialValueType).assert(initialValue);
                  _context11.prev = 6;
                  index = 0;
                  _initialValue = initialValue;

                case 9:
                  _context11.next = 11;
                  return this.hasNext();

                case 11:
                  if (!_context11.sent) {
                    _context11.next = 23;
                    break;
                  }

                  _context11.t0 = lambda;
                  _context11.t1 = _initialValue;
                  _context11.next = 16;
                  return this.next();

                case 16:
                  _context11.t2 = _context11.sent;
                  _context11.t3 = index++;
                  _context11.next = 20;
                  return (0, _context11.t0)(_context11.t1, _context11.t2, _context11.t3);

                case 20:
                  _initialValue = _context11.sent;
                  _context11.next = 9;
                  break;

                case 23:
                  return _context11.abrupt("return", _returnType11.assert(_initialValue));

                case 26:
                  _context11.prev = 26;
                  _context11.t4 = _context11["catch"](6);
                  _context11.next = 30;
                  return this.close();

                case 30:
                  throw _context11.t4;

                case 31:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this, [[6, 26]]);
        }));

        function reduce(_x5, _x6) {
          return _reduce.apply(this, arguments);
        }

        return reduce;
      }()
    }, {
      key: "first",
      value: function () {
        var _first = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee12() {
          var _returnType12, result;

          return regenerator.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  _returnType12 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7)), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$7)))));
                  _context12.prev = 1;
                  _context12.next = 4;
                  return this.hasNext();

                case 4:
                  if (!_context12.sent) {
                    _context12.next = 10;
                    break;
                  }

                  _context12.next = 7;
                  return this.next();

                case 7:
                  _context12.t0 = _context12.sent;
                  _context12.next = 11;
                  break;

                case 10:
                  _context12.t0 = null;

                case 11:
                  result = _context12.t0;
                  _context12.next = 14;
                  return this.close();

                case 14:
                  return _context12.abrupt("return", _returnType12.assert(result));

                case 17:
                  _context12.prev = 17;
                  _context12.t1 = _context12["catch"](1);
                  _context12.next = 21;
                  return this.close();

                case 21:
                  throw _context12.t1;

                case 22:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12, this, [[1, 17]]);
        }));

        function first() {
          return _first.apply(this, arguments);
        }

        return first;
      }()
    }, {
      key: "collection",
      get: function get() {
        var _returnType15 = flowRuntime_umd["return"](flowRuntime_umd.nullable(this[_CursorTypeParametersSymbol].C));

        if (this.collectionName != null) {
          return _returnType15.assert(this._collectionFactory(this.collectionName));
        } else {
          return _returnType15.assert(this._collection);
        }
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee13() {
          var _typeParameters;

          return regenerator.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  _typeParameters = {
                    C: flowRuntime_umd.typeParameter("C"),
                    T: flowRuntime_umd.typeParameter("T")
                  };
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 2:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee13, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee14() {
          var _typeParameters;

          return regenerator.wrap(function _callee14$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  _typeParameters = {
                    C: flowRuntime_umd.typeParameter("C"),
                    T: flowRuntime_umd.typeParameter("T")
                  };
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 2:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee14, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    return Cursor;
  }(CoreObject)), _class3[_t$TypeParametersSymb] = _CursorTypeParametersSymbol, _class3.__filename = __filename$n, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = applyDecoratedDescriptor(_class2.prototype, "_currentIndex", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return 0;
    }
  }), _descriptor2 = applyDecoratedDescriptor(_class2.prototype, "_array", [_dec5, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = applyDecoratedDescriptor(_class2.prototype, "_collection", [_dec6, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = applyDecoratedDescriptor(_class2.prototype, "isClosed", [_dec7, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return false;
    }
  }), applyDecoratedDescriptor(_class2.prototype, "setCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setCollection"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "setIterable", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "setIterable"), _class2.prototype), _descriptor5 = applyDecoratedDescriptor(_class2.prototype, "collectionName", [_dec8, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor6 = applyDecoratedDescriptor(_class2.prototype, "_collectionFactory", [_dec9, _dec10, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), applyDecoratedDescriptor(_class2.prototype, "collection", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "collection"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "toArray", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "toArray"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "next", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "next"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "hasNext", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "hasNext"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "close", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "close"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "count", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "count"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "forEach", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "forEach"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "map", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "map"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "filter", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "filter"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "find", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "find"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "compact", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "compact"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "reduce", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "reduce"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "first", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "first"), _class2.prototype), applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class) || _class);
});

var __filename$o = '/mapper/Transform.js';

function _createSuper$n(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$n(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$n() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var JoiT$e = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var Transform = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      property = _Module$NS.property,
      joi = _Module$NS.Utils.joi;
  var Transform = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Transform", flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$e))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("normalizeSync", flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.staticMethod("serializeSync", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    inherits(Transform, _CoreObject);

    var _super = _createSuper$n(Transform);

    function Transform() {
      classCallCheck(this, Transform);

      return _super.apply(this, arguments);
    }

    createClass(Transform, null, [{
      key: "normalize",
      value: function () {
        var _normalize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var _args = arguments;
          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.normalizeSync.apply(this, _args));

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize() {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          var _args2 = arguments;
          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.serializeSync.apply(this, _args2));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize() {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "normalizeSync",
      value: function normalizeSync(serialized) {
        var _serializedType = flowRuntime_umd.nullable(flowRuntime_umd.any());

        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()));

        flowRuntime_umd.param("serialized", _serializedType).assert(serialized);

        if (serialized == null) {
          return _returnType2.assert(null);
        }

        return _returnType2.assert(serialized);
      }
    }, {
      key: "serializeSync",
      value: function serializeSync(deserialized) {
        var _deserializedType = flowRuntime_umd.nullable(flowRuntime_umd.any());

        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()));

        flowRuntime_umd.param("deserialized", _deserializedType).assert(deserialized);

        if (deserialized == null) {
          return _returnType3.assert(null);
        }

        return _returnType3.assert(deserialized);
      }
    }, {
      key: "objectize",
      value: function objectize(deserialized) {
        var _deserializedType2 = flowRuntime_umd.nullable(flowRuntime_umd.any());

        var _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()));

        flowRuntime_umd.param("deserialized", _deserializedType2).assert(deserialized);

        if (deserialized == null) {
          return _returnType4.assert(null);
        }

        return _returnType4.assert(deserialized);
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  assert.fail("restoreObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  assert.fail("replicateObject method not supported for ".concat(this.name));

                case 1:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "schema",
      get: function get() {
        var _returnType = flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$e));

        return _returnType.assert(joi.any().allow(null).optional());
      }
    }]);

    return Transform;
  }(CoreObject), _class3.__filename = __filename$o, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), applyDecoratedDescriptor(_class2, "normalizeSync", [method], Object.getOwnPropertyDescriptor(_class2, "normalizeSync"), _class2), applyDecoratedDescriptor(_class2, "serializeSync", [method], Object.getOwnPropertyDescriptor(_class2, "serializeSync"), _class2), applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$p = '/mapper/Serializer.js';

// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
// import type { TransformStaticInterface } from './TransformStaticInterface';
var SerializerInterface = flowRuntime_umd.type("SerializerInterface", function (SerializerInterface) {
  var R = SerializerInterface.typeParameter("R"),
      D = SerializerInterface.typeParameter("D");
  return flowRuntime_umd.object(flowRuntime_umd.property("normalize", flowRuntime_umd["function"](flowRuntime_umd.param("acRecord", R), flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(D))))), flowRuntime_umd.property("serialize", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(D)), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))))));
});

function _createSuper$o(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$o(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$o() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var RecordInterface$8 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$2 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var SerializerInterface$1 = flowRuntime_umd.tdz(function () {
  return SerializerInterface;
});
var Serializer = (function (Module) {
  var _t$TypeParametersSymb;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;

  var _SerializerTypeParametersSymbol = Symbol("SerializerTypeParameters");

  var Serializer = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Serializer", function (Serializer) {
    var R = Serializer.typeParameter("R", undefined, flowRuntime_umd.Class(flowRuntime_umd.existential()));
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("collectionName", flowRuntime_umd.string()), flowRuntime_umd.property("_collectionFactory", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$2, flowRuntime_umd.ref(RecordInterface$8))))), flowRuntime_umd.property("_recordFactory", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd.param("_arg1", flowRuntime_umd.ref("object")), flowRuntime_umd.param("_arg2", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(RecordInterface$8)))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("collection", flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$2, flowRuntime_umd.ref(RecordInterface$8)))), flowRuntime_umd.method("normalize", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$8))))), flowRuntime_umd.method("serialize", flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$8))), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(SerializerInterface$1, flowRuntime_umd.ref(RecordInterface$8))))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("instance", flowRuntime_umd.ref(SerializerInterface$1, flowRuntime_umd.ref(RecordInterface$8))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object"))))];
  })), _dec2 = inversify_8(), _dec3 = partOf(Module), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$2, flowRuntime_umd.ref(RecordInterface$8))))), _dec6 = inversify_11('CollectionFactory<*>'), _dec7 = flowRuntime_umd.decorate(flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd.param("_arg1", flowRuntime_umd.ref("object")), flowRuntime_umd.param("_arg2", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(RecordInterface$8)))), _dec8 = inversify_11('RecordFactory<*>'), _dec(_class = initialize(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = (_t$TypeParametersSymb = flowRuntime_umd.TypeParametersSymbol, _class3 = /*#__PURE__*/function (_CoreObject) {
    inherits(Serializer, _CoreObject);

    var _super = _createSuper$o(Serializer);

    function Serializer() {
      var _this;

      classCallCheck(this, Serializer);

      var _typeParameters = {
        R: flowRuntime_umd.typeParameter("R")
      };

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      initializerDefineProperty(_this, "collectionName", _descriptor, assertThisInitialized(_this));

      initializerDefineProperty(_this, "_collectionFactory", _descriptor2, assertThisInitialized(_this));

      initializerDefineProperty(_this, "_recordFactory", _descriptor3, assertThisInitialized(_this));

      _this[_SerializerTypeParametersSymbol] = _typeParameters;
      flowRuntime_umd.ref(SerializerInterface$1, _this[_SerializerTypeParametersSymbol].R, flowRuntime_umd.ref(RecordInterface$8)).assert(assertThisInitialized(_this));
      return _this;
    }

    createClass(Serializer, [{
      key: "normalize",
      value: function () {
        var _normalize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(acRecord, ahPayload) {
          var _acRecordType, _ahPayloadType, _returnType, _yield$acRecord$norma, _yield$acRecord$norma2, RecordClass, normalized;

          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _acRecordType = flowRuntime_umd.flowInto(this[_SerializerTypeParametersSymbol].R);
                  _ahPayloadType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$8)), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$8)))));
                  flowRuntime_umd.param("acRecord", _acRecordType).assert(acRecord);
                  flowRuntime_umd.param("ahPayload", _ahPayloadType).assert(ahPayload);

                  if (!(ahPayload == null)) {
                    _context.next = 7;
                    break;
                  }

                  return _context.abrupt("return", _returnType.assert(null));

                case 7:
                  _context.next = 9;
                  return acRecord.normalize(ahPayload, this.collection);

                case 9:
                  _yield$acRecord$norma = _context.sent;
                  _yield$acRecord$norma2 = slicedToArray(_yield$acRecord$norma, 2);
                  RecordClass = _yield$acRecord$norma2[0];
                  normalized = _yield$acRecord$norma2[1];
                  return _context.abrupt("return", _returnType.assert(this._recordFactory(RecordClass.name, normalized, this.collectionName)));

                case 14:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function normalize(_x, _x2) {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(aoRecord) {
          var options,
              _aoRecordType,
              _optionsType,
              _returnType2,
              vcRecord,
              _args2 = arguments;

          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : null;
                  _aoRecordType = flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$8));
                  _optionsType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.ref("object")), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))));
                  flowRuntime_umd.param("aoRecord", _aoRecordType).assert(aoRecord);
                  flowRuntime_umd.param("options", _optionsType).assert(options);

                  if (!(aoRecord == null)) {
                    _context2.next = 8;
                    break;
                  }

                  return _context2.abrupt("return", _returnType2.assert(null));

                case 8:
                  vcRecord = this[_SerializerTypeParametersSymbol].R.assert(aoRecord.constructor);
                  _context2.t0 = _returnType2;
                  _context2.next = 12;
                  return vcRecord.serialize(aoRecord, options);

                case 12:
                  _context2.t1 = _context2.sent;
                  return _context2.abrupt("return", _context2.t0.assert.call(_context2.t0, _context2.t1));

                case 14:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function serialize(_x3) {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "collection",
      get: function get() {
        var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$2, flowRuntime_umd.ref(RecordInterface$8)));

        return _returnType5.assert(this._collectionFactory(this.collectionName));
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(acModule, replica) {
          var _typeParameters, _acModuleType, _replicaType, _returnType3, Facade, facade, collection;

          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _typeParameters = {
                    R: flowRuntime_umd.typeParameter("R")
                  };
                  _acModuleType = flowRuntime_umd.Class(flowRuntime_umd.existential());
                  _replicaType = flowRuntime_umd.ref("object");
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(SerializerInterface$1, flowRuntime_umd.ref(RecordInterface$8)), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(SerializerInterface$1, flowRuntime_umd.ref(RecordInterface$8)))));
                  flowRuntime_umd.param("acModule", _acModuleType).assert(acModule);
                  flowRuntime_umd.param("replica", _replicaType).assert(replica);

                  if (!((replica != null ? replica["class"] : void 0) === this.name && (replica != null ? replica.type : void 0) === 'instance')) {
                    _context3.next = 13;
                    break;
                  }

                  Facade = acModule.NS.ApplicationFacade || acModule.NS.Facade;
                  facade = Facade.getInstance(replica.multitonKey);
                  collection = facade.getProxy(replica.collectionName);
                  return _context3.abrupt("return", _returnType3.assert(collection.serializer));

                case 13:
                  _context3.t0 = _returnType3;
                  _context3.next = 16;
                  return get(getPrototypeOf(Serializer), "restoreObject", this).call(this, acModule, replica);

                case 16:
                  _context3.t1 = _context3.sent;
                  return _context3.abrupt("return", _context3.t0.assert.call(_context3.t0, _context3.t1));

                case 18:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject(_x4, _x5) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(instance) {
          var _typeParameters, _instanceType, _returnType4, replica;

          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _typeParameters = {
                    R: flowRuntime_umd.typeParameter("R")
                  };
                  _instanceType = flowRuntime_umd.ref(SerializerInterface$1, flowRuntime_umd.ref(RecordInterface$8));
                  _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object"))));
                  flowRuntime_umd.param("instance", _instanceType).assert(instance);
                  _context4.next = 6;
                  return get(getPrototypeOf(Serializer), "replicateObject", this).call(this, instance);

                case 6:
                  replica = _context4.sent;
                  replica.multitonKey = instance.collection._multitonKey;
                  replica.collectionName = instance.collection.getName();
                  return _context4.abrupt("return", _returnType4.assert(replica));

                case 10:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject(_x6) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    return Serializer;
  }(CoreObject)), _class3[_t$TypeParametersSymb] = _SerializerTypeParametersSymbol, _class3.__filename = __filename$p, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = applyDecoratedDescriptor(_class2.prototype, "collectionName", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = applyDecoratedDescriptor(_class2.prototype, "_collectionFactory", [_dec5, _dec6, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = applyDecoratedDescriptor(_class2.prototype, "_recordFactory", [_dec7, _dec8, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), applyDecoratedDescriptor(_class2.prototype, "collection", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "collection"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "normalize", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "normalize"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "serialize", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "serialize"), _class2.prototype), applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class) || _class);
});

var __filename$q = '/mapper/Objectizer.js';

// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
// import type { RecordInterface } from './RecordInterface';
var ObjectizerInterface = flowRuntime_umd.type("ObjectizerInterface", function (ObjectizerInterface) {
  var R = ObjectizerInterface.typeParameter("R"),
      D = ObjectizerInterface.typeParameter("D");
  return flowRuntime_umd.object(flowRuntime_umd.property("recoverize", flowRuntime_umd["function"](flowRuntime_umd.param("acRecord", R), flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(D))))), flowRuntime_umd.property("objectize", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(D)), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))))));
});

function _createSuper$p(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$p(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$p() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var ObjectizerInterface$1 = flowRuntime_umd.tdz(function () {
  return ObjectizerInterface;
});
var RecordInterface$9 = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$3 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var Objectizer = (function (Module) {
  var _t$TypeParametersSymb;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy;

  var _ObjectizerTypeParametersSymbol = Symbol("ObjectizerTypeParameters");

  var Objectizer = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Objectizer", function (Objectizer) {
    var R = Objectizer.typeParameter("R", undefined, flowRuntime_umd.Class(flowRuntime_umd.existential()));
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("collectionName", flowRuntime_umd.string()), flowRuntime_umd.property("_collectionFactory", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$3, flowRuntime_umd.ref(RecordInterface$9))))), flowRuntime_umd.property("_recordFactory", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd.param("_arg1", flowRuntime_umd.ref("object")), flowRuntime_umd.param("_arg2", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(RecordInterface$9)))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("collection", flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$3, flowRuntime_umd.ref(RecordInterface$9)))), flowRuntime_umd.method("recoverize", flowRuntime_umd.param("acRecord", flowRuntime_umd.flowInto(R)), flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$9))))), flowRuntime_umd.method("objectize", flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$9))), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(ObjectizerInterface$1, R, flowRuntime_umd.ref(RecordInterface$9))))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("instance", flowRuntime_umd.ref(ObjectizerInterface$1, flowRuntime_umd.flowInto(R), flowRuntime_umd.ref(RecordInterface$9))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object"))))];
  })), _dec2 = inversify_8(), _dec3 = partOf(Module), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.string()), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$3, flowRuntime_umd.ref(RecordInterface$9))))), _dec6 = inversify_11('CollectionFactory<*>'), _dec7 = flowRuntime_umd.decorate(flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd.param("_arg1", flowRuntime_umd.ref("object")), flowRuntime_umd.param("_arg2", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(RecordInterface$9)))), _dec8 = inversify_11('RecordFactory<*>'), _dec(_class = initialize(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = (_t$TypeParametersSymb = flowRuntime_umd.TypeParametersSymbol, _class3 = /*#__PURE__*/function (_CoreObject) {
    inherits(Objectizer, _CoreObject);

    var _super = _createSuper$p(Objectizer);

    function Objectizer() {
      var _this;

      classCallCheck(this, Objectizer);

      var _typeParameters = {
        R: flowRuntime_umd.typeParameter("R")
      };

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      initializerDefineProperty(_this, "collectionName", _descriptor, assertThisInitialized(_this));

      initializerDefineProperty(_this, "_collectionFactory", _descriptor2, assertThisInitialized(_this));

      initializerDefineProperty(_this, "_recordFactory", _descriptor3, assertThisInitialized(_this));

      _this[_ObjectizerTypeParametersSymbol] = _typeParameters;
      flowRuntime_umd.ref(ObjectizerInterface$1, _this[_ObjectizerTypeParametersSymbol].R, flowRuntime_umd.ref(RecordInterface$9)).assert(assertThisInitialized(_this));
      return _this;
    }

    createClass(Objectizer, [{
      key: "recoverize",
      value: function () {
        var _recoverize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(acRecord, ahPayload) {
          var _acRecordType, _ahPayloadType, _returnType, _yield$acRecord$recov, _yield$acRecord$recov2, RecordClass, recoverized;

          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _acRecordType = flowRuntime_umd.flowInto(this[_ObjectizerTypeParametersSymbol].R);
                  _ahPayloadType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$9)), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$9)))));
                  flowRuntime_umd.param("acRecord", _acRecordType).assert(acRecord);
                  flowRuntime_umd.param("ahPayload", _ahPayloadType).assert(ahPayload);

                  if (!(ahPayload == null)) {
                    _context.next = 7;
                    break;
                  }

                  return _context.abrupt("return", _returnType.assert(null));

                case 7:
                  if (ahPayload.type == null) {
                    ahPayload.type = "".concat(acRecord.moduleName(), "::").concat(acRecord.name);
                  } // return await acRecord.recoverize(ahPayload, this.collection);


                  _context.next = 10;
                  return acRecord.recoverize(ahPayload, this.collection);

                case 10:
                  _yield$acRecord$recov = _context.sent;
                  _yield$acRecord$recov2 = slicedToArray(_yield$acRecord$recov, 2);
                  RecordClass = _yield$acRecord$recov2[0];
                  recoverized = _yield$acRecord$recov2[1];
                  return _context.abrupt("return", _returnType.assert(this._recordFactory(RecordClass.name, recoverized, this.collectionName)));

                case 15:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function recoverize(_x, _x2) {
          return _recoverize.apply(this, arguments);
        }

        return recoverize;
      }()
    }, {
      key: "objectize",
      value: function () {
        var _objectize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(aoRecord) {
          var options,
              _aoRecordType,
              _optionsType,
              _returnType2,
              vcRecord,
              _args2 = arguments;

          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : null;
                  _aoRecordType = flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$9));
                  _optionsType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.ref("object")), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))));
                  flowRuntime_umd.param("aoRecord", _aoRecordType).assert(aoRecord);
                  flowRuntime_umd.param("options", _optionsType).assert(options);

                  if (!(aoRecord == null)) {
                    _context2.next = 8;
                    break;
                  }

                  return _context2.abrupt("return", _returnType2.assert(null));

                case 8:
                  vcRecord = aoRecord.constructor;
                  return _context2.abrupt("return", _returnType2.assert(vcRecord.objectize(aoRecord, options)));

                case 10:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function objectize(_x3) {
          return _objectize.apply(this, arguments);
        }

        return objectize;
      }()
    }, {
      key: "collection",
      get: function get() {
        var _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$3, flowRuntime_umd.ref(RecordInterface$9)));

        return _returnType5.assert(this._collectionFactory(this.collectionName));
      }
    }], [{
      key: "restoreObject",
      value: function () {
        var _restoreObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(acModule, replica) {
          var _typeParameters, _acModuleType, _replicaType, _returnType3, Facade, facade, collection;

          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _typeParameters = {
                    R: flowRuntime_umd.typeParameter("R")
                  };
                  _acModuleType = flowRuntime_umd.Class(flowRuntime_umd.existential());
                  _replicaType = flowRuntime_umd.ref("object");
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(ObjectizerInterface$1, _typeParameters.R, flowRuntime_umd.ref(RecordInterface$9)), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(ObjectizerInterface$1, _typeParameters.R, flowRuntime_umd.ref(RecordInterface$9)))));
                  flowRuntime_umd.param("acModule", _acModuleType).assert(acModule);
                  flowRuntime_umd.param("replica", _replicaType).assert(replica);

                  if (!((replica != null ? replica["class"] : void 0) === this.name && (replica != null ? replica.type : void 0) === 'instance')) {
                    _context3.next = 13;
                    break;
                  }

                  Facade = acModule.NS.ApplicationFacade || acModule.NS.Facade;
                  facade = Facade.getInstance(replica.multitonKey);
                  collection = facade.getProxy(replica.collectionName);
                  return _context3.abrupt("return", _returnType3.assert(collection.objectizer));

                case 13:
                  _context3.t0 = _returnType3;
                  _context3.next = 16;
                  return get(getPrototypeOf(Objectizer), "restoreObject", this).call(this, acModule, replica);

                case 16:
                  _context3.t1 = _context3.sent;
                  return _context3.abrupt("return", _context3.t0.assert.call(_context3.t0, _context3.t1));

                case 18:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function restoreObject(_x4, _x5) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(instance) {
          var _typeParameters, _instanceType, _returnType4, replica;

          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _typeParameters = {
                    R: flowRuntime_umd.typeParameter("R")
                  };
                  _instanceType = flowRuntime_umd.ref(ObjectizerInterface$1, flowRuntime_umd.flowInto(_typeParameters.R), flowRuntime_umd.ref(RecordInterface$9));
                  _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object"))));
                  flowRuntime_umd.param("instance", _instanceType).assert(instance);
                  _context4.next = 6;
                  return get(getPrototypeOf(Objectizer), "replicateObject", this).call(this, instance);

                case 6:
                  replica = _context4.sent;
                  replica.multitonKey = instance.collection._multitonKey;
                  replica.collectionName = instance.collection.getName();
                  return _context4.abrupt("return", _returnType4.assert(replica));

                case 10:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function replicateObject(_x6) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }]);

    return Objectizer;
  }(CoreObject)), _class3[_t$TypeParametersSymb] = _ObjectizerTypeParametersSymbol, _class3.__filename = __filename$q, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = applyDecoratedDescriptor(_class2.prototype, "collectionName", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor2 = applyDecoratedDescriptor(_class2.prototype, "_collectionFactory", [_dec5, _dec6, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = applyDecoratedDescriptor(_class2.prototype, "_recordFactory", [_dec7, _dec8, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), applyDecoratedDescriptor(_class2.prototype, "collection", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "collection"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "recoverize", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "recoverize"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "objectize", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "objectize"), _class2.prototype), applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2)), _class2)) || _class) || _class) || _class) || _class);
});

var __filename$r = '/mapper/Record.js';

function _createSuper$q(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$q(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$q() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var JoiT$f = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var ComputedConfigT$2 = flowRuntime_umd.tdz(function () {
  return ComputedConfigT;
});
var AttributeConfigT$2 = flowRuntime_umd.tdz(function () {
  return AttributeConfigT;
});
var RecordInterface$a = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$4 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var hasProp$4 = {}.hasOwnProperty;
var Record = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3, _temp;

  var _Module$NS = Module.NS,
      CoreObject = _Module$NS.CoreObject,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      attribute = _Module$NS.attribute,
      chains = _Module$NS.chains,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      joi = _Module$NS$Utils.joi,
      inflect = _Module$NS$Utils.inflect;
  var schemas = new Map();
  var Record = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Record", function (Record) {
    return [flowRuntime_umd["extends"](CoreObject), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_internalRecord", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.staticMethod("_schemas"), flowRuntime_umd.property("collection", flowRuntime_umd.nullable(flowRuntime_umd.ref(CollectionInterface$4, flowRuntime_umd.ref(Record)))), flowRuntime_umd.staticMethod("schema", flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$f))), flowRuntime_umd.staticMethod("normalize", flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("aoCollection", flowRuntime_umd.nullable(flowRuntime_umd.ref(CollectionInterface$4, flowRuntime_umd.ref(RecordInterface$a)))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.tuple(flowRuntime_umd.Class(flowRuntime_umd.existential()), flowRuntime_umd.ref("object")))))), flowRuntime_umd.staticMethod("serialize", flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$a))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))), flowRuntime_umd.staticMethod("recoverize", flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("aoCollection", flowRuntime_umd.nullable(flowRuntime_umd.ref(CollectionInterface$4, flowRuntime_umd.ref(RecordInterface$a)))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.tuple(flowRuntime_umd.Class(flowRuntime_umd.existential()), flowRuntime_umd.ref("object")))))), flowRuntime_umd.staticMethod("objectize", flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$a))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.staticMethod("makeSnapshot", flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$a))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))), flowRuntime_umd.staticMethod("parseRecordName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.string()))), flowRuntime_umd.method("parseRecordName", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.staticMethod("findRecordByName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()))), flowRuntime_umd.method("findRecordByName", flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()))), flowRuntime_umd.staticMethod("customFilters", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.staticMethod("parentClassNames", flowRuntime_umd.param("AbstractClass", flowRuntime_umd.nullable(flowRuntime_umd.Class(flowRuntime_umd.existential()))), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.staticMethod("attributes", flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref(AttributeConfigT$2))))), flowRuntime_umd.staticMethod("computeds", flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref(ComputedConfigT$2))))), flowRuntime_umd.staticMethod("new", flowRuntime_umd.param("aoAttributes", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("aoCollection", flowRuntime_umd.ref(CollectionInterface$4, flowRuntime_umd.ref(Record))), flowRuntime_umd["return"](flowRuntime_umd.ref(RecordInterface$a))), flowRuntime_umd.method("save", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a)))), flowRuntime_umd.method("create", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a)))), flowRuntime_umd.method("update", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a)))), flowRuntime_umd.method("delete", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref(RecordInterface$a))))), flowRuntime_umd.method("destroy", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.property("id", flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd.property("type", flowRuntime_umd.any()), flowRuntime_umd.method("beforeCreate", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("afterCreate", flowRuntime_umd.param("aoRecord", flowRuntime_umd.ref(RecordInterface$a)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a)))), flowRuntime_umd.method("beforeUpdate", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("afterUpdate", flowRuntime_umd.param("aoRecord", flowRuntime_umd.ref(RecordInterface$a)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a)))), flowRuntime_umd.method("beforeDelete", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("afterDelete", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref(RecordInterface$a))))), flowRuntime_umd.method("beforeDestroy", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("afterDestroy", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("attributes", flowRuntime_umd["return"](flowRuntime_umd.ref("object"))), flowRuntime_umd.method("clone", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a)))), flowRuntime_umd.method("copy", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a)))), flowRuntime_umd.method("decrement", flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd.param("step", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a)))), flowRuntime_umd.method("increment", flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd.param("step", flowRuntime_umd.nullable(flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a)))), flowRuntime_umd.method("toggle", flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a)))), flowRuntime_umd.method("updateAttribute", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("value", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a)))), flowRuntime_umd.method("updateAttributes", flowRuntime_umd.param("aoAttributes", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a)))), flowRuntime_umd.method("isNew", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("reload", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a)))), flowRuntime_umd.method("changedAttributes", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.nullable(flowRuntime_umd.any()))))))), flowRuntime_umd.method("resetAttribute", flowRuntime_umd.param("asAttribute", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("rollbackAttributes", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("restoreObject", flowRuntime_umd.param("acModule", flowRuntime_umd.Class(flowRuntime_umd.existential())), flowRuntime_umd.param("replica", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a)))), flowRuntime_umd.staticMethod("replicateObject", flowRuntime_umd.param("instance", flowRuntime_umd.ref(RecordInterface$a)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object")))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("aoProperties", flowRuntime_umd.ref("object")), flowRuntime_umd.param("aoCollection", flowRuntime_umd.nullable(flowRuntime_umd.ref(CollectionInterface$4, flowRuntime_umd.ref(Record))))), flowRuntime_umd.method("toJSON")];
  })), _dec2 = chains(['create', 'update', 'delete', 'destroy'], function () {
    this.beforeHook('beforeCreate', {
      only: ['create']
    });
    this.beforeHook('beforeUpdate', {
      only: ['update']
    });
    this.afterHook('afterUpdate', {
      only: ['update']
    });
    this.afterHook('afterCreate', {
      only: ['create']
    });
    this.beforeHook('beforeDelete', {
      only: ['delete']
    });
    this.afterHook('afterDelete', {
      only: ['delete']
    });
    this.beforeHook('beforeDestroy', {
      only: ['destroy']
    });
    this.afterHook('afterDestroy', {
      only: ['destroy']
    });
  }), _dec3 = partOf(Module), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), _dec5 = flowRuntime_umd.decorate(function () {
    return flowRuntime_umd.nullable(flowRuntime_umd.ref(CollectionInterface$4, flowRuntime_umd.ref(Record)));
  }), _dec6 = flowRuntime_umd.decorate(flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), _dec7 = attribute({
    type: 'primary_key'
  }), _dec8 = attribute({
    type: 'string'
  }), _dec(_class = initialize(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_CoreObject) {
    inherits(Record, _CoreObject);

    var _super = _createSuper$q(Record);

    createClass(Record, [{
      key: "parseRecordName",
      value: function parseRecordName() {
        var _this$constructor;

        return (_this$constructor = this.constructor).parseRecordName.apply(_this$constructor, arguments);
      } // @method static findRecordByName(asName: string): RecordStaticInterface {

    }, {
      key: "findRecordByName",
      // @method findRecordByName(asName: string): RecordStaticInterface {
      value: function findRecordByName(asName) {
        var _asNameType3 = flowRuntime_umd.string();

        var _returnType32 = flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()));

        flowRuntime_umd.param("asName", _asNameType3).assert(asName);
        return _returnType32.assert(this.constructor.findRecordByName(asName));
      }
    }, {
      key: "save",
      value: function () {
        var _save = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var _returnType4, result;

          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$a), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a))));
                  _context.next = 3;
                  return this.isNew();

                case 3:
                  if (!_context.sent) {
                    _context.next = 9;
                    break;
                  }

                  _context.next = 6;
                  return this.create();

                case 6:
                  _context.t0 = _context.sent;
                  _context.next = 12;
                  break;

                case 9:
                  _context.next = 11;
                  return this.update();

                case 11:
                  _context.t0 = _context.sent;

                case 12:
                  result = _context.t0;
                  return _context.abrupt("return", _returnType4.assert(result));

                case 14:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function save() {
          return _save.apply(this, arguments);
        }

        return save;
      }()
    }, {
      key: "create",
      value: function () {
        var _create = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2() {
          var _returnType5, response, voAttributes, asAttr;

          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$a), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a))));

                  if (!(this.collection == null)) {
                    _context2.next = 3;
                    break;
                  }

                  return _context2.abrupt("return", _returnType5.assert(this));

                case 3:
                  _context2.next = 5;
                  return this.collection.push(this);

                case 5:
                  response = _context2.sent;

                  if (!(response != null)) {
                    _context2.next = 17;
                    break;
                  }

                  voAttributes = this.constructor.attributes;
                  _context2.t0 = regenerator.keys(voAttributes);

                case 9:
                  if ((_context2.t1 = _context2.t0()).done) {
                    _context2.next = 16;
                    break;
                  }

                  asAttr = _context2.t1.value;

                  if (hasProp$4.call(voAttributes, asAttr)) {
                    _context2.next = 13;
                    break;
                  }

                  return _context2.abrupt("continue", 9);

                case 13:
                  this[asAttr] = response[asAttr];
                  _context2.next = 9;
                  break;

                case 16:
                  this._internalRecord = response._internalRecord;

                case 17:
                  return _context2.abrupt("return", _returnType5.assert(this));

                case 18:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function create() {
          return _create.apply(this, arguments);
        }

        return create;
      }()
    }, {
      key: "update",
      value: function () {
        var _update = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3() {
          var _returnType6, response, voAttributes, asAttr;

          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$a), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a))));

                  if (!(this.collection == null)) {
                    _context3.next = 3;
                    break;
                  }

                  return _context3.abrupt("return", _returnType6.assert(this));

                case 3:
                  _context3.next = 5;
                  return this.collection.override(this.id, this);

                case 5:
                  response = _context3.sent;

                  if (!(response != null)) {
                    _context3.next = 17;
                    break;
                  }

                  voAttributes = this.constructor.attributes;
                  _context3.t0 = regenerator.keys(voAttributes);

                case 9:
                  if ((_context3.t1 = _context3.t0()).done) {
                    _context3.next = 16;
                    break;
                  }

                  asAttr = _context3.t1.value;

                  if (hasProp$4.call(voAttributes, asAttr)) {
                    _context3.next = 13;
                    break;
                  }

                  return _context3.abrupt("continue", 9);

                case 13:
                  this[asAttr] = response[asAttr];
                  _context3.next = 9;
                  break;

                case 16:
                  this._internalRecord = response._internalRecord;

                case 17:
                  return _context3.abrupt("return", _returnType6.assert(this));

                case 18:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function update() {
          return _update.apply(this, arguments);
        }

        return update;
      }()
    }, {
      key: 'delete',
      value: function () {
        var _delete2 = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4() {
          var _returnType7;

          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref(RecordInterface$a)), flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref(RecordInterface$a)))));

                  if (!(this.collection == null)) {
                    _context4.next = 3;
                    break;
                  }

                  return _context4.abrupt("return", _returnType7.assert());

                case 3:
                  _context4.next = 5;
                  return this.isNew();

                case 5:
                  if (!_context4.sent) {
                    _context4.next = 7;
                    break;
                  }

                  assert.fail('Document is not exist in collection');

                case 7:
                  _context4.next = 9;
                  return this.collection.remove(this.id);

                case 9:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function _delete() {
          return _delete2.apply(this, arguments);
        }

        return _delete;
      }()
    }, {
      key: "destroy",
      value: function () {
        var _destroy = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5() {
          var _returnType8;

          return regenerator.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _returnType8 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));

                  if (!(this.collection == null)) {
                    _context5.next = 3;
                    break;
                  }

                  return _context5.abrupt("return", _returnType8.assert());

                case 3:
                  _context5.next = 5;
                  return this.isNew();

                case 5:
                  if (!_context5.sent) {
                    _context5.next = 7;
                    break;
                  }

                  assert.fail('Document is not exist in collection');

                case 7:
                  _context5.next = 9;
                  return this.collection.remove(this.id);

                case 9:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function destroy() {
          return _destroy.apply(this, arguments);
        }

        return destroy;
      }()
    }, {
      key: "beforeCreate",
      // @attribute({
      //   type: 'boolean',
      //   validate: () => joi.boolean().empty(null).default(false)
      // }) isHidden = false;
      // @attribute({ type: 'date' }) createdAt = null;
      // @attribute({ type: 'date' }) updatedAt = null;
      // @attribute({ type: 'date' }) deletedAt = null;
      value: function () {
        var _beforeCreate = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee6() {
          var _len,
              args,
              _key,
              _args6 = arguments;

          return regenerator.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  for (_len = _args6.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = _args6[_key];
                  }

                  if (!(this.collection == null)) {
                    _context6.next = 3;
                    break;
                  }

                  return _context6.abrupt("return", args);

                case 3:
                  if (!(this.id == null)) {
                    _context6.next = 7;
                    break;
                  }

                  _context6.next = 6;
                  return this.collection.generateId();

                case 6:
                  this.id = _context6.sent;

                case 7:
                  return _context6.abrupt("return", args);

                case 8:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function beforeCreate() {
          return _beforeCreate.apply(this, arguments);
        }

        return beforeCreate;
      }()
    }, {
      key: "afterCreate",
      value: function () {
        var _afterCreate = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee7(aoRecord) {
          var _aoRecordType4, _returnType9;

          return regenerator.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _aoRecordType4 = flowRuntime_umd.ref(RecordInterface$a);
                  _returnType9 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$a), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a))));
                  flowRuntime_umd.param("aoRecord", _aoRecordType4).assert(aoRecord);

                  if (!(this.collection == null)) {
                    _context7.next = 5;
                    break;
                  }

                  return _context7.abrupt("return", _returnType9.assert(this));

                case 5:
                  this.collection.recordHasBeenChanged('createdRecord', aoRecord);
                  return _context7.abrupt("return", _returnType9.assert(this));

                case 7:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function afterCreate(_x) {
          return _afterCreate.apply(this, arguments);
        }

        return afterCreate;
      }()
    }, {
      key: "beforeUpdate",
      value: function () {
        var _beforeUpdate = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee8() {
          var _len2,
              args,
              _key2,
              _args8 = arguments;

          return regenerator.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  for (_len2 = _args8.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = _args8[_key2];
                  }

                  return _context8.abrupt("return", args);

                case 2:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8);
        }));

        function beforeUpdate() {
          return _beforeUpdate.apply(this, arguments);
        }

        return beforeUpdate;
      }()
    }, {
      key: "afterUpdate",
      value: function () {
        var _afterUpdate = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee9(aoRecord) {
          var _aoRecordType5, _returnType10;

          return regenerator.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _aoRecordType5 = flowRuntime_umd.ref(RecordInterface$a);
                  _returnType10 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$a), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a))));
                  flowRuntime_umd.param("aoRecord", _aoRecordType5).assert(aoRecord);

                  if (!(this.collection == null)) {
                    _context9.next = 5;
                    break;
                  }

                  return _context9.abrupt("return", _returnType10.assert(this));

                case 5:
                  this.collection.recordHasBeenChanged('updatedRecord', aoRecord);
                  return _context9.abrupt("return", _returnType10.assert(this));

                case 7:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));

        function afterUpdate(_x2) {
          return _afterUpdate.apply(this, arguments);
        }

        return afterUpdate;
      }()
    }, {
      key: "beforeDelete",
      value: function () {
        var _beforeDelete = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee10() {
          var _len3,
              args,
              _key3,
              _args10 = arguments;

          return regenerator.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  for (_len3 = _args10.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                    args[_key3] = _args10[_key3];
                  }

                  return _context10.abrupt("return", args);

                case 2:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10);
        }));

        function beforeDelete() {
          return _beforeDelete.apply(this, arguments);
        }

        return beforeDelete;
      }()
    }, {
      key: "afterDelete",
      value: function () {
        var _afterDelete = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee11() {
          var _returnType11;

          return regenerator.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  _returnType11 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref(RecordInterface$a)), flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref(RecordInterface$a)))));

                  if (!(this.collection == null)) {
                    _context11.next = 3;
                    break;
                  }

                  return _context11.abrupt("return", _returnType11.assert());

                case 3:
                  this.collection.recordHasBeenChanged('deletedRecord', this);

                case 4:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this);
        }));

        function afterDelete() {
          return _afterDelete.apply(this, arguments);
        }

        return afterDelete;
      }()
    }, {
      key: "beforeDestroy",
      value: function () {
        var _beforeDestroy = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee12() {
          var _len4,
              args,
              _key4,
              _args12 = arguments;

          return regenerator.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  for (_len4 = _args12.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                    args[_key4] = _args12[_key4];
                  }

                  return _context12.abrupt("return", args);

                case 2:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12);
        }));

        function beforeDestroy() {
          return _beforeDestroy.apply(this, arguments);
        }

        return beforeDestroy;
      }()
    }, {
      key: "afterDestroy",
      value: function () {
        var _afterDestroy = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee13() {
          var _returnType12;

          return regenerator.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  _returnType12 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));

                  if (!(this.collection == null)) {
                    _context13.next = 3;
                    break;
                  }

                  return _context13.abrupt("return", _returnType12.assert());

                case 3:
                  this.collection.recordHasBeenChanged('destroyedRecord', this);

                case 4:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee13, this);
        }));

        function afterDestroy() {
          return _afterDestroy.apply(this, arguments);
        }

        return afterDestroy;
      }() // NOTE: метод должен вернуть список атрибутов данного рекорда.

    }, {
      key: "attributes",
      value: function attributes() {
        var _returnType38 = flowRuntime_umd["return"](flowRuntime_umd.ref("object"));

        return _returnType38.assert(Object.keys(this.constructor.attributes));
      } // NOTE: в оперативной памяти создается клон рекорда, НО с другим id

    }, {
      key: "clone",
      value: function () {
        var _clone = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee14() {
          var _returnType13, vhAttributes, vlAttributes, _i, _vlAttributes, _key5, voRecord;

          return regenerator.wrap(function _callee14$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  _returnType13 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$a), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a))));
                  vhAttributes = {};
                  vlAttributes = Object.keys(this.constructor.attributes);

                  for (_i = 0, _vlAttributes = vlAttributes; _i < _vlAttributes.length; _i++) {
                    _key5 = _vlAttributes[_i];
                    vhAttributes[_key5] = this[_key5];
                  }

                  voRecord = this.constructor["new"](vhAttributes, this.collection);
                  _context14.next = 7;
                  return this.collection.generateId();

                case 7:
                  voRecord.id = _context14.sent;
                  return _context14.abrupt("return", _returnType13.assert(voRecord));

                case 9:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee14, this);
        }));

        function clone() {
          return _clone.apply(this, arguments);
        }

        return clone;
      }() // NOTE: в коллекции создается копия рекорда, НО с другим id

    }, {
      key: "copy",
      value: function () {
        var _copy = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee15() {
          var _returnType14, voRecord;

          return regenerator.wrap(function _callee15$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  _returnType14 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$a), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a))));
                  _context15.next = 3;
                  return this.clone();

                case 3:
                  voRecord = _context15.sent;
                  _context15.next = 6;
                  return voRecord.save();

                case 6:
                  return _context15.abrupt("return", _returnType14.assert(voRecord));

                case 7:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee15, this);
        }));

        function copy() {
          return _copy.apply(this, arguments);
        }

        return copy;
      }()
    }, {
      key: "decrement",
      value: function () {
        var _decrement = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee16(asAttribute) {
          var step,
              _asAttributeType,
              _stepType,
              _returnType15,
              _args16 = arguments;

          return regenerator.wrap(function _callee16$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  step = _args16.length > 1 && _args16[1] !== undefined ? _args16[1] : 1;
                  _asAttributeType = flowRuntime_umd.string();
                  _stepType = flowRuntime_umd.nullable(flowRuntime_umd.number());
                  _returnType15 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$a), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a))));
                  flowRuntime_umd.param("asAttribute", _asAttributeType).assert(asAttribute);
                  flowRuntime_umd.param("step", _stepType).assert(step);
                  assert(_.isNumber(this[asAttribute]), "doc.attribute `".concat(asAttribute, "` is not Number"));
                  this[asAttribute] -= step;
                  _context16.t0 = _returnType15;
                  _context16.next = 11;
                  return this.save();

                case 11:
                  _context16.t1 = _context16.sent;
                  return _context16.abrupt("return", _context16.t0.assert.call(_context16.t0, _context16.t1));

                case 13:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee16, this);
        }));

        function decrement(_x3) {
          return _decrement.apply(this, arguments);
        }

        return decrement;
      }()
    }, {
      key: "increment",
      value: function () {
        var _increment = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee17(asAttribute) {
          var step,
              _asAttributeType2,
              _stepType2,
              _returnType16,
              _args17 = arguments;

          return regenerator.wrap(function _callee17$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  step = _args17.length > 1 && _args17[1] !== undefined ? _args17[1] : 1;
                  _asAttributeType2 = flowRuntime_umd.string();
                  _stepType2 = flowRuntime_umd.nullable(flowRuntime_umd.number());
                  _returnType16 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$a), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a))));
                  flowRuntime_umd.param("asAttribute", _asAttributeType2).assert(asAttribute);
                  flowRuntime_umd.param("step", _stepType2).assert(step);
                  assert(_.isNumber(this[asAttribute]), "doc.attribute `".concat(asAttribute, "` is not Number"));
                  this[asAttribute] += step;
                  _context17.t0 = _returnType16;
                  _context17.next = 11;
                  return this.save();

                case 11:
                  _context17.t1 = _context17.sent;
                  return _context17.abrupt("return", _context17.t0.assert.call(_context17.t0, _context17.t1));

                case 13:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee17, this);
        }));

        function increment(_x4) {
          return _increment.apply(this, arguments);
        }

        return increment;
      }()
    }, {
      key: "toggle",
      value: function () {
        var _toggle = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee18(asAttribute) {
          var _asAttributeType3, _returnType17;

          return regenerator.wrap(function _callee18$(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  _asAttributeType3 = flowRuntime_umd.string();
                  _returnType17 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$a), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a))));
                  flowRuntime_umd.param("asAttribute", _asAttributeType3).assert(asAttribute);
                  assert(_.isBoolean(this[asAttribute]), "doc.attribute `".concat(asAttribute, "` is not Boolean"));
                  this[asAttribute] = !this[asAttribute];
                  _context18.t0 = _returnType17;
                  _context18.next = 8;
                  return this.save();

                case 8:
                  _context18.t1 = _context18.sent;
                  return _context18.abrupt("return", _context18.t0.assert.call(_context18.t0, _context18.t1));

                case 10:
                case "end":
                  return _context18.stop();
              }
            }
          }, _callee18, this);
        }));

        function toggle(_x5) {
          return _toggle.apply(this, arguments);
        }

        return toggle;
      }() // @method async touch(): Promise<RecordInterface> {
      //   this.updatedAt = new Date();
      //   return await this.save();
      // }

    }, {
      key: "updateAttribute",
      value: function () {
        var _updateAttribute = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee19(name, value) {
          var _nameType, _valueType, _returnType18;

          return regenerator.wrap(function _callee19$(_context19) {
            while (1) {
              switch (_context19.prev = _context19.next) {
                case 0:
                  _nameType = flowRuntime_umd.string();
                  _valueType = flowRuntime_umd.nullable(flowRuntime_umd.any());
                  _returnType18 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$a), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a))));
                  flowRuntime_umd.param("name", _nameType).assert(name);
                  flowRuntime_umd.param("value", _valueType).assert(value);
                  this[name] = value;
                  _context19.t0 = _returnType18;
                  _context19.next = 9;
                  return this.save();

                case 9:
                  _context19.t1 = _context19.sent;
                  return _context19.abrupt("return", _context19.t0.assert.call(_context19.t0, _context19.t1));

                case 11:
                case "end":
                  return _context19.stop();
              }
            }
          }, _callee19, this);
        }));

        function updateAttribute(_x6, _x7) {
          return _updateAttribute.apply(this, arguments);
        }

        return updateAttribute;
      }()
    }, {
      key: "updateAttributes",
      value: function () {
        var _updateAttributes = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee20(aoAttributes) {
          var _aoAttributesType2, _returnType19, vsAttrName, voAttrValue;

          return regenerator.wrap(function _callee20$(_context20) {
            while (1) {
              switch (_context20.prev = _context20.next) {
                case 0:
                  _aoAttributesType2 = flowRuntime_umd.ref("object");
                  _returnType19 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$a), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a))));
                  flowRuntime_umd.param("aoAttributes", _aoAttributesType2).assert(aoAttributes);
                  _context20.t0 = regenerator.keys(aoAttributes);

                case 4:
                  if ((_context20.t1 = _context20.t0()).done) {
                    _context20.next = 12;
                    break;
                  }

                  vsAttrName = _context20.t1.value;

                  if (hasProp$4.call(aoAttributes, vsAttrName)) {
                    _context20.next = 8;
                    break;
                  }

                  return _context20.abrupt("continue", 4);

                case 8:
                  voAttrValue = aoAttributes[vsAttrName];
                  this[vsAttrName] = voAttrValue;
                  _context20.next = 4;
                  break;

                case 12:
                  _context20.t2 = _returnType19;
                  _context20.next = 15;
                  return this.save();

                case 15:
                  _context20.t3 = _context20.sent;
                  return _context20.abrupt("return", _context20.t2.assert.call(_context20.t2, _context20.t3));

                case 17:
                case "end":
                  return _context20.stop();
              }
            }
          }, _callee20, this);
        }));

        function updateAttributes(_x8) {
          return _updateAttributes.apply(this, arguments);
        }

        return updateAttributes;
      }()
    }, {
      key: "isNew",
      value: function () {
        var _isNew = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee21() {
          var _returnType20;

          return regenerator.wrap(function _callee21$(_context21) {
            while (1) {
              switch (_context21.prev = _context21.next) {
                case 0:
                  _returnType20 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())));

                  if (!(this.collection == null)) {
                    _context21.next = 3;
                    break;
                  }

                  return _context21.abrupt("return", _returnType20.assert(true));

                case 3:
                  if (!(this.id == null)) {
                    _context21.next = 5;
                    break;
                  }

                  return _context21.abrupt("return", _returnType20.assert(true));

                case 5:
                  _context21.t0 = _returnType20;
                  _context21.next = 8;
                  return this.collection.includes(this.id);

                case 8:
                  _context21.t1 = !_context21.sent;
                  return _context21.abrupt("return", _context21.t0.assert.call(_context21.t0, _context21.t1));

                case 10:
                case "end":
                  return _context21.stop();
              }
            }
          }, _callee21, this);
        }));

        function isNew() {
          return _isNew.apply(this, arguments);
        }

        return isNew;
      }() // TODO: надо реализовать, НО пока не понятно как перезагрузить все атрибуты этого же рекорда новыми значениями из базы данных?

    }, {
      key: "reload",
      value: function () {
        var _reload = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee22() {
          var _returnType21;

          return regenerator.wrap(function _callee22$(_context22) {
            while (1) {
              switch (_context22.prev = _context22.next) {
                case 0:
                  _returnType21 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$a), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a))));
                  return _context22.abrupt("return", _returnType21.assert(assert.fail('not supported yet')));

                case 2:
                case "end":
                  return _context22.stop();
              }
            }
          }, _callee22);
        }));

        function reload() {
          return _reload.apply(this, arguments);
        }

        return reload;
      }() // TODO: не учтены установки значений, которые раньше не были установлены

    }, {
      key: "changedAttributes",
      value: function () {
        var _changedAttributes = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee23() {
          var _returnType22, vhResult, voAttributes, vsAttrName, transform, internalRecord, voOldValue, vcTransform, voNewValue;

          return regenerator.wrap(function _callee23$(_context23) {
            while (1) {
              switch (_context23.prev = _context23.next) {
                case 0:
                  _returnType22 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.nullable(flowRuntime_umd.any())))), flowRuntime_umd.ref("Promise", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.tuple(flowRuntime_umd.nullable(flowRuntime_umd.any()), flowRuntime_umd.nullable(flowRuntime_umd.any())))))));
                  vhResult = {};
                  voAttributes = this.constructor.attributes;
                  _context23.t0 = regenerator.keys(voAttributes);

                case 4:
                  if ((_context23.t1 = _context23.t0()).done) {
                    _context23.next = 16;
                    break;
                  }

                  vsAttrName = _context23.t1.value;

                  if (hasProp$4.call(voAttributes, vsAttrName)) {
                    _context23.next = 8;
                    break;
                  }

                  return _context23.abrupt("continue", 4);

                case 8:
                  transform = voAttributes[vsAttrName].transform;
                  internalRecord = this._internalRecord;
                  voOldValue = internalRecord && internalRecord[vsAttrName] || undefined; // const vcTransform: TransformStaticInterface = transform.call(this.constructor);

                  vcTransform = flowRuntime_umd.Class(flowRuntime_umd.existential()).assert(transform.call(this.constructor));
                  voNewValue = vcTransform.objectize(this[vsAttrName]);

                  if (!_.isEqual(voNewValue, voOldValue)) {
                    vhResult[vsAttrName] = [voOldValue, voNewValue];
                  }

                  _context23.next = 4;
                  break;

                case 16:
                  return _context23.abrupt("return", _returnType22.assert(vhResult));

                case 17:
                case "end":
                  return _context23.stop();
              }
            }
          }, _callee23, this);
        }));

        function changedAttributes() {
          return _changedAttributes.apply(this, arguments);
        }

        return changedAttributes;
      }()
    }, {
      key: "resetAttribute",
      value: function () {
        var _resetAttribute = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee24(asAttribute) {
          var _asAttributeType4, _returnType23, attrConf, transform, vcTransform;

          return regenerator.wrap(function _callee24$(_context24) {
            while (1) {
              switch (_context24.prev = _context24.next) {
                case 0:
                  _asAttributeType4 = flowRuntime_umd.string();
                  _returnType23 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("asAttribute", _asAttributeType4).assert(asAttribute);

                  if (!(this._internalRecord != null)) {
                    _context24.next = 11;
                    break;
                  }

                  attrConf = this.constructor.attributes[asAttribute];

                  if (!(attrConf != null)) {
                    _context24.next = 11;
                    break;
                  }

                  transform = attrConf.transform; // const vcTransform: TransformStaticInterface = transform.call(this.constructor);

                  vcTransform = flowRuntime_umd.Class(flowRuntime_umd.existential()).assert(transform.call(this.constructor));
                  _context24.next = 10;
                  return vcTransform.normalize(this._internalRecord[asAttribute]);

                case 10:
                  this[asAttribute] = _context24.sent;

                case 11:
                case "end":
                  return _context24.stop();
              }
            }
          }, _callee24, this);
        }));

        function resetAttribute(_x9) {
          return _resetAttribute.apply(this, arguments);
        }

        return resetAttribute;
      }()
    }, {
      key: "rollbackAttributes",
      value: function () {
        var _rollbackAttributes = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee25() {
          var _returnType24, voAttributes, vsAttrName, transform, voOldValue, vcTransform;

          return regenerator.wrap(function _callee25$(_context25) {
            while (1) {
              switch (_context25.prev = _context25.next) {
                case 0:
                  _returnType24 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));

                  if (!(this._internalRecord != null)) {
                    _context25.next = 16;
                    break;
                  }

                  voAttributes = this.constructor.attributes;
                  _context25.t0 = regenerator.keys(voAttributes);

                case 4:
                  if ((_context25.t1 = _context25.t0()).done) {
                    _context25.next = 16;
                    break;
                  }

                  vsAttrName = _context25.t1.value;

                  if (hasProp$4.call(voAttributes, vsAttrName)) {
                    _context25.next = 8;
                    break;
                  }

                  return _context25.abrupt("continue", 4);

                case 8:
                  transform = voAttributes[vsAttrName].transform;
                  voOldValue = this._internalRecord[vsAttrName]; // const vcTransform: TransformStaticInterface = transform.call(this.constructor);

                  vcTransform = flowRuntime_umd.Class(flowRuntime_umd.existential()).assert(transform.call(this.constructor));
                  _context25.next = 13;
                  return vcTransform.normalize(voOldValue);

                case 13:
                  this[vsAttrName] = _context25.sent;
                  _context25.next = 4;
                  break;

                case 16:
                case "end":
                  return _context25.stop();
              }
            }
          }, _callee25, this);
        }));

        function rollbackAttributes() {
          return _rollbackAttributes.apply(this, arguments);
        }

        return rollbackAttributes;
      }()
    }], [{
      key: "normalize",
      value: function () {
        var _normalize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee26(ahPayload, aoCollection) {
          var _ahPayloadType, _aoCollectionType, _returnType, vhAttributes, RecordClass, voAttrs, asAttr, transform, vcTransform, voRecord;

          return regenerator.wrap(function _callee26$(_context26) {
            while (1) {
              switch (_context26.prev = _context26.next) {
                case 0:
                  _ahPayloadType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                  _aoCollectionType = flowRuntime_umd.nullable(flowRuntime_umd.ref(CollectionInterface$4, flowRuntime_umd.ref(RecordInterface$a)));
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.tuple(flowRuntime_umd.Class(flowRuntime_umd.existential()), flowRuntime_umd.ref("object"))), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.tuple(flowRuntime_umd.Class(flowRuntime_umd.existential()), flowRuntime_umd.ref("object"))))));
                  flowRuntime_umd.param("ahPayload", _ahPayloadType).assert(ahPayload);
                  flowRuntime_umd.param("aoCollection", _aoCollectionType).assert(aoCollection);

                  if (!(ahPayload == null)) {
                    _context26.next = 7;
                    break;
                  }

                  return _context26.abrupt("return", _returnType.assert(null));

                case 7:
                  vhAttributes = {};
                  assert(ahPayload.type != null, 'Attribute `type` is required and format \'ModuleName::RecordClassName\'');
                  RecordClass = this.name === ahPayload.type.split('::')[1] ? this : this.findRecordByName(ahPayload.type);
                  voAttrs = RecordClass.attributes;
                  _context26.t0 = regenerator.keys(voAttrs);

                case 12:
                  if ((_context26.t1 = _context26.t0()).done) {
                    _context26.next = 23;
                    break;
                  }

                  asAttr = _context26.t1.value;

                  if (hasProp$4.call(voAttrs, asAttr)) {
                    _context26.next = 16;
                    break;
                  }

                  return _context26.abrupt("continue", 12);

                case 16:
                  transform = voAttrs[asAttr].transform; // const vcTransform: TransformStaticInterface = transform.call(RecordClass);

                  vcTransform = flowRuntime_umd.Class(flowRuntime_umd.existential()).assert(transform.call(RecordClass));
                  _context26.next = 20;
                  return vcTransform.normalize(ahPayload[asAttr]);

                case 20:
                  vhAttributes[asAttr] = _context26.sent;
                  _context26.next = 12;
                  break;

                case 23:
                  vhAttributes.type = ahPayload.type; // NOTE: vhAttributes processed before new - it for StateMachine in record (when it has)

                  voRecord = RecordClass["new"](vhAttributes, aoCollection);
                  vhAttributes._internalRecord = voRecord.constructor.makeSnapshot(voRecord);
                  return _context26.abrupt("return", _returnType.assert([RecordClass, vhAttributes]));

                case 27:
                case "end":
                  return _context26.stop();
              }
            }
          }, _callee26, this);
        }));

        function normalize(_x10, _x11) {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee27(aoRecord) {
          var _aoRecordType, _returnType2, vhResult, voAttrs, asAttr, transform, vcTransform;

          return regenerator.wrap(function _callee27$(_context27) {
            while (1) {
              switch (_context27.prev = _context27.next) {
                case 0:
                  _aoRecordType = flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$a));
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.ref("object")), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))));
                  flowRuntime_umd.param("aoRecord", _aoRecordType).assert(aoRecord);

                  if (!(aoRecord == null)) {
                    _context27.next = 5;
                    break;
                  }

                  return _context27.abrupt("return", _returnType2.assert(null));

                case 5:
                  assert(aoRecord.type != null, 'Attribute `type` is required and format \'ModuleName::RecordClassName\'');
                  vhResult = {};
                  voAttrs = aoRecord.constructor.attributes;
                  _context27.t0 = regenerator.keys(voAttrs);

                case 9:
                  if ((_context27.t1 = _context27.t0()).done) {
                    _context27.next = 20;
                    break;
                  }

                  asAttr = _context27.t1.value;

                  if (hasProp$4.call(voAttrs, asAttr)) {
                    _context27.next = 13;
                    break;
                  }

                  return _context27.abrupt("continue", 9);

                case 13:
                  transform = voAttrs[asAttr].transform; // const vcTransform: TransformStaticInterface = transform.call(this);

                  vcTransform = flowRuntime_umd.Class(flowRuntime_umd.existential()).assert(transform.call(this));
                  _context27.next = 17;
                  return vcTransform.serialize(aoRecord[asAttr]);

                case 17:
                  vhResult[asAttr] = _context27.sent;
                  _context27.next = 9;
                  break;

                case 20:
                  return _context27.abrupt("return", _returnType2.assert(vhResult));

                case 21:
                case "end":
                  return _context27.stop();
              }
            }
          }, _callee27, this);
        }));

        function serialize(_x12) {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "recoverize",
      value: function () {
        var _recoverize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee28(ahPayload, aoCollection) {
          var _ahPayloadType2, _aoCollectionType2, _returnType3, vhAttributes, RecordClass, voAttrs, asAttr, transform, vcTransform;

          return regenerator.wrap(function _callee28$(_context28) {
            while (1) {
              switch (_context28.prev = _context28.next) {
                case 0:
                  _ahPayloadType2 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                  _aoCollectionType2 = flowRuntime_umd.nullable(flowRuntime_umd.ref(CollectionInterface$4, flowRuntime_umd.ref(RecordInterface$a)));
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.tuple(flowRuntime_umd.Class(flowRuntime_umd.existential()), flowRuntime_umd.ref("object"))), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.tuple(flowRuntime_umd.Class(flowRuntime_umd.existential()), flowRuntime_umd.ref("object"))))));
                  flowRuntime_umd.param("ahPayload", _ahPayloadType2).assert(ahPayload);
                  flowRuntime_umd.param("aoCollection", _aoCollectionType2).assert(aoCollection);

                  if (!(ahPayload == null)) {
                    _context28.next = 7;
                    break;
                  }

                  return _context28.abrupt("return", _returnType3.assert(null));

                case 7:
                  vhAttributes = {};
                  assert(ahPayload.type != null, 'Attribute `type` is required and format \'ModuleName::RecordClassName\'');
                  RecordClass = this.name === ahPayload.type.split('::')[1] ? this : this.findRecordByName(ahPayload.type);
                  voAttrs = RecordClass.attributes;
                  _context28.t0 = regenerator.keys(voAttrs);

                case 12:
                  if ((_context28.t1 = _context28.t0()).done) {
                    _context28.next = 24;
                    break;
                  }

                  asAttr = _context28.t1.value;

                  if (hasProp$4.call(voAttrs, asAttr)) {
                    _context28.next = 16;
                    break;
                  }

                  return _context28.abrupt("continue", 12);

                case 16:
                  transform = voAttrs[asAttr].transform; // const vcTransform: TransformStaticInterface = transform.call(RecordClass);

                  vcTransform = flowRuntime_umd.Class(flowRuntime_umd.existential()).assert(transform.call(RecordClass));

                  if (!(asAttr in ahPayload)) {
                    _context28.next = 22;
                    break;
                  }

                  _context28.next = 21;
                  return vcTransform.normalize(ahPayload[asAttr]);

                case 21:
                  vhAttributes[asAttr] = _context28.sent;

                case 22:
                  _context28.next = 12;
                  break;

                case 24:
                  vhAttributes.type = ahPayload.type; // NOTE: vhAttributes processed before new - it for StateMachine in record (when it has)
                  // return RecordClass.new(vhAttributes, aoCollection);

                  return _context28.abrupt("return", _returnType3.assert([RecordClass, vhAttributes]));

                case 26:
                case "end":
                  return _context28.stop();
              }
            }
          }, _callee28, this);
        }));

        function recoverize(_x13, _x14) {
          return _recoverize.apply(this, arguments);
        }

        return recoverize;
      }()
    }, {
      key: "objectize",
      value: function objectize(aoRecord) {
        var _aoRecordType2 = flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$a));

        var _returnType28 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")));

        flowRuntime_umd.param("aoRecord", _aoRecordType2).assert(aoRecord);
        if (aoRecord == null) return _returnType28.assert(null);
        assert(aoRecord.type != null, 'Attribute `type` is required and format \'ModuleName::RecordClassName\'');
        var vhResult = {};
        var voAttrs = aoRecord.constructor.attributes;

        for (var asAttr in voAttrs) {
          if (!hasProp$4.call(voAttrs, asAttr)) continue;
          var attrTransform = voAttrs[asAttr].transform; // const vcAttrTransform: TransformStaticInterface = attrTransform.call(this);

          var vcAttrTransform = flowRuntime_umd.Class(flowRuntime_umd.existential()).assert(attrTransform.call(this));
          vhResult[asAttr] = vcAttrTransform.objectize(aoRecord[asAttr]);
        }

        var voComps = aoRecord.constructor.computeds;

        for (var asComp in voComps) {
          if (!hasProp$4.call(voComps, asComp)) continue;
          var compTransform = voComps[asComp].transform; // const vcCompTransform: TransformStaticInterface = compTransform.call(this);

          var vcCompTransform = flowRuntime_umd.Class(flowRuntime_umd.existential()).assert(compTransform.call(this));
          vhResult[asComp] = vcCompTransform.objectize(aoRecord[asComp]);
        }

        return _returnType28.assert(vhResult);
      }
    }, {
      key: "makeSnapshot",
      value: function makeSnapshot(aoRecord) {
        var _aoRecordType3 = flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$a));

        var _returnType29 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object")));

        flowRuntime_umd.param("aoRecord", _aoRecordType3).assert(aoRecord);
        if (aoRecord == null) return _returnType29.assert(null);
        assert(aoRecord.type != null, 'Attribute `type` is required and format \'ModuleName::RecordClassName\'');
        var vhResult = {};
        var voAttributes = aoRecord.constructor.attributes;

        for (var asAttr in voAttributes) {
          if (!hasProp$4.call(voAttributes, asAttr)) continue;
          var transform = voAttributes[asAttr].transform; // const vcTransform: TransformStaticInterface = transform.call(this);

          var vcTransform = flowRuntime_umd.Class(flowRuntime_umd.existential()).assert(transform.call(this));
          vhResult[asAttr] = vcTransform.objectize(aoRecord[asAttr]);
        }

        return _returnType29.assert(vhResult);
      }
    }, {
      key: "parseRecordName",
      value: function parseRecordName(asName) {
        var _asNameType = flowRuntime_umd.string();

        var _returnType30 = flowRuntime_umd["return"](flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.string()));

        flowRuntime_umd.param("asName", _asNameType).assert(asName);
        var vsModuleName, vsRecordName;

        if (/.*[:][:].*/.test(asName)) {
          var _asName$split = asName.split('::');

          var _asName$split2 = slicedToArray(_asName$split, 2);

          vsModuleName = _asName$split2[0];
          vsRecordName = _asName$split2[1];
        } else {
          var _ref = [this.moduleName(), inflect.camelize(inflect.underscore(inflect.singularize(asName)))];
          vsModuleName = _ref[0];
          vsRecordName = _ref[1];
        }

        if (!/(Record$)|(Migration$)/.test(vsRecordName)) {
          vsRecordName += 'Record';
        }

        return _returnType30.assert([vsModuleName, vsRecordName]);
      }
    }, {
      key: "findRecordByName",
      value: function findRecordByName(asName) {
        var _asNameType2 = flowRuntime_umd.string();

        var _returnType31 = flowRuntime_umd["return"](flowRuntime_umd.Class(flowRuntime_umd.existential()));

        flowRuntime_umd.param("asName", _asNameType2).assert(asName);

        var _this$parseRecordName = this.parseRecordName(asName),
            _this$parseRecordName2 = slicedToArray(_this$parseRecordName, 2),
            vsModuleName = _this$parseRecordName2[0],
            vsRecordName = _this$parseRecordName2[1];

        return _returnType31.assert(this.Module.NS[vsRecordName] || this);
      }
    }, {
      key: "parentClassNames",
      // @method static parentClassNames(AbstractClass: ?(RecordStaticInterface | Class<Object>) = null): string[] {
      value: function parentClassNames() {
        var AbstractClass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        var _AbstractClassType = flowRuntime_umd.nullable(flowRuntime_umd.Class(flowRuntime_umd.existential()));

        var _returnType34 = flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()));

        flowRuntime_umd.param("AbstractClass", _AbstractClassType).assert(AbstractClass);

        if (AbstractClass == null) {
          AbstractClass = _AbstractClassType.assert(this);
        }

        var SuperClass = Reflect.getPrototypeOf(AbstractClass);
        var fromSuper = !_.isEmpty(SuperClass != null ? SuperClass.name : undefined) ? this.parentClassNames(SuperClass) : undefined;
        return _returnType34.assert(_.uniq([].concat(fromSuper || [])).concat([AbstractClass.name]));
      }
    }, {
      key: 'new',
      value: function _new(aoAttributes, aoCollection) {
        var _aoAttributesType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        var _aoCollectionType3 = flowRuntime_umd.ref(CollectionInterface$4, flowRuntime_umd.ref(Record));

        var _returnType37 = flowRuntime_umd["return"](flowRuntime_umd.ref(RecordInterface$a));

        flowRuntime_umd.param("aoAttributes", _aoAttributesType).assert(aoAttributes);
        flowRuntime_umd.param("aoCollection", _aoCollectionType3).assert(aoCollection);

        if (aoAttributes == null) {
          aoAttributes = _aoAttributesType.assert({});
        }

        assert(aoAttributes.type != null, 'Attribute `type` is required and format \'ModuleName::RecordClassName\'');

        if (this.name === aoAttributes.type.split('::')[1]) {
          return _returnType37.assert(get(getPrototypeOf(Record), "new", this).call(this, aoAttributes, aoCollection));
        } else {
          var RecordClass = this.findRecordByName(aoAttributes.type);

          if (RecordClass === this) {
            return _returnType37.assert(get(getPrototypeOf(Record), "new", this).call(this, aoAttributes, aoCollection));
          } else {
            return _returnType37.assert(RecordClass["new"](aoAttributes, aoCollection));
          }
        }
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee29(acModule, replica) {
          var _acModuleType, _replicaType, _returnType25, Facade, facade, voCollection;

          return regenerator.wrap(function _callee29$(_context29) {
            while (1) {
              switch (_context29.prev = _context29.next) {
                case 0:
                  _acModuleType = flowRuntime_umd.Class(flowRuntime_umd.existential());
                  _replicaType = flowRuntime_umd.ref("object");
                  _returnType25 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$a), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$a))));
                  flowRuntime_umd.param("acModule", _acModuleType).assert(acModule);
                  flowRuntime_umd.param("replica", _replicaType).assert(replica);

                  if (!((replica != null ? replica["class"] : void 0) === this.name && (replica != null ? replica.type : void 0) === 'instance')) {
                    _context29.next = 24;
                    break;
                  }

                  Facade = acModule.NS.ApplicationFacade || acModule.NS.Facade;
                  facade = Facade.getInstance(replica.multitonKey);
                  voCollection = facade.retrieveProxy(replica.collectionName);

                  if (!replica.isNew) {
                    _context29.next = 17;
                    break;
                  }

                  _context29.t0 = _returnType25;
                  _context29.next = 13;
                  return voCollection.build(replica.attributes);

                case 13:
                  _context29.t1 = _context29.sent;
                  return _context29.abrupt("return", _context29.t0.assert.call(_context29.t0, _context29.t1));

                case 17:
                  _context29.t2 = _returnType25;
                  _context29.next = 20;
                  return voCollection.find(replica.id);

                case 20:
                  _context29.t3 = _context29.sent;
                  return _context29.abrupt("return", _context29.t2.assert.call(_context29.t2, _context29.t3));

                case 22:
                  _context29.next = 29;
                  break;

                case 24:
                  _context29.t4 = _returnType25;
                  _context29.next = 27;
                  return get(getPrototypeOf(Record), "restoreObject", this).call(this, acModule, replica);

                case 27:
                  _context29.t5 = _context29.sent;
                  return _context29.abrupt("return", _context29.t4.assert.call(_context29.t4, _context29.t5));

                case 29:
                case "end":
                  return _context29.stop();
              }
            }
          }, _callee29, this);
        }));

        function restoreObject(_x15, _x16) {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee30(instance) {
          var _instanceType, _returnType26, replica, changedAttributes, changedKeys;

          return regenerator.wrap(function _callee30$(_context30) {
            while (1) {
              switch (_context30.prev = _context30.next) {
                case 0:
                  _instanceType = flowRuntime_umd.ref(RecordInterface$a);
                  _returnType26 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref("object"), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref("object"))));
                  flowRuntime_umd.param("instance", _instanceType).assert(instance);
                  _context30.next = 5;
                  return get(getPrototypeOf(Record), "replicateObject", this).call(this, instance);

                case 5:
                  replica = _context30.sent;
                  replica.multitonKey = instance.collection._multitonKey;
                  replica.collectionName = instance.collection.getName();
                  _context30.next = 10;
                  return instance.isNew();

                case 10:
                  replica.isNew = _context30.sent;
                  assert(!replica.isNew, 'Replicating record is `new`. It must be seved previously');
                  _context30.next = 14;
                  return instance.changedAttributes();

                case 14:
                  changedAttributes = _context30.sent;
                  changedKeys = Object.keys(changedAttributes);
                  assert(changedKeys.length <= 0, "Replicating record has changedAttributes ".concat(changedKeys));
                  replica.id = instance.id;
                  return _context30.abrupt("return", _returnType26.assert(replica));

                case 19:
                case "end":
                  return _context30.stop();
              }
            }
          }, _callee30, this);
        }));

        function replicateObject(_x17) {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "_schemas",
      // ipoInternalRecord = PointerT(Record.protected({
      // ipoSchemas = PointerT(Record.protected(Record.static({
      get: function get() {
        return schemas;
      }
    }, {
      key: "schema",
      get: function get() {
        var _returnType27 = flowRuntime_umd["return"](flowRuntime_umd.ref(JoiT$f));

        var existedSchema = this._schemas.get(this);

        if (existedSchema != null) return _returnType27.assert(existedSchema);
        var vhAttrs = {};
        var voAttrs = this.attributes;

        for (var vsAttr in voAttrs) {
          if (!hasProp$4.call(voAttrs, vsAttr)) continue;
          var vhAttrValue = voAttrs[vsAttr];
          vhAttrs[vsAttr] = _.isFunction(vhAttrValue.validate) ? vhAttrValue.validate.call(this) : vhAttrValue.validate;
        }

        var voComps = this.computeds;

        for (var vsComp in voComps) {
          if (!hasProp$4.call(voComps, vsComp)) continue;
          var vhCompValue = voComps[vsComp];
          vhAttrs[vsComp] = _.isFunction(vhCompValue.validate) ? vhCompValue.validate.call(this) : vhCompValue.validate;
        }

        this._schemas.set(this, joi.object(vhAttrs));

        return _returnType27.assert(this._schemas.get(this));
      }
    }, {
      key: "customFilters",
      get: function get() {
        var _returnType33 = flowRuntime_umd["return"](flowRuntime_umd.ref("object"));

        return _returnType33.assert(this.metaObject.getGroup('customFilters', false));
      }
    }, {
      key: "attributes",
      get: function get() {
        var _returnType35 = flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref(AttributeConfigT$2))));

        return _returnType35.assert(this.metaObject.getGroup('attributes', false));
      }
    }, {
      key: "computeds",
      get: function get() {
        var _returnType36 = flowRuntime_umd["return"](flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref(ComputedConfigT$2))));

        return _returnType36.assert(this.metaObject.getGroup('computeds', false));
      }
    }]);

    function Record(aoProperties, aoCollection) {
      var _this;

      classCallCheck(this, Record);

      var _aoPropertiesType = flowRuntime_umd.ref("object");

      var _aoCollectionType4 = flowRuntime_umd.nullable(flowRuntime_umd.ref(CollectionInterface$4, flowRuntime_umd.ref(Record)));

      flowRuntime_umd.param("aoProperties", _aoPropertiesType).assert(aoProperties);
      flowRuntime_umd.param("aoCollection", _aoCollectionType4).assert(aoCollection);
      _this = _super.apply(this, arguments);

      initializerDefineProperty(_this, "_internalRecord", _descriptor, assertThisInitialized(_this));

      initializerDefineProperty(_this, "collection", _descriptor2, assertThisInitialized(_this));

      initializerDefineProperty(_this, "id", _descriptor3, assertThisInitialized(_this));

      initializerDefineProperty(_this, "type", _descriptor4, assertThisInitialized(_this));

      _this.collection = aoCollection;

      for (var vsAttrName in aoProperties) {
        if (!hasProp$4.call(aoProperties, vsAttrName)) continue;
        var voAttrValue = aoProperties[vsAttrName];
        _this[vsAttrName] = voAttrValue;
      }

      flowRuntime_umd.ref(RecordInterface$a).assert(assertThisInitialized(_this));
      return _this;
    }

    createClass(Record, [{
      key: "toJSON",
      value: function toJSON() {
        return this.constructor.objectize(this);
      }
    }]);

    return Record;
  }(CoreObject), _class3.__filename = __filename$r, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = applyDecoratedDescriptor(_class2.prototype, "_internalRecord", [_dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), applyDecoratedDescriptor(_class2, "_schemas", [property], Object.getOwnPropertyDescriptor(_class2, "_schemas"), _class2), _descriptor2 = applyDecoratedDescriptor(_class2.prototype, "collection", [_dec5, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), applyDecoratedDescriptor(_class2, "schema", [property], Object.getOwnPropertyDescriptor(_class2, "schema"), _class2), applyDecoratedDescriptor(_class2, "normalize", [method], Object.getOwnPropertyDescriptor(_class2, "normalize"), _class2), applyDecoratedDescriptor(_class2, "serialize", [method], Object.getOwnPropertyDescriptor(_class2, "serialize"), _class2), applyDecoratedDescriptor(_class2, "recoverize", [method], Object.getOwnPropertyDescriptor(_class2, "recoverize"), _class2), applyDecoratedDescriptor(_class2, "objectize", [method], Object.getOwnPropertyDescriptor(_class2, "objectize"), _class2), applyDecoratedDescriptor(_class2, "makeSnapshot", [method], Object.getOwnPropertyDescriptor(_class2, "makeSnapshot"), _class2), applyDecoratedDescriptor(_class2, "parseRecordName", [method], Object.getOwnPropertyDescriptor(_class2, "parseRecordName"), _class2), applyDecoratedDescriptor(_class2.prototype, "parseRecordName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "parseRecordName"), _class2.prototype), applyDecoratedDescriptor(_class2, "findRecordByName", [method], Object.getOwnPropertyDescriptor(_class2, "findRecordByName"), _class2), applyDecoratedDescriptor(_class2.prototype, "findRecordByName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "findRecordByName"), _class2.prototype), applyDecoratedDescriptor(_class2, "customFilters", [property], Object.getOwnPropertyDescriptor(_class2, "customFilters"), _class2), applyDecoratedDescriptor(_class2, "parentClassNames", [method], Object.getOwnPropertyDescriptor(_class2, "parentClassNames"), _class2), applyDecoratedDescriptor(_class2, "attributes", [property], Object.getOwnPropertyDescriptor(_class2, "attributes"), _class2), applyDecoratedDescriptor(_class2, "computeds", [property], Object.getOwnPropertyDescriptor(_class2, "computeds"), _class2), applyDecoratedDescriptor(_class2, 'new', [method], Object.getOwnPropertyDescriptor(_class2, 'new'), _class2), applyDecoratedDescriptor(_class2.prototype, "save", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "save"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "create", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "create"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "update", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "update"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, 'delete', [method], Object.getOwnPropertyDescriptor(_class2.prototype, 'delete'), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "destroy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "destroy"), _class2.prototype), _descriptor3 = applyDecoratedDescriptor(_class2.prototype, "id", [_dec6, _dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), _descriptor4 = applyDecoratedDescriptor(_class2.prototype, "type", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function initializer() {
      return null;
    }
  }), applyDecoratedDescriptor(_class2.prototype, "beforeCreate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "beforeCreate"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "afterCreate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "afterCreate"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "beforeUpdate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "beforeUpdate"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "afterUpdate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "afterUpdate"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "beforeDelete", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "beforeDelete"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "afterDelete", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "afterDelete"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "beforeDestroy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "beforeDestroy"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "afterDestroy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "afterDestroy"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "attributes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "attributes"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "clone", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "clone"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "copy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "copy"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "decrement", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "decrement"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "increment", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "increment"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "toggle", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "toggle"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "updateAttribute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "updateAttribute"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "updateAttributes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "updateAttributes"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "isNew", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "isNew"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "reload", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "reload"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "changedAttributes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "changedAttributes"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "resetAttribute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "resetAttribute"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "rollbackAttributes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "rollbackAttributes"), _class2.prototype), applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2), applyDecoratedDescriptor(_class2.prototype, "toJSON", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "toJSON"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class);
});

var __filename$s = '/mapper/Migration.js';

// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
var MigrationInterface = flowRuntime_umd.type("MigrationInterface", function (MigrationInterface) {
  var REVERSE_MAP = MigrationInterface.typeParameter("REVERSE_MAP"),
      SUPPORTED_TYPES = MigrationInterface.typeParameter("SUPPORTED_TYPES"),
      UP = MigrationInterface.typeParameter("UP"),
      DOWN = MigrationInterface.typeParameter("DOWN");
  return flowRuntime_umd.object(flowRuntime_umd.property("steps", flowRuntime_umd.array(flowRuntime_umd.exactObject(flowRuntime_umd.property("args", flowRuntime_umd.array()), flowRuntime_umd.property("method", flowRuntime_umd.union(REVERSE_MAP, flowRuntime_umd.string("reversible")))))), flowRuntime_umd.property("createCollection", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("createEdgeCollection", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName1", flowRuntime_umd.string()), flowRuntime_umd.param("collectionName2", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("addField", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(SUPPORTED_TYPES, flowRuntime_umd.object(flowRuntime_umd.property("type", SUPPORTED_TYPES), flowRuntime_umd.property("default", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("addIndex", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldNames", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("sparse", flowRuntime_umd["boolean"](), true))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("addTimestamps", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("changeCollection", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("changeField", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(SUPPORTED_TYPES, flowRuntime_umd.object(flowRuntime_umd.property("type", SUPPORTED_TYPES)))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("renameField", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd.param("newFieldName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("renameIndex", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("oldCollectionName", flowRuntime_umd.string()), flowRuntime_umd.param("newCollectionName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("renameCollection", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("newCollectionName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("dropCollection", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("dropEdgeCollection", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName1", flowRuntime_umd.string()), flowRuntime_umd.param("collectionName2", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("removeField", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("removeIndex", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldNames", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("sparse", flowRuntime_umd["boolean"](), true))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("removeTimestamps", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("execute", flowRuntime_umd["function"](flowRuntime_umd.param("lambda", flowRuntime_umd["function"]()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("migrate", flowRuntime_umd["function"](flowRuntime_umd.param("direction", flowRuntime_umd.union(UP, DOWN)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("up", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("down", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))));
});

function _createSuper$r(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$r(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$r() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var MigrationInterface$1 = flowRuntime_umd.tdz(function () {
  return MigrationInterface;
});
var Migration = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      UP = _Module$NS.UP,
      DOWN = _Module$NS.DOWN,
      SUPPORTED_TYPES = _Module$NS.SUPPORTED_TYPES,
      REVERSE_MAP = _Module$NS.REVERSE_MAP,
      NON_OVERRIDDEN = _Module$NS.NON_OVERRIDDEN,
      Record = _Module$NS.Record,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      assign = _Module$NS$Utils.assign,
      forEach = _Module$NS$Utils.forEach;
  // console.log('>>>>>>>>>>>>>', SUPPORTED_TYPES);

  var Migration = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Migration", flowRuntime_umd["extends"](Record), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("steps", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.exactObject(flowRuntime_umd.property("args", flowRuntime_umd.array()), flowRuntime_umd.property("method", flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.typeOf(REVERSE_MAP)), flowRuntime_umd.string("reversible"))))))), flowRuntime_umd.method("index", flowRuntime_umd["return"](flowRuntime_umd.number())), flowRuntime_umd.staticMethod("createCollection", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("createCollection", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("createEdgeCollection", flowRuntime_umd.param("collectionName1", flowRuntime_umd.string()), flowRuntime_umd.param("collectionName2", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("createEdgeCollection", flowRuntime_umd.param("collectionName1", flowRuntime_umd.string()), flowRuntime_umd.param("collectionName2", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("addField", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES))), flowRuntime_umd.property("default", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addField", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES))), flowRuntime_umd.property("default", flowRuntime_umd.any())))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("addIndex", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldNames", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("sparse", flowRuntime_umd["boolean"](), true))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addIndex", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldNames", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("sparse", flowRuntime_umd["boolean"](), true))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("addTimestamps", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("addTimestamps", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("changeCollection", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("changeCollection", flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("changeField", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)))))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("changeField", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("renameField", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd.param("newFieldName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("renameField", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd.param("newFieldName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("renameIndex", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("oldCollectionName", flowRuntime_umd.string()), flowRuntime_umd.param("newCollectionName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("renameIndex", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("oldCollectionName", flowRuntime_umd.string()), flowRuntime_umd.param("newCollectionName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("renameCollection", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("newCollectionName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("renameCollection", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("newCollectionName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("dropCollection", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("dropCollection", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("dropEdgeCollection", flowRuntime_umd.param("collectionName1", flowRuntime_umd.string()), flowRuntime_umd.param("collectionName2", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("dropEdgeCollection", flowRuntime_umd.param("collectionName1", flowRuntime_umd.string()), flowRuntime_umd.param("collectionName2", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("removeField", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("removeField", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("removeIndex", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldNames", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("sparse", flowRuntime_umd["boolean"](), true))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("removeIndex", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldNames", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("sparse", flowRuntime_umd["boolean"](), true))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("removeTimestamps", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("removeTimestamps", flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("reversible", flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.exactObject(flowRuntime_umd.property("up", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("down", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("execute", flowRuntime_umd.param("lambda", flowRuntime_umd["function"]()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("migrate", flowRuntime_umd.param("direction", flowRuntime_umd.union(flowRuntime_umd.typeOf(UP), flowRuntime_umd.typeOf(DOWN))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("change", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.symbol()))), flowRuntime_umd.method("up", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("up", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.symbol()))), flowRuntime_umd.method("down", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.staticMethod("down", flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.symbol()))), flowRuntime_umd.staticMethod("restoreObject"), flowRuntime_umd.staticMethod("replicateObject"), flowRuntime_umd.staticMethod("onInitialize", flowRuntime_umd.param("args", flowRuntime_umd.any())))), _dec2 = partOf(Module), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Record) {
    inherits(Migration, _Record);

    var _super = _createSuper$r(Migration);

    function Migration() {
      var _this;

      classCallCheck(this, Migration);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      flowRuntime_umd.ref(MigrationInterface$1, flowRuntime_umd.$keys(flowRuntime_umd.typeOf(REVERSE_MAP)), flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)), flowRuntime_umd.typeOf(UP), flowRuntime_umd.typeOf(DOWN)).assert(assertThisInitialized(_this));
      return _this;
    }

    createClass(Migration, [{
      key: "createCollection",
      value: function () {
        var _createCollection = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(name, options) {
          var _nameType2, _optionsType2, _returnType;

          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _nameType2 = flowRuntime_umd.string();
                  _optionsType2 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("name", _nameType2).assert(name);
                  flowRuntime_umd.param("options", _optionsType2).assert(options);
                  return _context.abrupt("return", _returnType.assert(assert.fail('Not implemented specific method')));

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function createCollection(_x, _x2) {
          return _createCollection.apply(this, arguments);
        }

        return createCollection;
      }()
    }, {
      key: "createEdgeCollection",
      value: function () {
        var _createEdgeCollection = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(collectionName1, collectionName2, options) {
          var _collectionName1Type2, _collectionName2Type2, _optionsType4, _returnType2;

          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _collectionName1Type2 = flowRuntime_umd.string();
                  _collectionName2Type2 = flowRuntime_umd.string();
                  _optionsType4 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("collectionName1", _collectionName1Type2).assert(collectionName1);
                  flowRuntime_umd.param("collectionName2", _collectionName2Type2).assert(collectionName2);
                  flowRuntime_umd.param("options", _optionsType4).assert(options);
                  return _context2.abrupt("return", _returnType2.assert(assert.fail('Not implemented specific method')));

                case 8:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        function createEdgeCollection(_x3, _x4, _x5) {
          return _createEdgeCollection.apply(this, arguments);
        }

        return createEdgeCollection;
      }()
    }, {
      key: "addField",
      value: function () {
        var _addField = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(collectionName, fieldName, options) {
          var _collectionNameType2, _fieldNameType2, _optionsType6, _returnType3;

          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _collectionNameType2 = flowRuntime_umd.string();
                  _fieldNameType2 = flowRuntime_umd.string();
                  _optionsType6 = flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES))), flowRuntime_umd.property("default", flowRuntime_umd.any())));
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("collectionName", _collectionNameType2).assert(collectionName);
                  flowRuntime_umd.param("fieldName", _fieldNameType2).assert(fieldName);
                  flowRuntime_umd.param("options", _optionsType6).assert(options);
                  return _context3.abrupt("return", _returnType3.assert(assert.fail('Not implemented specific method')));

                case 8:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));

        function addField(_x6, _x7, _x8) {
          return _addField.apply(this, arguments);
        }

        return addField;
      }()
    }, {
      key: "addIndex",
      value: function () {
        var _addIndex = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(collectionName, fieldNames, options) {
          var _collectionNameType4, _fieldNamesType2, _optionsType8, _returnType4;

          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _collectionNameType4 = flowRuntime_umd.string();
                  _fieldNamesType2 = flowRuntime_umd.array(flowRuntime_umd.string());
                  _optionsType8 = flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("sparse", flowRuntime_umd["boolean"](), true));
                  _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("collectionName", _collectionNameType4).assert(collectionName);
                  flowRuntime_umd.param("fieldNames", _fieldNamesType2).assert(fieldNames);
                  flowRuntime_umd.param("options", _optionsType8).assert(options);
                  return _context4.abrupt("return", _returnType4.assert(assert.fail('Not implemented specific method')));

                case 8:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4);
        }));

        function addIndex(_x9, _x10, _x11) {
          return _addIndex.apply(this, arguments);
        }

        return addIndex;
      }()
    }, {
      key: "addTimestamps",
      value: function () {
        var _addTimestamps = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5(collectionName, options) {
          var _collectionNameType6, _optionsType10, _returnType5;

          return regenerator.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _collectionNameType6 = flowRuntime_umd.string();
                  _optionsType10 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                  _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("collectionName", _collectionNameType6).assert(collectionName);
                  flowRuntime_umd.param("options", _optionsType10).assert(options);
                  return _context5.abrupt("return", _returnType5.assert(assert.fail('Not implemented specific method')));

                case 6:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5);
        }));

        function addTimestamps(_x12, _x13) {
          return _addTimestamps.apply(this, arguments);
        }

        return addTimestamps;
      }()
    }, {
      key: "changeCollection",
      value: function () {
        var _changeCollection = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee6(name, options) {
          var _nameType4, _optionsType12, _returnType6;

          return regenerator.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _nameType4 = flowRuntime_umd.string();
                  _optionsType12 = flowRuntime_umd.ref("object");
                  _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("name", _nameType4).assert(name);
                  flowRuntime_umd.param("options", _optionsType12).assert(options);
                  return _context6.abrupt("return", _returnType6.assert(assert.fail('Not implemented specific method')));

                case 6:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6);
        }));

        function changeCollection(_x14, _x15) {
          return _changeCollection.apply(this, arguments);
        }

        return changeCollection;
      }()
    }, {
      key: "changeField",
      value: function () {
        var _changeField = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee7(collectionName, fieldName, options) {
          var _collectionNameType8, _fieldNameType4, _optionsType14, _returnType7;

          return regenerator.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _collectionNameType8 = flowRuntime_umd.string();
                  _fieldNameType4 = flowRuntime_umd.string();
                  _optionsType14 = flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)))));
                  _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("collectionName", _collectionNameType8).assert(collectionName);
                  flowRuntime_umd.param("fieldName", _fieldNameType4).assert(fieldName);
                  flowRuntime_umd.param("options", _optionsType14).assert(options);
                  return _context7.abrupt("return", _returnType7.assert(assert.fail('Not implemented specific method')));

                case 8:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7);
        }));

        function changeField(_x16, _x17, _x18) {
          return _changeField.apply(this, arguments);
        }

        return changeField;
      }()
    }, {
      key: "renameField",
      value: function () {
        var _renameField = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee8(collectionName, fieldName, newFieldName) {
          var _collectionNameType10, _fieldNameType6, _newFieldNameType2, _returnType8;

          return regenerator.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _collectionNameType10 = flowRuntime_umd.string();
                  _fieldNameType6 = flowRuntime_umd.string();
                  _newFieldNameType2 = flowRuntime_umd.string();
                  _returnType8 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("collectionName", _collectionNameType10).assert(collectionName);
                  flowRuntime_umd.param("fieldName", _fieldNameType6).assert(fieldName);
                  flowRuntime_umd.param("newFieldName", _newFieldNameType2).assert(newFieldName);
                  return _context8.abrupt("return", _returnType8.assert(assert.fail('Not implemented specific method')));

                case 8:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8);
        }));

        function renameField(_x19, _x20, _x21) {
          return _renameField.apply(this, arguments);
        }

        return renameField;
      }()
    }, {
      key: "renameIndex",
      value: function () {
        var _renameIndex = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee9(collectionName, oldCollectionName, newCollectionName) {
          var _collectionNameType12, _oldCollectionNameType2, _newCollectionNameType2, _returnType9;

          return regenerator.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _collectionNameType12 = flowRuntime_umd.string();
                  _oldCollectionNameType2 = flowRuntime_umd.string();
                  _newCollectionNameType2 = flowRuntime_umd.string();
                  _returnType9 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("collectionName", _collectionNameType12).assert(collectionName);
                  flowRuntime_umd.param("oldCollectionName", _oldCollectionNameType2).assert(oldCollectionName);
                  flowRuntime_umd.param("newCollectionName", _newCollectionNameType2).assert(newCollectionName);
                  return _context9.abrupt("return", _returnType9.assert(assert.fail('Not implemented specific method')));

                case 8:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9);
        }));

        function renameIndex(_x22, _x23, _x24) {
          return _renameIndex.apply(this, arguments);
        }

        return renameIndex;
      }()
    }, {
      key: "renameCollection",
      value: function () {
        var _renameCollection = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee10(collectionName, newCollectionName) {
          var _collectionNameType14, _newCollectionNameType4, _returnType10;

          return regenerator.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _collectionNameType14 = flowRuntime_umd.string();
                  _newCollectionNameType4 = flowRuntime_umd.string();
                  _returnType10 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("collectionName", _collectionNameType14).assert(collectionName);
                  flowRuntime_umd.param("newCollectionName", _newCollectionNameType4).assert(newCollectionName);
                  return _context10.abrupt("return", _returnType10.assert(assert.fail('Not implemented specific method')));

                case 6:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10);
        }));

        function renameCollection(_x25, _x26) {
          return _renameCollection.apply(this, arguments);
        }

        return renameCollection;
      }()
    }, {
      key: "dropCollection",
      value: function () {
        var _dropCollection = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee11(collectionName) {
          var _collectionNameType16, _returnType11;

          return regenerator.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  _collectionNameType16 = flowRuntime_umd.string();
                  _returnType11 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("collectionName", _collectionNameType16).assert(collectionName);
                  return _context11.abrupt("return", _returnType11.assert(assert.fail('Not implemented specific method')));

                case 4:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11);
        }));

        function dropCollection(_x27) {
          return _dropCollection.apply(this, arguments);
        }

        return dropCollection;
      }()
    }, {
      key: "dropEdgeCollection",
      value: function () {
        var _dropEdgeCollection = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee12(collectionName1, collectionName2) {
          var _collectionName1Type4, _collectionName2Type4, _returnType12;

          return regenerator.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  _collectionName1Type4 = flowRuntime_umd.string();
                  _collectionName2Type4 = flowRuntime_umd.string();
                  _returnType12 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("collectionName1", _collectionName1Type4).assert(collectionName1);
                  flowRuntime_umd.param("collectionName2", _collectionName2Type4).assert(collectionName2);
                  return _context12.abrupt("return", _returnType12.assert(assert.fail('Not implemented specific method')));

                case 6:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12);
        }));

        function dropEdgeCollection(_x28, _x29) {
          return _dropEdgeCollection.apply(this, arguments);
        }

        return dropEdgeCollection;
      }()
    }, {
      key: "removeField",
      value: function () {
        var _removeField = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee13(collectionName, fieldName) {
          var _collectionNameType18, _fieldNameType8, _returnType13;

          return regenerator.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  _collectionNameType18 = flowRuntime_umd.string();
                  _fieldNameType8 = flowRuntime_umd.string();
                  _returnType13 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("collectionName", _collectionNameType18).assert(collectionName);
                  flowRuntime_umd.param("fieldName", _fieldNameType8).assert(fieldName);
                  return _context13.abrupt("return", _returnType13.assert(assert.fail('Not implemented specific method')));

                case 6:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee13);
        }));

        function removeField(_x30, _x31) {
          return _removeField.apply(this, arguments);
        }

        return removeField;
      }()
    }, {
      key: "removeIndex",
      value: function () {
        var _removeIndex = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee14(collectionName, fieldNames, options) {
          var _collectionNameType20, _fieldNamesType4, _optionsType16, _returnType14;

          return regenerator.wrap(function _callee14$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  _collectionNameType20 = flowRuntime_umd.string();
                  _fieldNamesType4 = flowRuntime_umd.array(flowRuntime_umd.string());
                  _optionsType16 = flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("sparse", flowRuntime_umd["boolean"](), true));
                  _returnType14 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("collectionName", _collectionNameType20).assert(collectionName);
                  flowRuntime_umd.param("fieldNames", _fieldNamesType4).assert(fieldNames);
                  flowRuntime_umd.param("options", _optionsType16).assert(options);
                  return _context14.abrupt("return", _returnType14.assert(assert.fail('Not implemented specific method')));

                case 8:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee14);
        }));

        function removeIndex(_x32, _x33, _x34) {
          return _removeIndex.apply(this, arguments);
        }

        return removeIndex;
      }()
    }, {
      key: "removeTimestamps",
      value: function () {
        var _removeTimestamps = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee15(collectionName, options) {
          var _collectionNameType22, _optionsType18, _returnType15;

          return regenerator.wrap(function _callee15$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  _collectionNameType22 = flowRuntime_umd.string();
                  _optionsType18 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                  _returnType15 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("collectionName", _collectionNameType22).assert(collectionName);
                  flowRuntime_umd.param("options", _optionsType18).assert(options);
                  return _context15.abrupt("return", _returnType15.assert(assert.fail('Not implemented specific method')));

                case 6:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee15);
        }));

        function removeTimestamps(_x35, _x36) {
          return _removeTimestamps.apply(this, arguments);
        }

        return removeTimestamps;
      }()
    }, {
      key: "execute",
      value: function () {
        var _execute = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee16(lambda) {
          var _lambdaType2, _returnType16;

          return regenerator.wrap(function _callee16$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  _lambdaType2 = flowRuntime_umd["function"]();
                  _returnType16 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("lambda", _lambdaType2).assert(lambda);
                  _context16.next = 5;
                  return lambda.apply(this, []);

                case 5:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee16, this);
        }));

        function execute(_x37) {
          return _execute.apply(this, arguments);
        }

        return execute;
      }()
    }, {
      key: "migrate",
      value: function () {
        var _migrate = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee17(direction) {
          var _directionType, _returnType17;

          return regenerator.wrap(function _callee17$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  _directionType = flowRuntime_umd.union(flowRuntime_umd.typeOf(UP), flowRuntime_umd.typeOf(DOWN));
                  _returnType17 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("direction", _directionType).assert(direction);
                  _context17.t0 = direction;
                  _context17.next = _context17.t0 === UP ? 6 : _context17.t0 === DOWN ? 9 : 11;
                  break;

                case 6:
                  _context17.next = 8;
                  return this.up();

                case 8:
                  return _context17.abrupt("break", 11);

                case 9:
                  _context17.next = 11;
                  return this.down();

                case 11:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee17, this);
        }));

        function migrate(_x38) {
          return _migrate.apply(this, arguments);
        }

        return migrate;
      }()
    }, {
      key: "up",
      value: function () {
        var _up = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee21() {
          var _this2 = this;

          var _returnType18;

          return regenerator.wrap(function _callee21$(_context21) {
            while (1) {
              switch (_context21.prev = _context21.next) {
                case 0:
                  _returnType18 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  _context21.next = 3;
                  return forEach(this.steps, /*#__PURE__*/function () {
                    var _ref2 = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee20(_ref) {
                      var methodName, args, _args18, lambda;

                      return regenerator.wrap(function _callee20$(_context20) {
                        while (1) {
                          switch (_context20.prev = _context20.next) {
                            case 0:
                              methodName = _ref.method, args = _ref.args;

                              if (!(methodName === 'reversible')) {
                                _context20.next = 7;
                                break;
                              }

                              _args18 = slicedToArray(args, 1), lambda = _args18[0];
                              _context20.next = 5;
                              return lambda.call(_this2, {
                                up: function () {
                                  var _up2 = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee18(f) {
                                    return regenerator.wrap(function _callee18$(_context18) {
                                      while (1) {
                                        switch (_context18.prev = _context18.next) {
                                          case 0:
                                            _context18.next = 2;
                                            return f();

                                          case 2:
                                            return _context18.abrupt("return", _context18.sent);

                                          case 3:
                                          case "end":
                                            return _context18.stop();
                                        }
                                      }
                                    }, _callee18);
                                  }));

                                  function up(_x40) {
                                    return _up2.apply(this, arguments);
                                  }

                                  return up;
                                }(),
                                down: function () {
                                  var _down = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee19() {
                                    return regenerator.wrap(function _callee19$(_context19) {
                                      while (1) {
                                        switch (_context19.prev = _context19.next) {
                                          case 0:
                                            return _context19.abrupt("return");

                                          case 1:
                                          case "end":
                                            return _context19.stop();
                                        }
                                      }
                                    }, _callee19);
                                  }));

                                  function down() {
                                    return _down.apply(this, arguments);
                                  }

                                  return down;
                                }()
                              });

                            case 5:
                              _context20.next = 9;
                              break;

                            case 7:
                              _context20.next = 9;
                              return _this2[methodName].apply(_this2, toConsumableArray(args));

                            case 9:
                            case "end":
                              return _context20.stop();
                          }
                        }
                      }, _callee20);
                    }));

                    return function (_x39) {
                      return _ref2.apply(this, arguments);
                    };
                  }());

                case 3:
                case "end":
                  return _context21.stop();
              }
            }
          }, _callee21, this);
        }));

        function up() {
          return _up.apply(this, arguments);
        }

        return up;
      }()
    }, {
      key: "down",
      value: function () {
        var _down2 = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee25() {
          var _this3 = this;

          var _returnType19;

          return regenerator.wrap(function _callee25$(_context25) {
            while (1) {
              switch (_context25.prev = _context25.next) {
                case 0:
                  _returnType19 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  _context25.next = 3;
                  return forEach(this.steps.reverse(), /*#__PURE__*/function () {
                    var _ref4 = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee24(_ref3) {
                      var methodName, args, _args23, lambda, _args26, collectionName, oldName, newName, _args27, oldCollectionName, newCollectionName, _args28, _collectionName, fieldName;

                      return regenerator.wrap(function _callee24$(_context24) {
                        while (1) {
                          switch (_context24.prev = _context24.next) {
                            case 0:
                              methodName = _ref3.method, args = _ref3.args;

                              if (!(methodName === 'reversible')) {
                                _context24.next = 7;
                                break;
                              }

                              _args23 = slicedToArray(args, 1), lambda = _args23[0];
                              _context24.next = 5;
                              return lambda.call(_this3, {
                                up: function () {
                                  var _up3 = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee22() {
                                    return regenerator.wrap(function _callee22$(_context22) {
                                      while (1) {
                                        switch (_context22.prev = _context22.next) {
                                          case 0:
                                            return _context22.abrupt("return");

                                          case 1:
                                          case "end":
                                            return _context22.stop();
                                        }
                                      }
                                    }, _callee22);
                                  }));

                                  function up() {
                                    return _up3.apply(this, arguments);
                                  }

                                  return up;
                                }(),
                                down: function () {
                                  var _down3 = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee23(f) {
                                    return regenerator.wrap(function _callee23$(_context23) {
                                      while (1) {
                                        switch (_context23.prev = _context23.next) {
                                          case 0:
                                            _context23.next = 2;
                                            return f();

                                          case 2:
                                            return _context23.abrupt("return", _context23.sent);

                                          case 3:
                                          case "end":
                                            return _context23.stop();
                                        }
                                      }
                                    }, _callee23);
                                  }));

                                  function down(_x42) {
                                    return _down3.apply(this, arguments);
                                  }

                                  return down;
                                }()
                              });

                            case 5:
                              _context24.next = 27;
                              break;

                            case 7:
                              if (!_.includes(['renameField', 'renameIndex'], methodName)) {
                                _context24.next = 13;
                                break;
                              }

                              _args26 = slicedToArray(args, 3), collectionName = _args26[0], oldName = _args26[1], newName = _args26[2];
                              _context24.next = 11;
                              return _this3[methodName](collectionName, newName, oldName);

                            case 11:
                              _context24.next = 27;
                              break;

                            case 13:
                              if (!(methodName === 'renameCollection')) {
                                _context24.next = 19;
                                break;
                              }

                              _args27 = slicedToArray(args, 2), oldCollectionName = _args27[0], newCollectionName = _args27[1];
                              _context24.next = 17;
                              return _this3[methodName](newCollectionName, oldCollectionName);

                            case 17:
                              _context24.next = 27;
                              break;

                            case 19:
                              if (!(methodName === 'addField')) {
                                _context24.next = 25;
                                break;
                              }

                              _args28 = slicedToArray(args, 2), _collectionName = _args28[0], fieldName = _args28[1];
                              _context24.next = 23;
                              return _this3[REVERSE_MAP[methodName]](_collectionName, fieldName);

                            case 23:
                              _context24.next = 27;
                              break;

                            case 25:
                              _context24.next = 27;
                              return _this3[REVERSE_MAP[methodName]].apply(_this3, toConsumableArray(args));

                            case 27:
                            case "end":
                              return _context24.stop();
                          }
                        }
                      }, _callee24);
                    }));

                    return function (_x41) {
                      return _ref4.apply(this, arguments);
                    };
                  }());

                case 3:
                case "end":
                  return _context25.stop();
              }
            }
          }, _callee25, this);
        }));

        function down() {
          return _down2.apply(this, arguments);
        }

        return down;
      }()
    }, {
      key: "steps",
      get: function get() {
        var _returnType20 = flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.exactObject(flowRuntime_umd.property("args", flowRuntime_umd.array()), flowRuntime_umd.property("method", flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.typeOf(REVERSE_MAP)), flowRuntime_umd.string("reversible"))))));

        return _returnType20.assert(assign([], this._steps && toConsumableArray(this._steps) || []));
      }
    }, {
      key: "index",
      get: function get() {
        var _returnType21 = flowRuntime_umd["return"](flowRuntime_umd.number());

        var _this$id$split = this.id.split('_'),
            _this$id$split2 = slicedToArray(_this$id$split, 1),
            index = _this$id$split2[0];

        return _returnType21.assert(index);
      }
    }], [{
      key: "createCollection",
      value: function createCollection(name, options) {
        var _nameType = flowRuntime_umd.string();

        var _optionsType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        var _returnType22 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("name", _nameType).assert(name);
        flowRuntime_umd.param("options", _optionsType).assert(options);

        this.prototype._steps.push({
          args: [name, options],
          method: 'createCollection'
        });
      }
    }, {
      key: "createEdgeCollection",
      value: function createEdgeCollection(collectionName1, collectionName2, options) {
        var _collectionName1Type = flowRuntime_umd.string();

        var _collectionName2Type = flowRuntime_umd.string();

        var _optionsType3 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        var _returnType23 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("collectionName1", _collectionName1Type).assert(collectionName1);
        flowRuntime_umd.param("collectionName2", _collectionName2Type).assert(collectionName2);
        flowRuntime_umd.param("options", _optionsType3).assert(options);

        this.prototype._steps.push({
          args: [collectionName1, collectionName2, options],
          method: 'createEdgeCollection'
        });
      }
    }, {
      key: "addField",
      value: function addField(collectionName, fieldName, options) {
        var _collectionNameType = flowRuntime_umd.string();

        var _fieldNameType = flowRuntime_umd.string();

        var _optionsType5 = flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES))), flowRuntime_umd.property("default", flowRuntime_umd.nullable(flowRuntime_umd.any()))));

        var _returnType24 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("collectionName", _collectionNameType).assert(collectionName);
        flowRuntime_umd.param("fieldName", _fieldNameType).assert(fieldName);
        flowRuntime_umd.param("options", _optionsType5).assert(options);

        this.prototype._steps.push({
          args: [collectionName, fieldName, options],
          method: 'addField'
        });
      }
    }, {
      key: "addIndex",
      value: function addIndex(collectionName, fieldNames, options) {
        var _collectionNameType3 = flowRuntime_umd.string();

        var _fieldNamesType = flowRuntime_umd.array(flowRuntime_umd.string());

        var _optionsType7 = flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("sparse", flowRuntime_umd["boolean"](), true));

        var _returnType25 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("collectionName", _collectionNameType3).assert(collectionName);
        flowRuntime_umd.param("fieldNames", _fieldNamesType).assert(fieldNames);
        flowRuntime_umd.param("options", _optionsType7).assert(options);

        this.prototype._steps.push({
          args: [collectionName, fieldNames, options],
          method: 'addIndex'
        });
      }
    }, {
      key: "addTimestamps",
      value: function addTimestamps(collectionName, options) {
        var _collectionNameType5 = flowRuntime_umd.string();

        var _optionsType9 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        var _returnType26 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("collectionName", _collectionNameType5).assert(collectionName);
        flowRuntime_umd.param("options", _optionsType9).assert(options);

        this.prototype._steps.push({
          args: [collectionName, options],
          method: 'addTimestamps'
        });
      }
    }, {
      key: "changeCollection",
      value: function changeCollection(name, options) {
        var _nameType3 = flowRuntime_umd.string();

        var _optionsType11 = flowRuntime_umd.ref("object");

        var _returnType27 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("name", _nameType3).assert(name);
        flowRuntime_umd.param("options", _optionsType11).assert(options);

        this.prototype._steps.push({
          args: [name, options],
          method: 'changeCollection'
        });
      }
    }, {
      key: "changeField",
      value: function changeField(collectionName, fieldName, options) {
        var _collectionNameType7 = flowRuntime_umd.string();

        var _fieldNameType3 = flowRuntime_umd.string();

        var _optionsType13 = flowRuntime_umd.union(flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$keys(flowRuntime_umd.typeOf(SUPPORTED_TYPES)))));

        var _returnType28 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("collectionName", _collectionNameType7).assert(collectionName);
        flowRuntime_umd.param("fieldName", _fieldNameType3).assert(fieldName);
        flowRuntime_umd.param("options", _optionsType13).assert(options);

        this.prototype._steps.push({
          args: [collectionName, fieldName, options],
          method: 'changeField'
        });
      }
    }, {
      key: "renameField",
      value: function renameField(collectionName, fieldName, newFieldName) {
        var _collectionNameType9 = flowRuntime_umd.string();

        var _fieldNameType5 = flowRuntime_umd.string();

        var _newFieldNameType = flowRuntime_umd.string();

        var _returnType29 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("collectionName", _collectionNameType9).assert(collectionName);
        flowRuntime_umd.param("fieldName", _fieldNameType5).assert(fieldName);
        flowRuntime_umd.param("newFieldName", _newFieldNameType).assert(newFieldName);

        this.prototype._steps.push({
          args: [collectionName, fieldName, newFieldName],
          method: 'renameField'
        });
      }
    }, {
      key: "renameIndex",
      value: function renameIndex(collectionName, oldCollectionName, newCollectionName) {
        var _collectionNameType11 = flowRuntime_umd.string();

        var _oldCollectionNameType = flowRuntime_umd.string();

        var _newCollectionNameType = flowRuntime_umd.string();

        var _returnType30 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("collectionName", _collectionNameType11).assert(collectionName);
        flowRuntime_umd.param("oldCollectionName", _oldCollectionNameType).assert(oldCollectionName);
        flowRuntime_umd.param("newCollectionName", _newCollectionNameType).assert(newCollectionName);

        this.prototype._steps.push({
          args: [collectionName, oldCollectionName, newCollectionName],
          method: 'renameIndex'
        });
      }
    }, {
      key: "renameCollection",
      value: function renameCollection(collectionName, newCollectionName) {
        var _collectionNameType13 = flowRuntime_umd.string();

        var _newCollectionNameType3 = flowRuntime_umd.string();

        var _returnType31 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("collectionName", _collectionNameType13).assert(collectionName);
        flowRuntime_umd.param("newCollectionName", _newCollectionNameType3).assert(newCollectionName);

        this.prototype._steps.push({
          args: [collectionName, newCollectionName],
          method: 'renameCollection'
        });
      }
    }, {
      key: "dropCollection",
      value: function dropCollection(collectionName) {
        var _collectionNameType15 = flowRuntime_umd.string();

        var _returnType32 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("collectionName", _collectionNameType15).assert(collectionName);

        this.prototype._steps.push({
          args: [collectionName],
          method: 'dropCollection'
        });
      }
    }, {
      key: "dropEdgeCollection",
      value: function dropEdgeCollection(collectionName1, collectionName2) {
        var _collectionName1Type3 = flowRuntime_umd.string();

        var _collectionName2Type3 = flowRuntime_umd.string();

        var _returnType33 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("collectionName1", _collectionName1Type3).assert(collectionName1);
        flowRuntime_umd.param("collectionName2", _collectionName2Type3).assert(collectionName2);

        this.prototype._steps.push({
          args: [collectionName1, collectionName2],
          method: 'dropEdgeCollection'
        });
      }
    }, {
      key: "removeField",
      value: function removeField(collectionName, fieldName) {
        var _collectionNameType17 = flowRuntime_umd.string();

        var _fieldNameType7 = flowRuntime_umd.string();

        var _returnType34 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("collectionName", _collectionNameType17).assert(collectionName);
        flowRuntime_umd.param("fieldName", _fieldNameType7).assert(fieldName);

        this.prototype._steps.push({
          args: [collectionName, fieldName],
          method: 'removeField'
        });
      }
    }, {
      key: "removeIndex",
      value: function removeIndex(collectionName, fieldNames, options) {
        var _collectionNameType19 = flowRuntime_umd.string();

        var _fieldNamesType3 = flowRuntime_umd.array(flowRuntime_umd.string());

        var _optionsType15 = flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd["boolean"](), true), flowRuntime_umd.property("sparse", flowRuntime_umd["boolean"](), true));

        var _returnType35 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("collectionName", _collectionNameType19).assert(collectionName);
        flowRuntime_umd.param("fieldNames", _fieldNamesType3).assert(fieldNames);
        flowRuntime_umd.param("options", _optionsType15).assert(options);

        this.prototype._steps.push({
          args: [collectionName, fieldNames, options],
          method: 'removeIndex'
        });
      }
    }, {
      key: "removeTimestamps",
      value: function removeTimestamps(collectionName, options) {
        var _collectionNameType21 = flowRuntime_umd.string();

        var _optionsType17 = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));

        var _returnType36 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("collectionName", _collectionNameType21).assert(collectionName);
        flowRuntime_umd.param("options", _optionsType17).assert(options);

        this.prototype._steps.push({
          args: [collectionName, options],
          method: 'removeTimestamps'
        });
      }
    }, {
      key: "reversible",
      value: function reversible(lambda) {
        var _lambdaType = flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.exactObject(flowRuntime_umd.property("up", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("down", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));

        var _returnType37 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("lambda", _lambdaType).assert(lambda);

        this.prototype._steps.push({
          args: [lambda],
          method: 'reversible'
        });
      }
    }, {
      key: "change",
      value: function change() {
        var _returnType38 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.symbol()));

        return _returnType38.assert(NON_OVERRIDDEN);
      }
    }, {
      key: "up",
      value: function up() {
        var _returnType39 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.symbol()));

        return _returnType39.assert(NON_OVERRIDDEN);
      }
    }, {
      key: "down",
      value: function down() {
        var _returnType40 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.symbol()));

        return _returnType40.assert(NON_OVERRIDDEN);
      }
    }, {
      key: "restoreObject",
      value: function () {
        var _restoreObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee26() {
          return regenerator.wrap(function _callee26$(_context26) {
            while (1) {
              switch (_context26.prev = _context26.next) {
                case 0:
                  return _context26.abrupt("return", assert.fail("restoreObject method not supported for ".concat(this.name)));

                case 1:
                case "end":
                  return _context26.stop();
              }
            }
          }, _callee26, this);
        }));

        function restoreObject() {
          return _restoreObject.apply(this, arguments);
        }

        return restoreObject;
      }()
    }, {
      key: "replicateObject",
      value: function () {
        var _replicateObject = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee27() {
          return regenerator.wrap(function _callee27$(_context27) {
            while (1) {
              switch (_context27.prev = _context27.next) {
                case 0:
                  return _context27.abrupt("return", assert.fail("replicateObject method not supported for ".concat(this.name)));

                case 1:
                case "end":
                  return _context27.stop();
              }
            }
          }, _callee27, this);
        }));

        function replicateObject() {
          return _replicateObject.apply(this, arguments);
        }

        return replicateObject;
      }()
    }, {
      key: "onInitialize",
      value: function onInitialize() {
        var _get2;

        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        (_get2 = get(getPrototypeOf(Migration), "onInitialize", this)).call.apply(_get2, [this].concat(args));

        this.prototype._steps = [];
        if (this === Migration) return;
        var changeReturn = this.change();

        if (changeReturn === NON_OVERRIDDEN) {
          var hasUpDownDeined = 1;
          var upFunctor = this.up();
          var downFunctor = this.down();
          hasUpDownDeined &= upFunctor !== NON_OVERRIDDEN;
          hasUpDownDeined &= downFunctor !== NON_OVERRIDDEN;
          assert(hasUpDownDeined == 1, 'Static `change` method should be defined or direct static methods `up` and `down` should be defined with return lambda functors');
          Reflect.defineProperty(this.prototype, 'up', method(this.prototype, 'up', {
            value: upFunctor
          }));
          Reflect.defineProperty(this.prototype, 'down', method(this.prototype, 'down', {
            value: downFunctor
          }));
        }
      }
    }]);

    return Migration;
  }(Record), _class3.__filename = __filename$s, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), applyDecoratedDescriptor(_class2.prototype, "steps", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "steps"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "index", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "index"), _class2.prototype), applyDecoratedDescriptor(_class2, "createCollection", [method], Object.getOwnPropertyDescriptor(_class2, "createCollection"), _class2), applyDecoratedDescriptor(_class2.prototype, "createCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "createCollection"), _class2.prototype), applyDecoratedDescriptor(_class2, "createEdgeCollection", [method], Object.getOwnPropertyDescriptor(_class2, "createEdgeCollection"), _class2), applyDecoratedDescriptor(_class2.prototype, "createEdgeCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "createEdgeCollection"), _class2.prototype), applyDecoratedDescriptor(_class2, "addField", [method], Object.getOwnPropertyDescriptor(_class2, "addField"), _class2), applyDecoratedDescriptor(_class2.prototype, "addField", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addField"), _class2.prototype), applyDecoratedDescriptor(_class2, "addIndex", [method], Object.getOwnPropertyDescriptor(_class2, "addIndex"), _class2), applyDecoratedDescriptor(_class2.prototype, "addIndex", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addIndex"), _class2.prototype), applyDecoratedDescriptor(_class2, "addTimestamps", [method], Object.getOwnPropertyDescriptor(_class2, "addTimestamps"), _class2), applyDecoratedDescriptor(_class2.prototype, "addTimestamps", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "addTimestamps"), _class2.prototype), applyDecoratedDescriptor(_class2, "changeCollection", [method], Object.getOwnPropertyDescriptor(_class2, "changeCollection"), _class2), applyDecoratedDescriptor(_class2.prototype, "changeCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "changeCollection"), _class2.prototype), applyDecoratedDescriptor(_class2, "changeField", [method], Object.getOwnPropertyDescriptor(_class2, "changeField"), _class2), applyDecoratedDescriptor(_class2.prototype, "changeField", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "changeField"), _class2.prototype), applyDecoratedDescriptor(_class2, "renameField", [method], Object.getOwnPropertyDescriptor(_class2, "renameField"), _class2), applyDecoratedDescriptor(_class2.prototype, "renameField", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "renameField"), _class2.prototype), applyDecoratedDescriptor(_class2, "renameIndex", [method], Object.getOwnPropertyDescriptor(_class2, "renameIndex"), _class2), applyDecoratedDescriptor(_class2.prototype, "renameIndex", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "renameIndex"), _class2.prototype), applyDecoratedDescriptor(_class2, "renameCollection", [method], Object.getOwnPropertyDescriptor(_class2, "renameCollection"), _class2), applyDecoratedDescriptor(_class2.prototype, "renameCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "renameCollection"), _class2.prototype), applyDecoratedDescriptor(_class2, "dropCollection", [method], Object.getOwnPropertyDescriptor(_class2, "dropCollection"), _class2), applyDecoratedDescriptor(_class2.prototype, "dropCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "dropCollection"), _class2.prototype), applyDecoratedDescriptor(_class2, "dropEdgeCollection", [method], Object.getOwnPropertyDescriptor(_class2, "dropEdgeCollection"), _class2), applyDecoratedDescriptor(_class2.prototype, "dropEdgeCollection", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "dropEdgeCollection"), _class2.prototype), applyDecoratedDescriptor(_class2, "removeField", [method], Object.getOwnPropertyDescriptor(_class2, "removeField"), _class2), applyDecoratedDescriptor(_class2.prototype, "removeField", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeField"), _class2.prototype), applyDecoratedDescriptor(_class2, "removeIndex", [method], Object.getOwnPropertyDescriptor(_class2, "removeIndex"), _class2), applyDecoratedDescriptor(_class2.prototype, "removeIndex", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeIndex"), _class2.prototype), applyDecoratedDescriptor(_class2, "removeTimestamps", [method], Object.getOwnPropertyDescriptor(_class2, "removeTimestamps"), _class2), applyDecoratedDescriptor(_class2.prototype, "removeTimestamps", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "removeTimestamps"), _class2.prototype), applyDecoratedDescriptor(_class2, "reversible", [method], Object.getOwnPropertyDescriptor(_class2, "reversible"), _class2), applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "migrate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "migrate"), _class2.prototype), applyDecoratedDescriptor(_class2, "change", [method], Object.getOwnPropertyDescriptor(_class2, "change"), _class2), applyDecoratedDescriptor(_class2.prototype, "up", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "up"), _class2.prototype), applyDecoratedDescriptor(_class2, "up", [method], Object.getOwnPropertyDescriptor(_class2, "up"), _class2), applyDecoratedDescriptor(_class2.prototype, "down", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "down"), _class2.prototype), applyDecoratedDescriptor(_class2, "down", [method], Object.getOwnPropertyDescriptor(_class2, "down"), _class2), applyDecoratedDescriptor(_class2, "restoreObject", [method], Object.getOwnPropertyDescriptor(_class2, "restoreObject"), _class2), applyDecoratedDescriptor(_class2, "replicateObject", [method], Object.getOwnPropertyDescriptor(_class2, "replicateObject"), _class2), applyDecoratedDescriptor(_class2, "onInitialize", [method], Object.getOwnPropertyDescriptor(_class2, "onInitialize"), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$t = '/mapper/HttpAdapter.js';

function _createSuper$s(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$s(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$s() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
var HttpAdapter = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      Adapter = _Module$NS.Adapter,
      HttpAdapterMixin = _Module$NS.HttpAdapterMixin,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      nameBy = _Module$NS.nameBy,
      mixin = _Module$NS.mixin;
  var HttpAdapter = (_dec = partOf(Module), _dec2 = mixin(HttpAdapterMixin), initialize(_class = _dec(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Adapter) {
    inherits(HttpAdapter, _Adapter);

    var _super = _createSuper$s(HttpAdapter);

    function HttpAdapter() {
      classCallCheck(this, HttpAdapter);

      return _super.apply(this, arguments);
    }

    return HttpAdapter;
  }(Adapter), _class3.__filename = __filename$t, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$u = '/mapper/MemoryAdapter.js';

function _createSuper$t(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$t(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$t() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
var MemoryAdapter = (function (Module) {
  var _dec, _dec2, _class, _class2, _init, _init2, _class3, _temp;

  var _Module$NS = Module.NS,
      Adapter = _Module$NS.Adapter,
      MemoryAdapterMixin = _Module$NS.MemoryAdapterMixin,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      nameBy = _Module$NS.nameBy,
      mixin = _Module$NS.mixin;
  var MemoryAdapter = (_dec = partOf(Module), _dec2 = mixin(MemoryAdapterMixin), initialize(_class = _dec(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Adapter) {
    inherits(MemoryAdapter, _Adapter);

    var _super = _createSuper$t(MemoryAdapter);

    function MemoryAdapter() {
      classCallCheck(this, MemoryAdapter);

      return _super.apply(this, arguments);
    }

    return MemoryAdapter;
  }(Adapter), _class3.__filename = __filename$u, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2)), _class2)) || _class) || _class) || _class);
});

var __filename$v = '/proxies/Collection.js';

// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
var SerializableInterface = flowRuntime_umd.type("SerializableInterface", function (SerializableInterface) {
  var T = SerializableInterface.typeParameter("T");
  return flowRuntime_umd.object(flowRuntime_umd.property("normalize", flowRuntime_umd["function"](flowRuntime_umd.param("ahData", flowRuntime_umd.any()), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", T)))), flowRuntime_umd.property("serialize", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", T), flowRuntime_umd.param("ahOptions", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.any())))));
});

function _createSuper$u(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$u(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$u() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var SerializableInterface$1 = flowRuntime_umd.tdz(function () {
  return SerializableInterface;
});
var DriverInterface$3 = flowRuntime_umd.tdz(function () {
  return DriverInterface;
});
var ObjectizerInterface$2 = flowRuntime_umd.tdz(function () {
  return ObjectizerInterface;
});
var SerializerInterface$2 = flowRuntime_umd.tdz(function () {
  return SerializerInterface;
});
var CursorInterface$5 = flowRuntime_umd.tdz(function () {
  return CursorInterface;
});
var RecordInterface$b = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$5 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var hasProp$5 = {}.hasOwnProperty;
var Collection = (function (Module) {
  var _t$TypeParametersSymb;

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _class2, _init, _init2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3, _temp;

  var _Module$NS = Module.NS,
      RECORD_CHANGED = _Module$NS.RECORD_CHANGED,
      Proxy = _Module$NS.Proxy,
      assert = _Module$NS.assert,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      mixin = _Module$NS.mixin,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect;

  var _CollectionTypeParametersSymbol = Symbol("CollectionTypeParameters");

  var Collection = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Collection", function (Collection) {
    var R = Collection.typeParameter("R", undefined, flowRuntime_umd.Class(flowRuntime_umd.existential()));
    return [flowRuntime_umd["extends"](Proxy), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("_serializerFactory", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd.param("_arg1", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref(SerializerInterface$2, flowRuntime_umd.ref(RecordInterface$b))))), flowRuntime_umd.property("_objectizerFactory", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd.param("_arg1", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref(ObjectizerInterface$2, flowRuntime_umd.flowInto(R), flowRuntime_umd.ref(RecordInterface$b))))), flowRuntime_umd.property("_adapterFactory", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(DriverInterface$3, flowRuntime_umd.Class(flowRuntime_umd.existential()), flowRuntime_umd.ref("object"))))), flowRuntime_umd.property("_recordNewable", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.flowInto(R)))), flowRuntime_umd.property("_cursorFactory", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("_arg1", flowRuntime_umd.ref("array")), flowRuntime_umd.param("_arg2", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref(CursorInterface$5, flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref(RecordInterface$b))))), flowRuntime_umd.property("_collectionFactory", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(RecordInterface$b))))), flowRuntime_umd.method("constructor", flowRuntime_umd.param("args", flowRuntime_umd.any())), flowRuntime_umd.method("delegate", flowRuntime_umd["return"](R)), flowRuntime_umd.method("serializer", flowRuntime_umd["return"](flowRuntime_umd.ref(SerializerInterface$2, flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("objectizer", flowRuntime_umd["return"](flowRuntime_umd.ref(ObjectizerInterface$2, R, flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("adapter", flowRuntime_umd["return"](flowRuntime_umd.ref(DriverInterface$3, flowRuntime_umd.Class(flowRuntime_umd.existential()), flowRuntime_umd.ref("object")))), flowRuntime_umd.method("collectionName", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("collectionPrefix", flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("collectionFullName", flowRuntime_umd.param("asName", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.string())), flowRuntime_umd.method("recordHasBeenChanged", flowRuntime_umd.param("asType", flowRuntime_umd.string()), flowRuntime_umd.param("aoData", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd["void"]())), flowRuntime_umd.method("generateId", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())))), flowRuntime_umd.method("build", flowRuntime_umd.param("properties", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("create", flowRuntime_umd.param("properties", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("push", flowRuntime_umd.param("aoRecord", flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("delete", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("destroy", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("remove", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]()))), flowRuntime_umd.method("find", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$b))))), flowRuntime_umd.method("findMany", flowRuntime_umd.param("ids", flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$5, flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref(RecordInterface$b))))), flowRuntime_umd.method("take", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$b))))), flowRuntime_umd.method("takeMany", flowRuntime_umd.param("ids", flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$5, flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref(RecordInterface$b))))), flowRuntime_umd.method("takeAll", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$5, flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref(RecordInterface$b))))), flowRuntime_umd.method("update", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd.param("properties", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("override", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd.param("aoRecord", flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("clone", flowRuntime_umd.param("aoRecord", flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("copy", flowRuntime_umd.param("aoRecord", flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b)))), flowRuntime_umd.method("includes", flowRuntime_umd.param("id", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]()))), flowRuntime_umd.method("length", flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.number()))), flowRuntime_umd.method("normalize", flowRuntime_umd.param("ahData", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$b))))), flowRuntime_umd.method("serialize", flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$b))), flowRuntime_umd.param("ahOptions", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))))];
  })), _dec2 = inversify_8(), _dec3 = partOf(Module), _dec4 = flowRuntime_umd.decorate(flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd.param("_arg1", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref(SerializerInterface$2, flowRuntime_umd.ref(RecordInterface$b))))), _dec5 = inversify_11('SerializerFactory<*>'), _dec6 = flowRuntime_umd.decorate(function () {
    return flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd.param("_arg1", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref(ObjectizerInterface$2, flowRuntime_umd.flowInto(this[_CollectionTypeParametersSymbol].R), flowRuntime_umd.ref(RecordInterface$b))));
  }), _dec7 = inversify_11('ObjectizerFactory<*>'), _dec8 = flowRuntime_umd.decorate(flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(DriverInterface$3, flowRuntime_umd.Class(flowRuntime_umd.existential()), flowRuntime_umd.ref("object"))))), _dec9 = inversify_11('AdapterFactory<*>'), _dec10 = flowRuntime_umd.decorate(function () {
    return flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.flowInto(this[_CollectionTypeParametersSymbol].R)));
  }), _dec11 = inversify_11('RecordNewable<*>'), _dec12 = flowRuntime_umd.decorate(flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd.param("_arg1", flowRuntime_umd.ref("array")), flowRuntime_umd.param("_arg2", flowRuntime_umd.nullable(flowRuntime_umd.string())), flowRuntime_umd["return"](flowRuntime_umd.ref(CursorInterface$5, flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref(RecordInterface$b))))), _dec13 = inversify_11('CursorFactory<*>'), _dec14 = flowRuntime_umd.decorate(flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(RecordInterface$b))))), _dec15 = inversify_11('CollectionFactory<*>'), _dec(_class = initialize(_class = _dec2(_class = _dec3(_class = (_class2 = (_temp = (_t$TypeParametersSymb = flowRuntime_umd.TypeParametersSymbol, _class3 = /*#__PURE__*/function (_Proxy) {
    inherits(Collection, _Proxy);

    var _super = _createSuper$u(Collection);

    function Collection() {
      var _this;

      classCallCheck(this, Collection);

      var _typeParameters = {
        R: flowRuntime_umd.typeParameter("R")
      };

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      initializerDefineProperty(_this, "_serializerFactory", _descriptor, assertThisInitialized(_this));

      initializerDefineProperty(_this, "_objectizerFactory", _descriptor2, assertThisInitialized(_this));

      initializerDefineProperty(_this, "_adapterFactory", _descriptor3, assertThisInitialized(_this));

      initializerDefineProperty(_this, "_recordNewable", _descriptor4, assertThisInitialized(_this));

      initializerDefineProperty(_this, "_cursorFactory", _descriptor5, assertThisInitialized(_this));

      initializerDefineProperty(_this, "_collectionFactory", _descriptor6, assertThisInitialized(_this));

      _this[_CollectionTypeParametersSymbol] = _typeParameters;
      flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(RecordInterface$b)).assert(assertThisInitialized(_this));
      flowRuntime_umd.ref(SerializableInterface$1, flowRuntime_umd.ref(RecordInterface$b)).assert(assertThisInitialized(_this));
      return _this;
    }

    createClass(Collection, [{
      key: "collectionName",
      value: function collectionName() {
        var _returnType25 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType25.assert(inflect.pluralize(inflect.underscore((this.getName() || '').replace(/Collection$/, ''))));
      }
    }, {
      key: "collectionPrefix",
      value: function collectionPrefix() {
        var _returnType26 = flowRuntime_umd["return"](flowRuntime_umd.string());

        return _returnType26.assert("".concat(inflect.underscore(this.Module.name), "_"));
      }
    }, {
      key: "collectionFullName",
      value: function collectionFullName() {
        var asName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        var _asNameType = flowRuntime_umd.nullable(flowRuntime_umd.string());

        var _returnType27 = flowRuntime_umd["return"](flowRuntime_umd.string());

        flowRuntime_umd.param("asName", _asNameType).assert(asName);
        return _returnType27.assert("".concat(this.collectionPrefix()).concat(asName || this.collectionName()));
      }
    }, {
      key: "recordHasBeenChanged",
      value: function recordHasBeenChanged(asType, aoData) {
        var _asTypeType = flowRuntime_umd.string();

        var _aoDataType = flowRuntime_umd.ref("object");

        var _returnType28 = flowRuntime_umd["return"](flowRuntime_umd["void"]());

        flowRuntime_umd.param("asType", _asTypeType).assert(asType);
        flowRuntime_umd.param("aoData", _aoDataType).assert(aoData);
        this.send(RECORD_CHANGED, aoData, asType);
      }
    }, {
      key: "generateId",
      value: function () {
        var _generateId = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
          var _returnType;

          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _returnType = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()), flowRuntime_umd.ref("Promise", flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()))));
                  return _context.abrupt("return", _returnType.assert());

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function generateId() {
          return _generateId.apply(this, arguments);
        }

        return generateId;
      }()
    }, {
      key: "build",
      value: function () {
        var _build = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(properties) {
          var _propertiesType, _returnType2, tmp;

          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _propertiesType = flowRuntime_umd.ref("object");
                  _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$b), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b))));
                  flowRuntime_umd.param("properties", _propertiesType).assert(properties);
                  _context2.next = 5;
                  return this.objectizer.recoverize(this.delegate, properties);

                case 5:
                  tmp = _context2.sent;
                  return _context2.abrupt("return", _returnType2.assert(tmp));

                case 7:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function build(_x) {
          return _build.apply(this, arguments);
        }

        return build;
      }()
    }, {
      key: "create",
      value: function () {
        var _create = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee3(properties) {
          var _propertiesType2, _returnType3, voRecord;

          return regenerator.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _propertiesType2 = flowRuntime_umd.ref("object");
                  _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$b), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b))));
                  flowRuntime_umd.param("properties", _propertiesType2).assert(properties);
                  _context3.next = 5;
                  return this.build(properties);

                case 5:
                  voRecord = _context3.sent;
                  _context3.t0 = _returnType3;
                  _context3.next = 9;
                  return voRecord.save();

                case 9:
                  _context3.t1 = _context3.sent;
                  return _context3.abrupt("return", _context3.t0.assert.call(_context3.t0, _context3.t1));

                case 11:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function create(_x2) {
          return _create.apply(this, arguments);
        }

        return create;
      }()
    }, {
      key: "push",
      value: function () {
        var _push = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee4(aoRecord) {
          var _aoRecordType, _returnType4, snapshot, result;

          return regenerator.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _aoRecordType = flowRuntime_umd.ref(RecordInterface$b);
                  _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$b), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b))));
                  flowRuntime_umd.param("aoRecord", _aoRecordType).assert(aoRecord);
                  _context4.next = 5;
                  return this.serialize(aoRecord);

                case 5:
                  snapshot = _context4.sent;
                  _context4.next = 8;
                  return this.adapter.push(this.delegate, snapshot);

                case 8:
                  result = _context4.sent;
                  _context4.t0 = _returnType4;
                  _context4.next = 12;
                  return this.normalize(result);

                case 12:
                  _context4.t1 = _context4.sent;
                  return _context4.abrupt("return", _context4.t0.assert.call(_context4.t0, _context4.t1));

                case 14:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function push(_x3) {
          return _push.apply(this, arguments);
        }

        return push;
      }()
    }, {
      key: 'delete',
      value: function () {
        var _delete2 = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee5(id) {
          var _idType, _returnType5, voRecord;

          return regenerator.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _idType = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number());
                  _returnType5 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("id", _idType).assert(id);
                  _context5.next = 5;
                  return this.find(id);

                case 5:
                  voRecord = _context5.sent;
                  _context5.next = 8;
                  return voRecord["delete"]();

                case 8:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function _delete(_x4) {
          return _delete2.apply(this, arguments);
        }

        return _delete;
      }()
    }, {
      key: "destroy",
      value: function () {
        var _destroy = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee6(id) {
          var _idType2, _returnType6, voRecord;

          return regenerator.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  _idType2 = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number());
                  _returnType6 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("id", _idType2).assert(id);
                  _context6.next = 5;
                  return this.find(id);

                case 5:
                  voRecord = _context6.sent;
                  _context6.next = 8;
                  return voRecord.destroy();

                case 8:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function destroy(_x5) {
          return _destroy.apply(this, arguments);
        }

        return destroy;
      }()
    }, {
      key: "remove",
      value: function () {
        var _remove = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee7(id) {
          var _idType3, _returnType7;

          return regenerator.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  _idType3 = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number());
                  _returnType7 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["void"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())));
                  flowRuntime_umd.param("id", _idType3).assert(id);
                  _context7.next = 5;
                  return this.adapter.remove(this.delegate, id);

                case 5:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function remove(_x6) {
          return _remove.apply(this, arguments);
        }

        return remove;
      }()
    }, {
      key: "find",
      value: function () {
        var _find = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee8(id) {
          var _idType4, _returnType8;

          return regenerator.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  _idType4 = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number());
                  _returnType8 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$b)))));
                  flowRuntime_umd.param("id", _idType4).assert(id);
                  _context8.t0 = _returnType8;
                  _context8.next = 6;
                  return this.take(id);

                case 6:
                  _context8.t1 = _context8.sent;
                  return _context8.abrupt("return", _context8.t0.assert.call(_context8.t0, _context8.t1));

                case 8:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));

        function find(_x7) {
          return _find.apply(this, arguments);
        }

        return find;
      }()
    }, {
      key: "findMany",
      value: function () {
        var _findMany = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee9(ids) {
          var _idsType, _returnType9;

          return regenerator.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _idsType = flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()));
                  _returnType9 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(CursorInterface$5, flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$5, flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref(RecordInterface$b)))));
                  flowRuntime_umd.param("ids", _idsType).assert(ids);
                  _context9.t0 = _returnType9;
                  _context9.next = 6;
                  return this.takeMany(ids);

                case 6:
                  _context9.t1 = _context9.sent;
                  return _context9.abrupt("return", _context9.t0.assert.call(_context9.t0, _context9.t1));

                case 8:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));

        function findMany(_x8) {
          return _findMany.apply(this, arguments);
        }

        return findMany;
      }()
    }, {
      key: "take",
      value: function () {
        var _take = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee10(id) {
          var _idType5, _returnType10, result;

          return regenerator.wrap(function _callee10$(_context10) {
            while (1) {
              switch (_context10.prev = _context10.next) {
                case 0:
                  _idType5 = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number());
                  _returnType10 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$b)))));
                  flowRuntime_umd.param("id", _idType5).assert(id);
                  _context10.next = 5;
                  return this.adapter.take(this.delegate, id);

                case 5:
                  result = _context10.sent;

                  if (!(result == null)) {
                    _context10.next = 8;
                    break;
                  }

                  return _context10.abrupt("return", _returnType10.assert(null));

                case 8:
                  _context10.t0 = _returnType10;
                  _context10.next = 11;
                  return this.normalize(result);

                case 11:
                  _context10.t1 = _context10.sent;
                  return _context10.abrupt("return", _context10.t0.assert.call(_context10.t0, _context10.t1));

                case 13:
                case "end":
                  return _context10.stop();
              }
            }
          }, _callee10, this);
        }));

        function take(_x9) {
          return _take.apply(this, arguments);
        }

        return take;
      }()
    }, {
      key: "takeMany",
      value: function () {
        var _takeMany = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee11(ids) {
          var _idsType2, _returnType11, result;

          return regenerator.wrap(function _callee11$(_context11) {
            while (1) {
              switch (_context11.prev = _context11.next) {
                case 0:
                  _idsType2 = flowRuntime_umd.array(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number()));
                  _returnType11 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(CursorInterface$5, flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$5, flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref(RecordInterface$b)))));
                  flowRuntime_umd.param("ids", _idsType2).assert(ids);
                  _context11.next = 5;
                  return this.adapter.takeMany(this.delegate, ids);

                case 5:
                  result = _context11.sent;
                  return _context11.abrupt("return", _returnType11.assert(this._cursorFactory(this.getName(), result)));

                case 7:
                case "end":
                  return _context11.stop();
              }
            }
          }, _callee11, this);
        }));

        function takeMany(_x10) {
          return _takeMany.apply(this, arguments);
        }

        return takeMany;
      }()
    }, {
      key: "takeAll",
      value: function () {
        var _takeAll = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee12() {
          var _returnType12, result;

          return regenerator.wrap(function _callee12$(_context12) {
            while (1) {
              switch (_context12.prev = _context12.next) {
                case 0:
                  _returnType12 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(CursorInterface$5, flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(CursorInterface$5, flowRuntime_umd.ref(CollectionInterface$5, flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref(RecordInterface$b)))));
                  _context12.next = 3;
                  return this.adapter.takeAll(this.delegate);

                case 3:
                  result = _context12.sent;
                  return _context12.abrupt("return", _returnType12.assert(this._cursorFactory(this.getName(), result)));

                case 5:
                case "end":
                  return _context12.stop();
              }
            }
          }, _callee12, this);
        }));

        function takeAll() {
          return _takeAll.apply(this, arguments);
        }

        return takeAll;
      }()
    }, {
      key: "update",
      value: function () {
        var _update = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee13(id, properties) {
          var _idType6, _propertiesType3, _returnType13, existedRecord, receivedRecord, key;

          return regenerator.wrap(function _callee13$(_context13) {
            while (1) {
              switch (_context13.prev = _context13.next) {
                case 0:
                  _idType6 = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number());
                  _propertiesType3 = flowRuntime_umd.ref("object");
                  _returnType13 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$b), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b))));
                  flowRuntime_umd.param("id", _idType6).assert(id);
                  flowRuntime_umd.param("properties", _propertiesType3).assert(properties);
                  properties.id = id;
                  _context13.next = 8;
                  return this.find(id);

                case 8:
                  existedRecord = _context13.sent;
                  _context13.next = 11;
                  return this.objectizer.recoverize(this.delegate, properties);

                case 11:
                  receivedRecord = _context13.sent;
                  _context13.t0 = regenerator.keys(properties);

                case 13:
                  if ((_context13.t1 = _context13.t0()).done) {
                    _context13.next = 20;
                    break;
                  }

                  key = _context13.t1.value;

                  if (hasProp$5.call(properties, key)) {
                    _context13.next = 17;
                    break;
                  }

                  return _context13.abrupt("continue", 13);

                case 17:
                  existedRecord[key] = receivedRecord[key];
                  _context13.next = 13;
                  break;

                case 20:
                  _context13.t2 = _returnType13;
                  _context13.next = 23;
                  return existedRecord.save();

                case 23:
                  _context13.t3 = _context13.sent;
                  return _context13.abrupt("return", _context13.t2.assert.call(_context13.t2, _context13.t3));

                case 25:
                case "end":
                  return _context13.stop();
              }
            }
          }, _callee13, this);
        }));

        function update(_x11, _x12) {
          return _update.apply(this, arguments);
        }

        return update;
      }()
    }, {
      key: "override",
      value: function () {
        var _override = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee14(id, aoRecord) {
          var _idType7, _aoRecordType2, _returnType14, snapshot, result;

          return regenerator.wrap(function _callee14$(_context14) {
            while (1) {
              switch (_context14.prev = _context14.next) {
                case 0:
                  _idType7 = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number());
                  _aoRecordType2 = flowRuntime_umd.ref(RecordInterface$b);
                  _returnType14 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$b), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b))));
                  flowRuntime_umd.param("id", _idType7).assert(id);
                  flowRuntime_umd.param("aoRecord", _aoRecordType2).assert(aoRecord);
                  _context14.next = 7;
                  return this.serialize(aoRecord);

                case 7:
                  snapshot = _context14.sent;
                  _context14.next = 10;
                  return this.adapter.override(this.delegate, id, snapshot);

                case 10:
                  result = _context14.sent;
                  _context14.t0 = _returnType14;
                  _context14.next = 14;
                  return this.normalize(result);

                case 14:
                  _context14.t1 = _context14.sent;
                  return _context14.abrupt("return", _context14.t0.assert.call(_context14.t0, _context14.t1));

                case 16:
                case "end":
                  return _context14.stop();
              }
            }
          }, _callee14, this);
        }));

        function override(_x13, _x14) {
          return _override.apply(this, arguments);
        }

        return override;
      }()
    }, {
      key: "clone",
      value: function () {
        var _clone = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee15(aoRecord) {
          var _aoRecordType3, _returnType15;

          return regenerator.wrap(function _callee15$(_context15) {
            while (1) {
              switch (_context15.prev = _context15.next) {
                case 0:
                  _aoRecordType3 = flowRuntime_umd.ref(RecordInterface$b);
                  _returnType15 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$b), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b))));
                  flowRuntime_umd.param("aoRecord", _aoRecordType3).assert(aoRecord);
                  _context15.t0 = _returnType15;
                  _context15.next = 6;
                  return aoRecord.clone();

                case 6:
                  _context15.t1 = _context15.sent;
                  return _context15.abrupt("return", _context15.t0.assert.call(_context15.t0, _context15.t1));

                case 8:
                case "end":
                  return _context15.stop();
              }
            }
          }, _callee15);
        }));

        function clone(_x15) {
          return _clone.apply(this, arguments);
        }

        return clone;
      }()
    }, {
      key: "copy",
      value: function () {
        var _copy = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee16(aoRecord) {
          var _aoRecordType4, _returnType16;

          return regenerator.wrap(function _callee16$(_context16) {
            while (1) {
              switch (_context16.prev = _context16.next) {
                case 0:
                  _aoRecordType4 = flowRuntime_umd.ref(RecordInterface$b);
                  _returnType16 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.ref(RecordInterface$b), flowRuntime_umd.ref("Promise", flowRuntime_umd.ref(RecordInterface$b))));
                  flowRuntime_umd.param("aoRecord", _aoRecordType4).assert(aoRecord);
                  _context16.t0 = _returnType16;
                  _context16.next = 6;
                  return aoRecord.copy();

                case 6:
                  _context16.t1 = _context16.sent;
                  return _context16.abrupt("return", _context16.t0.assert.call(_context16.t0, _context16.t1));

                case 8:
                case "end":
                  return _context16.stop();
              }
            }
          }, _callee16);
        }));

        function copy(_x16) {
          return _copy.apply(this, arguments);
        }

        return copy;
      }()
    }, {
      key: "includes",
      value: function () {
        var _includes = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee17(id) {
          var _idType8, _returnType17;

          return regenerator.wrap(function _callee17$(_context17) {
            while (1) {
              switch (_context17.prev = _context17.next) {
                case 0:
                  _idType8 = flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd.number());
                  _returnType17 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd["boolean"](), flowRuntime_umd.ref("Promise", flowRuntime_umd["boolean"]())));
                  flowRuntime_umd.param("id", _idType8).assert(id);
                  _context17.t0 = _returnType17;
                  _context17.next = 6;
                  return this.adapter.includes(this.delegate, id);

                case 6:
                  _context17.t1 = _context17.sent;
                  return _context17.abrupt("return", _context17.t0.assert.call(_context17.t0, _context17.t1));

                case 8:
                case "end":
                  return _context17.stop();
              }
            }
          }, _callee17, this);
        }));

        function includes(_x17) {
          return _includes.apply(this, arguments);
        }

        return includes;
      }()
    }, {
      key: "length",
      value: function () {
        var _length = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee18() {
          var _returnType18;

          return regenerator.wrap(function _callee18$(_context18) {
            while (1) {
              switch (_context18.prev = _context18.next) {
                case 0:
                  _returnType18 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.number(), flowRuntime_umd.ref("Promise", flowRuntime_umd.number())));
                  _context18.t0 = _returnType18;
                  _context18.next = 4;
                  return this.adapter.length(this.delegate);

                case 4:
                  _context18.t1 = _context18.sent;
                  return _context18.abrupt("return", _context18.t0.assert.call(_context18.t0, _context18.t1));

                case 6:
                case "end":
                  return _context18.stop();
              }
            }
          }, _callee18, this);
        }));

        function length() {
          return _length.apply(this, arguments);
        }

        return length;
      }()
    }, {
      key: "normalize",
      value: function () {
        var _normalize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee19(ahData) {
          var _ahDataType, _returnType19;

          return regenerator.wrap(function _callee19$(_context19) {
            while (1) {
              switch (_context19.prev = _context19.next) {
                case 0:
                  _ahDataType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                  _returnType19 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$b)), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$b)))));
                  flowRuntime_umd.param("ahData", _ahDataType).assert(ahData);
                  _context19.t0 = _returnType19;
                  _context19.next = 6;
                  return this.serializer.normalize(this.delegate, ahData);

                case 6:
                  _context19.t1 = _context19.sent;
                  return _context19.abrupt("return", _context19.t0.assert.call(_context19.t0, _context19.t1));

                case 8:
                case "end":
                  return _context19.stop();
              }
            }
          }, _callee19, this);
        }));

        function normalize(_x18) {
          return _normalize.apply(this, arguments);
        }

        return normalize;
      }()
    }, {
      key: "serialize",
      value: function () {
        var _serialize = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee20(aoRecord, ahOptions) {
          var _aoRecordType5, _ahOptionsType, _returnType20;

          return regenerator.wrap(function _callee20$(_context20) {
            while (1) {
              switch (_context20.prev = _context20.next) {
                case 0:
                  _aoRecordType5 = flowRuntime_umd.nullable(flowRuntime_umd.ref(RecordInterface$b));
                  _ahOptionsType = flowRuntime_umd.nullable(flowRuntime_umd.ref("object"));
                  _returnType20 = flowRuntime_umd["return"](flowRuntime_umd.union(flowRuntime_umd.nullable(flowRuntime_umd.ref("object")), flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))));
                  flowRuntime_umd.param("aoRecord", _aoRecordType5).assert(aoRecord);
                  flowRuntime_umd.param("ahOptions", _ahOptionsType).assert(ahOptions);
                  _context20.t0 = _returnType20;
                  _context20.next = 8;
                  return this.serializer.serialize(aoRecord, ahOptions);

                case 8:
                  _context20.t1 = _context20.sent;
                  return _context20.abrupt("return", _context20.t0.assert.call(_context20.t0, _context20.t1));

                case 10:
                case "end":
                  return _context20.stop();
              }
            }
          }, _callee20, this);
        }));

        function serialize(_x19, _x20) {
          return _serialize.apply(this, arguments);
        }

        return serialize;
      }()
    }, {
      key: "delegate",
      get: function get() {
        var _returnType21 = flowRuntime_umd["return"](this[_CollectionTypeParametersSymbol].R);

        var proxyData = this.getData();
        var delegate = proxyData != null ? proxyData.delegate : undefined;

        var _delegateType = flowRuntime_umd.nullable(flowRuntime_umd.union(flowRuntime_umd.string(), flowRuntime_umd["function"](), this[_CollectionTypeParametersSymbol].R));

        _delegateType.assert(delegate);

        if (_.isString(delegate)) {
          return _returnType21.assert(this._recordNewable(delegate));
        } else if (!/Migration$|Record$/.test(delegate.name)) {
          return _returnType21.assert(typeof delegate === 'function' ? delegate() : undefined);
        }

        return _returnType21.assert(delegate);
      }
    }, {
      key: "serializer",
      get: function get() {
        var _returnType22 = flowRuntime_umd["return"](flowRuntime_umd.ref(SerializerInterface$2, flowRuntime_umd.ref(RecordInterface$b)));

        var proxyData = this.getData();
        var serializer = proxyData != null ? proxyData.serializer : undefined;

        var _serializerType = flowRuntime_umd.nullable(flowRuntime_umd.string());

        _serializerType.assert(serializer);

        return _returnType22.assert(this._serializerFactory(this.getName(), serializer));
      }
    }, {
      key: "objectizer",
      get: function get() {
        var _returnType23 = flowRuntime_umd["return"](flowRuntime_umd.ref(ObjectizerInterface$2, this[_CollectionTypeParametersSymbol].R, flowRuntime_umd.ref(RecordInterface$b)));

        var proxyData = this.getData();
        var objectizer = proxyData != null ? proxyData.objectizer : undefined;

        var _objectizerType = flowRuntime_umd.nullable(flowRuntime_umd.string());

        _objectizerType.assert(objectizer);

        return _returnType23.assert(this._objectizerFactory(this.getName(), objectizer));
      }
    }, {
      key: "adapter",
      get: function get() {
        var _returnType24 = flowRuntime_umd["return"](flowRuntime_umd.ref(DriverInterface$3, flowRuntime_umd.Class(flowRuntime_umd.existential()), flowRuntime_umd.ref("object")));

        var proxyData = this.getData();
        var adapter = proxyData != null ? proxyData.adapter : undefined;

        var _adapterType = flowRuntime_umd.nullable(flowRuntime_umd.string());

        _adapterType.assert(adapter);

        return _returnType24.assert(this._adapterFactory(this.getName(), adapter));
      }
    }]);

    return Collection;
  }(Proxy)), _class3[_t$TypeParametersSymb] = _CollectionTypeParametersSymbol, _class3.__filename = __filename$v, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = applyDecoratedDescriptor(_class2.prototype, "_serializerFactory", [_dec4, _dec5, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = applyDecoratedDescriptor(_class2.prototype, "_objectizerFactory", [_dec6, _dec7, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = applyDecoratedDescriptor(_class2.prototype, "_adapterFactory", [_dec8, _dec9, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = applyDecoratedDescriptor(_class2.prototype, "_recordNewable", [_dec10, _dec11, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = applyDecoratedDescriptor(_class2.prototype, "_cursorFactory", [_dec12, _dec13, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = applyDecoratedDescriptor(_class2.prototype, "_collectionFactory", [_dec14, _dec15, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), applyDecoratedDescriptor(_class2.prototype, "delegate", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "delegate"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "serializer", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "serializer"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "objectizer", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "objectizer"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "adapter", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "adapter"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "collectionName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "collectionName"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "collectionPrefix", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "collectionPrefix"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "collectionFullName", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "collectionFullName"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "recordHasBeenChanged", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "recordHasBeenChanged"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "generateId", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "generateId"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "build", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "build"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "create", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "create"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "push", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "push"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, 'delete', [method], Object.getOwnPropertyDescriptor(_class2.prototype, 'delete'), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "destroy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "destroy"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "remove", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "remove"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "find", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "find"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "findMany", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "findMany"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "take", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "take"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "takeMany", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "takeMany"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "takeAll", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "takeAll"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "update", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "update"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "override", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "override"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "clone", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "clone"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "copy", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "copy"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "includes", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "includes"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "length", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "length"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "normalize", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "normalize"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "serialize", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "serialize"), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class);
});

var __filename$w = '/commands/MigrateCommand.js';

function _createForOfIteratorHelper$2(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$3(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$3(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$3(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$3(o, minLen); }

function _arrayLikeToArray$3(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper$v(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$v(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$v() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var NotificationInterface$2 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var RecordInterface$c = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$6 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var MigrateCommand = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _init, _init2, _descriptor, _descriptor2, _class3, _temp;

  var _Module$NS = Module.NS,
      STOPPED_MIGRATE = _Module$NS.STOPPED_MIGRATE,
      MIGRATIONS = _Module$NS.MIGRATIONS,
      UP = _Module$NS.UP,
      Command = _Module$NS.Command,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      mixin = _Module$NS.mixin,
      inject = _Module$NS.inject,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect;
  var MigrateCommand = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("MigrateCommand", flowRuntime_umd["extends"](Command), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("migrationsFactory", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$6, flowRuntime_umd.ref(RecordInterface$c))))), flowRuntime_umd.property("_recordFactory", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd.param("_arg1", flowRuntime_umd.ref("object")), flowRuntime_umd.param("_arg2", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(RecordInterface$c)))), flowRuntime_umd.method("migrationsCollection", flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$6, flowRuntime_umd.ref(RecordInterface$c)))), flowRuntime_umd.method("migrationNames", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("execute", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$2))), flowRuntime_umd.method("migrate", flowRuntime_umd.param("options", flowRuntime_umd.exactObject(flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string()), true))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Error")))))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$6, flowRuntime_umd.ref(RecordInterface$c))))), _dec4 = inject("Factory<".concat(MIGRATIONS, ">")), _dec5 = flowRuntime_umd.decorate(flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.string()), flowRuntime_umd.param("_arg1", flowRuntime_umd.ref("object")), flowRuntime_umd.param("_arg2", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(RecordInterface$c)))), _dec6 = inject('RecordFactory<*>'), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Command) {
    inherits(MigrateCommand, _Command);

    var _super = _createSuper$v(MigrateCommand);

    function MigrateCommand() {
      var _this;

      classCallCheck(this, MigrateCommand);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      initializerDefineProperty(_this, "migrationsFactory", _descriptor, assertThisInitialized(_this));

      initializerDefineProperty(_this, "_recordFactory", _descriptor2, assertThisInitialized(_this));

      return _this;
    }

    createClass(MigrateCommand, [{
      key: "execute",
      // @property get migrationsDir(): string {
      //   return `${this.configs.ROOT}/migrations`;
      // }
      // @method initializeNotifier(...args) {
      //   super.initializeNotifier(...args);
      //   this.migrationsCollection = this.facade.getProxy(MIGRATIONS);
      // }
      value: function () {
        var _execute = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(aoNotification) {
          var _aoNotificationType, voBody, vsType, error;

          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _aoNotificationType = flowRuntime_umd.ref(NotificationInterface$2);
                  flowRuntime_umd.param("aoNotification", _aoNotificationType).assert(aoNotification);
                  voBody = aoNotification.getBody();
                  vsType = aoNotification.getType();
                  _context.next = 6;
                  return this.migrate(voBody || {});

                case 6:
                  error = _context.sent;
                  this.send(STOPPED_MIGRATE, {
                    error: error
                  }, vsType);

                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function execute(_x) {
          return _execute.apply(this, arguments);
        }

        return execute;
      }()
    }, {
      key: "migrate",
      value: function () {
        var _migrate = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(options) {
          var _optionsType, _returnType4, voMigration, err, _iterator, _step, migrationName, id, clearedMigrationName, migrationClassName, type, msg;

          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _optionsType = flowRuntime_umd.exactObject(flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string()), true));
                  _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Error")));
                  flowRuntime_umd.param("options", _optionsType).assert(options);
                  voMigration = null;
                  err = null; // const app = this.facade
                  //   .getMediator(APPLICATION_MEDIATOR)
                  //   .getViewComponent();

                  this.ApplicationModule.requireMigrations();
                  _iterator = _createForOfIteratorHelper$2(this.migrationNames);
                  _context2.prev = 7;

                  _iterator.s();

                case 9:
                  if ((_step = _iterator.n()).done) {
                    _context2.next = 36;
                    break;
                  }

                  migrationName = _step.value;
                  _context2.next = 13;
                  return this.migrationsCollection.includes(migrationName);

                case 13:
                  if (_context2.sent) {
                    _context2.next = 32;
                    break;
                  }

                  id = String(migrationName);
                  clearedMigrationName = migrationName.replace(/^\d{14}[_]/, '');
                  migrationClassName = inflect.camelize(clearedMigrationName); // const vcMigration = this.ApplicationModule.NS[migrationClassName];

                  type = "".concat(this.ApplicationModule.name, "::").concat(migrationClassName);
                  _context2.prev = 18;
                  // voMigration = vcMigration.new({id, type}, this.migrationsCollection);
                  voMigration = this._recordFactory(migrationClassName, {
                    id: id,
                    type: type
                  }, this.migrationsCollection.getName());
                  _context2.next = 22;
                  return voMigration.migrate(UP);

                case 22:
                  _context2.next = 24;
                  return voMigration.save();

                case 24:
                  _context2.next = 32;
                  break;

                case 26:
                  _context2.prev = 26;
                  _context2.t0 = _context2["catch"](18);
                  err = _context2.t0;
                  msg = "!!! Error in migration ".concat(migrationName);
                  console.error(msg, _context2.t0.message, _context2.t0.stack);
                  return _context2.abrupt("break", 36);

                case 32:
                  if (!((options != null ? options.until : undefined) != null && options.until === migrationName)) {
                    _context2.next = 34;
                    break;
                  }

                  return _context2.abrupt("break", 36);

                case 34:
                  _context2.next = 9;
                  break;

                case 36:
                  _context2.next = 41;
                  break;

                case 38:
                  _context2.prev = 38;
                  _context2.t1 = _context2["catch"](7);

                  _iterator.e(_context2.t1);

                case 41:
                  _context2.prev = 41;

                  _iterator.f();

                  return _context2.finish(41);

                case 44:
                  return _context2.abrupt("return", _returnType4.assert(err));

                case 45:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this, [[7, 38, 41, 44], [18, 26]]);
        }));

        function migrate(_x2) {
          return _migrate.apply(this, arguments);
        }

        return migrate;
      }()
    }, {
      key: "migrationsCollection",
      get: function get() {
        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$6, flowRuntime_umd.ref(RecordInterface$c)));

        return _returnType2.assert(this.migrationsFactory());
      }
    }, {
      key: "migrationNames",
      get: function get() {
        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()));

        // const app = this.facade
        //   .getMediator(APPLICATION_MEDIATOR)
        //   .getViewComponent();
        return _returnType3.assert(this.ApplicationModule.NS.MIGRATION_NAMES || []);
      }
    }]);

    return MigrateCommand;
  }(Command), _class3.__filename = __filename$w, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = applyDecoratedDescriptor(_class2.prototype, "migrationsFactory", [_dec3, _dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = applyDecoratedDescriptor(_class2.prototype, "_recordFactory", [_dec5, _dec6, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), applyDecoratedDescriptor(_class2.prototype, "migrationsCollection", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "migrationsCollection"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "migrationNames", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "migrationNames"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "migrate", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "migrate"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

var __filename$x = '/commands/RollbackCommand.js';

function _createForOfIteratorHelper$3(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray$4(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray$4(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray$4(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$4(o, minLen); }

function _arrayLikeToArray$4(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _createSuper$w(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$w(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$w() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var NotificationInterface$3 = flowRuntime_umd.tdz(function () {
  return NotificationInterface;
});
var RecordInterface$d = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$7 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var RollbackCommand = (function (Module) {
  var _dec, _dec2, _dec3, _dec4, _class, _class2, _init, _init2, _descriptor, _class3, _temp;

  var _Module$NS = Module.NS,
      STOPPED_ROLLBACK = _Module$NS.STOPPED_ROLLBACK,
      MIGRATIONS = _Module$NS.MIGRATIONS,
      DOWN = _Module$NS.DOWN,
      Command = _Module$NS.Command,
      initialize = _Module$NS.initialize,
      partOf = _Module$NS.partOf,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      nameBy = _Module$NS.nameBy,
      mixin = _Module$NS.mixin,
      inject = _Module$NS.inject,
      _Module$NS$Utils = _Module$NS.Utils,
      _ = _Module$NS$Utils._,
      inflect = _Module$NS$Utils.inflect;
  var RollbackCommand = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("RollbackCommand", flowRuntime_umd["extends"](Command), flowRuntime_umd.staticProperty("__filename", flowRuntime_umd.any()), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("migrationsFactory", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$7, flowRuntime_umd.ref(RecordInterface$d))))), flowRuntime_umd.method("migrationsCollection", flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$7, flowRuntime_umd.ref(RecordInterface$d)))), flowRuntime_umd.method("migrationNames", flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()))), flowRuntime_umd.method("execute", flowRuntime_umd.param("aoNotification", flowRuntime_umd.ref(NotificationInterface$3))), flowRuntime_umd.method("rollback", flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.exactObject(flowRuntime_umd.property("steps", flowRuntime_umd.nullable(flowRuntime_umd.number()), true), flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string()), true)))), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Error")))))), _dec2 = partOf(Module), _dec3 = flowRuntime_umd.decorate(flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$7, flowRuntime_umd.ref(RecordInterface$d))))), _dec4 = inject("Factory<".concat(MIGRATIONS, ">")), _dec(_class = initialize(_class = _dec2(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_Command) {
    inherits(RollbackCommand, _Command);

    var _super = _createSuper$w(RollbackCommand);

    function RollbackCommand() {
      var _this;

      classCallCheck(this, RollbackCommand);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      initializerDefineProperty(_this, "migrationsFactory", _descriptor, assertThisInitialized(_this));

      return _this;
    }

    createClass(RollbackCommand, [{
      key: "execute",
      // @property get migrationsDir(): string {
      //   return `${this.configs.ROOT}/migrations`;
      // }
      // @method initializeNotifier(...args) {
      //   super.initializeNotifier(...args);
      //   this.migrationsCollection = this.facade.getProxy(MIGRATIONS);
      // }
      value: function () {
        var _execute = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(aoNotification) {
          var _aoNotificationType, voBody, vsType, error;

          return regenerator.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _aoNotificationType = flowRuntime_umd.ref(NotificationInterface$3);
                  flowRuntime_umd.param("aoNotification", _aoNotificationType).assert(aoNotification);
                  voBody = aoNotification.getBody();
                  vsType = aoNotification.getType();
                  _context.next = 6;
                  return this.rollback(voBody || {});

                case 6:
                  error = _context.sent;
                  this.send(STOPPED_ROLLBACK, {
                    error: error
                  }, vsType);

                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function execute(_x) {
          return _execute.apply(this, arguments);
        }

        return execute;
      }()
    }, {
      key: "rollback",
      value: function () {
        var _rollback = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee2(options) {
          var _optionsType, _returnType4, executedMigrations, err, _iterator, _step, executedMigration, msg;

          return regenerator.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _optionsType = flowRuntime_umd.nullable(flowRuntime_umd.exactObject(flowRuntime_umd.property("steps", flowRuntime_umd.nullable(flowRuntime_umd.number()), true), flowRuntime_umd.property("until", flowRuntime_umd.nullable(flowRuntime_umd.string()), true)));
                  _returnType4 = flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("Error")));
                  flowRuntime_umd.param("options", _optionsType).assert(options);
                  executedMigrations = null;
                  err = null;

                  if (!((options != null ? options.steps : undefined) != null && !_.isNumber(options.steps))) {
                    _context2.next = 8;
                    break;
                  }

                  throw new Error('Not valid steps params');

                case 8:
                  this.ApplicationModule.requireMigrations();
                  _context2.next = 11;
                  return this.migrationsCollection.takeAll();

                case 11:
                  _context2.next = 13;
                  return _context2.sent.toArray();

                case 13:
                  executedMigrations = _context2.sent;
                  executedMigrations = _.orderBy(executedMigrations, ['id'], ['desc']);
                  executedMigrations = executedMigrations.slice(0, options.steps || 1);
                  _iterator = _createForOfIteratorHelper$3(executedMigrations);
                  _context2.prev = 17;

                  _iterator.s();

                case 19:
                  if ((_step = _iterator.n()).done) {
                    _context2.next = 38;
                    break;
                  }

                  executedMigration = _step.value;
                  _context2.prev = 21;
                  _context2.next = 24;
                  return executedMigration.migrate(DOWN);

                case 24:
                  _context2.next = 26;
                  return executedMigration.destroy();

                case 26:
                  _context2.next = 34;
                  break;

                case 28:
                  _context2.prev = 28;
                  _context2.t0 = _context2["catch"](21);
                  err = _context2.t0;
                  msg = "!!! Error in migration ".concat(executedMigration);
                  console.error(msg, _context2.t0.message, _context2.t0.stack);
                  return _context2.abrupt("break", 38);

                case 34:
                  if (!((options != null ? options.until : undefined) != null && options.until === executedMigration.id)) {
                    _context2.next = 36;
                    break;
                  }

                  return _context2.abrupt("break", 38);

                case 36:
                  _context2.next = 19;
                  break;

                case 38:
                  _context2.next = 43;
                  break;

                case 40:
                  _context2.prev = 40;
                  _context2.t1 = _context2["catch"](17);

                  _iterator.e(_context2.t1);

                case 43:
                  _context2.prev = 43;

                  _iterator.f();

                  return _context2.finish(43);

                case 46:
                  return _context2.abrupt("return", _returnType4.assert(err));

                case 47:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this, [[17, 40, 43, 46], [21, 28]]);
        }));

        function rollback(_x2) {
          return _rollback.apply(this, arguments);
        }

        return rollback;
      }()
    }, {
      key: "migrationsCollection",
      get: function get() {
        var _returnType2 = flowRuntime_umd["return"](flowRuntime_umd.ref(CollectionInterface$7, flowRuntime_umd.ref(RecordInterface$d)));

        return _returnType2.assert(this.migrationsFactory());
      }
    }, {
      key: "migrationNames",
      get: function get() {
        var _returnType3 = flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string()));

        // const app = this.facade
        //   .getMediator(APPLICATION_MEDIATOR)
        //   .getViewComponent();
        return _returnType3.assert(this.ApplicationModule.NS.MIGRATION_NAMES || []);
      }
    }]);

    return RollbackCommand;
  }(Command), _class3.__filename = __filename$x, _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "__filename", [nameBy], (_init = Object.getOwnPropertyDescriptor(_class2, "__filename"), _init = _init ? _init.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init;
    }
  }), _class2), applyDecoratedDescriptor(_class2, "object", [meta], (_init2 = Object.getOwnPropertyDescriptor(_class2, "object"), _init2 = _init2 ? _init2.value : undefined, {
    enumerable: true,
    configurable: true,
    writable: true,
    initializer: function initializer() {
      return _init2;
    }
  }), _class2), _descriptor = applyDecoratedDescriptor(_class2.prototype, "migrationsFactory", [_dec3, _dec4, property], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), applyDecoratedDescriptor(_class2.prototype, "migrationsCollection", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "migrationsCollection"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "migrationNames", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "migrationNames"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "execute", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "execute"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "rollback", [method], Object.getOwnPropertyDescriptor(_class2.prototype, "rollback"), _class2.prototype)), _class2)) || _class) || _class) || _class);
});

function _createSuper$x(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$x(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$x() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
// This file is part of leanes-mapper-addon.
//
// leanes-mapper-addon is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// leanes-mapper-addon is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with leanes-mapper-addon.  If not, see <https://www.gnu.org/licenses/>.
var MigratableModule = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      property = _Module$NS.property,
      method = _Module$NS.method,
      constant = _Module$NS.constant,
      _ = _Module$NS.Utils._;
  var cpoMigrationsNames = Symbol["for"]('~migrationsNames');
  var cphMigrationsMap = Symbol["for"]('~migrationsMap');
  var cpoMigrations = Symbol["for"]('~migrations');
  var cpmMigrationsHandler = Symbol["for"]('~migrationsHandler');
  return ['MigratableModule', function (BaseClass) {
    var _dec, _class, _class2, _init, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.method("Migrations"), flowRuntime_umd.method("MIGRATION_NAMES"), flowRuntime_umd.staticMethod("requireMigrations", flowRuntime_umd["return"](flowRuntime_umd["void"]())))), _dec(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      inherits(Mixin, _BaseClass);

      var _super = _createSuper$x(Mixin);

      function Mixin() {
        classCallCheck(this, Mixin);

        return _super.apply(this, arguments);
      }

      createClass(Mixin, [{
        key: "Migrations",
        get: function get() {
          var MClass = this.constructor;
          return MClass[cpoMigrations] != null ? MClass[cpoMigrations] : MClass[cpoMigrations] = new Proxy(MClass, MClass[cpmMigrationsHandler]);
        }
      }, {
        key: "MIGRATION_NAMES",
        get: function get() {
          var MClass = this.constructor; // console.log('SchemaModuleMixin::MIGRATION_NAMES', MClass, MClass[cphMigrationsMap]);

          return MClass[cpoMigrationsNames] != null ? MClass[cpoMigrationsNames] : MClass[cpoMigrationsNames] = _.orderBy(Object.keys(MClass[cphMigrationsMap] || {}));
        }
      }], [{
        key: "requireMigrations",
        value: function requireMigrations() {
          var _this = this;

          var _returnType = flowRuntime_umd["return"](flowRuntime_umd["void"]());

          this.prototype.MIGRATION_NAMES.forEach(function (migrationName) {
            _this.prototype.Migrations[migrationName];
          });
        }
      }]);

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), applyDecoratedDescriptor(_class2.prototype, "Migrations", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "Migrations"), _class2.prototype), applyDecoratedDescriptor(_class2.prototype, "MIGRATION_NAMES", [constant], Object.getOwnPropertyDescriptor(_class2.prototype, "MIGRATION_NAMES"), _class2.prototype), applyDecoratedDescriptor(_class2, "requireMigrations", [method], Object.getOwnPropertyDescriptor(_class2, "requireMigrations"), _class2)), _class2)) || _class) || _class);
    Reflect.defineProperty(Mixin, cpoMigrationsNames, {
      enumerable: true,
      writable: true,
      value: null
    }); // Reflect.defineProperty(Mixin, cphMigrationsMap, {
    //   enumerable: true,
    //   writable: true,
    //   value: null
    // });

    Reflect.defineProperty(Mixin, cpoMigrations, {
      enumerable: true,
      writable: true,
      value: null
    });
    Reflect.defineProperty(Mixin, cpmMigrationsHandler, {
      enumerable: true,
      value: {
        // ownKeys: (aoTarget) =>
        //   Reflect.ownKeys(aoTarget.migrations),
        // has: (aoTarget, asName) =>
        //   indexOf.call(aoTarget.migrations, asName) >= 0,
        // set: (aoTarget, asName, aValue, aoReceiver) => {
        //   if (!Reflect.get(aoTarget, asName)) {
        //     aoTarget.metaObject.addMetaData('migrations', asName, aValue);
        //     Reflect.defineProperty(aoTarget, asName, {
        //       configurable: false,
        //       enumerable: true,
        //       writable: false,
        //       value: aValue
        //     });
        //     return aValue
        //   }
        // },
        get: function get(aoTarget, asName) {
          if (!Reflect.get(aoTarget.prototype, asName)) {
            // if (aoTarget[cphMigrationsMap] == null) {
            //   const migrationsMap = {};
            //   for (const vsName in aoTarget[cphPathMap]) {
            //     const vsPath = aoTarget[cphPathMap][vsName];
            //     // console.log('<><><><> Migrations.get', vsName, vsPath);
            //     if (
            //       _.includes(vsPath, '/migrations/')
            //     &&
            //       vsName !== 'BaseMigration'
            //     &&
            //       /^\.|\.md$/.test(vsPath)
            //     ) {
            //       migrationsMap[vsName] = vsPath;
            //     }
            //   }
            //   aoTarget[cphMigrationsMap] = migrationsMap;
            // }
            var vsPath = aoTarget[cphMigrationsMap][asName];

            if (vsPath) {
              aoTarget.resolve(vsPath);
            }
          }

          return Reflect.get(aoTarget.prototype, asName);
        }
      }
    });
    Reflect.defineProperty(Mixin, 'onMetalize', {
      configurable: true,
      enumerable: true,
      writable: true,
      value: function value() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        Reflect.getPrototypeOf(Mixin).onMetalize.apply(this, args);
        this[cpoMigrationsNames] = undefined; // this[cphMigrationsMap] = undefined;

        this[cpoMigrations] = undefined;
        return;
      }
    });
    return Mixin;
  }];
});

// This file is part of leanes-mapper-addon.
var RecordInterface$e = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$8 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var MigrationStaticInterface = flowRuntime_umd.type("MigrationStaticInterface", function (MigrationStaticInterface) {
  var SUPPORTED_TYPES = MigrationStaticInterface.typeParameter("SUPPORTED_TYPES"),
      NON_OVERRIDDEN = MigrationStaticInterface.typeParameter("NON_OVERRIDDEN");
  return flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](flowRuntime_umd.param("aoAttributes", flowRuntime_umd.ref("object")), flowRuntime_umd.param("aoCollection", flowRuntime_umd.ref(CollectionInterface$8)), flowRuntime_umd["return"](flowRuntime_umd.ref(RecordInterface$e)))), flowRuntime_umd.property("createCollection", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("createEdgeCollection", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName1", flowRuntime_umd.string()), flowRuntime_umd.param("collectionName2", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("addField", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$values(SUPPORTED_TYPES), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$values(SUPPORTED_TYPES)), flowRuntime_umd.property("default", flowRuntime_umd.any())))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("addIndex", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldNames", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("sparse", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("addTimestamps", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("changeCollection", flowRuntime_umd["function"](flowRuntime_umd.param("name", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.ref("object")), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("changeField", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.union(flowRuntime_umd.$values(SUPPORTED_TYPES), flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.$values(SUPPORTED_TYPES))))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("renameField", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd.param("newFieldName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("renameIndex", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("oldCollectionName", flowRuntime_umd.string()), flowRuntime_umd.param("newCollectionName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("renameCollection", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("newCollectionName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("dropCollection", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("dropEdgeCollection", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName1", flowRuntime_umd.string()), flowRuntime_umd.param("collectionName2", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("removeField", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("removeIndex", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("fieldNames", flowRuntime_umd.array(flowRuntime_umd.string())), flowRuntime_umd.param("options", flowRuntime_umd.object(flowRuntime_umd.property("type", flowRuntime_umd.union(flowRuntime_umd.string("hash"), flowRuntime_umd.string("skiplist"), flowRuntime_umd.string("persistent"), flowRuntime_umd.string("geo"), flowRuntime_umd.string("fulltext"))), flowRuntime_umd.property("unique", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())), flowRuntime_umd.property("sparse", flowRuntime_umd.nullable(flowRuntime_umd["boolean"]())))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("removeTimestamps", flowRuntime_umd["function"](flowRuntime_umd.param("collectionName", flowRuntime_umd.string()), flowRuntime_umd.param("options", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("reversible", flowRuntime_umd["function"](flowRuntime_umd.param("lambda", flowRuntime_umd["function"](flowRuntime_umd.param("_arg0", flowRuntime_umd.exactObject(flowRuntime_umd.property("up", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd.property("down", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))))), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd["void"]())))), flowRuntime_umd["return"](flowRuntime_umd["void"]()))), flowRuntime_umd.property("change", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(NON_OVERRIDDEN)))), flowRuntime_umd.property("up", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(NON_OVERRIDDEN)))), flowRuntime_umd.property("down", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(NON_OVERRIDDEN)))));
});

// This file is part of leanes-mapper-addon.
var JoiT$g = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var RecordInterface$f = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$9 = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var RecordStaticInterface = flowRuntime_umd.type("RecordStaticInterface", function (RecordStaticInterface) {
  var R = RecordStaticInterface.typeParameter("R", undefined, flowRuntime_umd.ref(RecordInterface$f)),
      C = RecordStaticInterface.typeParameter("C", undefined, flowRuntime_umd.ref(CollectionInterface$9, R));
  return flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](flowRuntime_umd.param("aoAttributes", flowRuntime_umd.ref("object")), flowRuntime_umd.param("aoCollection", C), flowRuntime_umd["return"](R))), flowRuntime_umd.property("schema", flowRuntime_umd.ref(JoiT$g)), flowRuntime_umd.property("normalize", flowRuntime_umd["function"](flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("aoCollection", flowRuntime_umd.nullable(C)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.tuple(flowRuntime_umd.Class(flowRuntime_umd.existential()), flowRuntime_umd.ref("object"))))))), flowRuntime_umd.property("serialize", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(R)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.ref("object")))))), flowRuntime_umd.property("recoverize", flowRuntime_umd["function"](flowRuntime_umd.param("ahPayload", flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))), flowRuntime_umd.param("aoCollection", flowRuntime_umd.nullable(C)), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.tuple(flowRuntime_umd.Class(flowRuntime_umd.existential()), flowRuntime_umd.ref("object"))))))), flowRuntime_umd.property("objectize", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(R)), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))), flowRuntime_umd.property("makeSnapshot", flowRuntime_umd["function"](flowRuntime_umd.param("aoRecord", flowRuntime_umd.nullable(R)), flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.ref("object"))))), flowRuntime_umd.property("parseRecordName", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.tuple(flowRuntime_umd.string(), flowRuntime_umd.string())))), flowRuntime_umd.property("findRecordByName", flowRuntime_umd["function"](flowRuntime_umd.param("asName", flowRuntime_umd.string()), flowRuntime_umd["return"](RecordStaticInterface))), flowRuntime_umd.property("parentClassNames", flowRuntime_umd["function"](flowRuntime_umd.param("AbstractClass", flowRuntime_umd.nullable(RecordStaticInterface)), flowRuntime_umd["return"](flowRuntime_umd.array(flowRuntime_umd.string())))), flowRuntime_umd.property("attributes", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref("AttributeConfigT")))), flowRuntime_umd.property("computeds", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref("ComputedConfigT")))), flowRuntime_umd.property("new", flowRuntime_umd["function"](flowRuntime_umd.param("aoAttributes", flowRuntime_umd.ref("object")), flowRuntime_umd.param("aoCollection", C), flowRuntime_umd["return"](R))));
});

// This file is part of leanes-mapper-addon.
var RelationConfigT$6 = flowRuntime_umd.tdz(function () {
  return RelationConfigT;
});
var RelationInverseT$2 = flowRuntime_umd.tdz(function () {
  return RelationInverseT;
});
var RecordInterface$g = flowRuntime_umd.tdz(function () {
  return RecordInterface;
});
var CollectionInterface$a = flowRuntime_umd.tdz(function () {
  return CollectionInterface;
});
var RelatableStaticInterface = flowRuntime_umd.type("RelatableStaticInterface", flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](flowRuntime_umd.param("aoAttributes", flowRuntime_umd.ref("object")), flowRuntime_umd.param("aoCollection", flowRuntime_umd.ref(CollectionInterface$a)), flowRuntime_umd["return"](flowRuntime_umd.ref(RecordInterface$g)))), flowRuntime_umd.property("inverseFor", flowRuntime_umd["function"](flowRuntime_umd.param("asAttrName", flowRuntime_umd.string()), flowRuntime_umd["return"](flowRuntime_umd.ref(RelationInverseT$2)))), flowRuntime_umd.property("relations", flowRuntime_umd.object(flowRuntime_umd.indexer("key", flowRuntime_umd.string(), flowRuntime_umd.ref(RelationConfigT$6))))));

// This file is part of leanes-mapper-addon.
var JoiT$h = flowRuntime_umd.tdz(function () {
  return JoiT;
});
var TransformStaticInterface = flowRuntime_umd.type("TransformStaticInterface", flowRuntime_umd.object(flowRuntime_umd.callProperty(flowRuntime_umd["function"](flowRuntime_umd.rest("args", flowRuntime_umd.array(flowRuntime_umd.nullable(flowRuntime_umd.any()))), flowRuntime_umd["return"](flowRuntime_umd.ref("object")))), flowRuntime_umd.property("schema", flowRuntime_umd.ref(JoiT$h)), flowRuntime_umd.property("normalize", flowRuntime_umd["function"](flowRuntime_umd.param("serialized", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("serialize", flowRuntime_umd["function"](flowRuntime_umd.param("deserialized", flowRuntime_umd.nullable(flowRuntime_umd.any())), flowRuntime_umd["return"](flowRuntime_umd.ref("Promise", flowRuntime_umd.nullable(flowRuntime_umd.any()))))), flowRuntime_umd.property("objectize", flowRuntime_umd["function"](flowRuntime_umd["return"](flowRuntime_umd.nullable(flowRuntime_umd.any()))))));

function _createSuper$y(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct$y(); return function _createSuperInternal() { var Super = getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct$y() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
var index = (function (Module) {
  var _Module$NS = Module.NS,
      initializeMixin = _Module$NS.initializeMixin,
      meta = _Module$NS.meta,
      constant = _Module$NS.constant,
      method = _Module$NS.method,
      extend = _Module$NS.extend,
      decorator = _Module$NS.decorator;
  return ['MapperAddon', function (BaseClass) {
    var _dec, _dec2, _class, _class2, _init, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _class3, _temp;

    var Mixin = (_dec = flowRuntime_umd.annotate(flowRuntime_umd["class"]("Mixin", flowRuntime_umd["extends"](BaseClass), flowRuntime_umd.staticProperty("object", flowRuntime_umd.any()), flowRuntime_umd.property("HTTP_ADAPTER", flowRuntime_umd.any()), flowRuntime_umd.property("MEMORY_ADAPTER", flowRuntime_umd.any()), flowRuntime_umd.property("SERIALIZER", flowRuntime_umd.any()), flowRuntime_umd.property("HTTP_SERIALIZER", flowRuntime_umd.any()), flowRuntime_umd.property("RECORD_CHANGED", flowRuntime_umd.any()), flowRuntime_umd.property("MIGRATE", flowRuntime_umd.any()), flowRuntime_umd.property("ROLLBACK", flowRuntime_umd.any()), flowRuntime_umd.property("STOPPED_MIGRATE", flowRuntime_umd.any()), flowRuntime_umd.property("STOPPED_ROLLBACK", flowRuntime_umd.any()), flowRuntime_umd.property("MIGRATIONS", flowRuntime_umd.any()), flowRuntime_umd.property("UP", flowRuntime_umd.any()), flowRuntime_umd.property("DOWN", flowRuntime_umd.any()), flowRuntime_umd.property("NON_OVERRIDDEN", flowRuntime_umd.any()), flowRuntime_umd.property("SUPPORTED_TYPES", flowRuntime_umd.any()), flowRuntime_umd.property("REVERSE_MAP", flowRuntime_umd.any()), flowRuntime_umd.property("attribute", flowRuntime_umd.any()), flowRuntime_umd.property("belongsTo", flowRuntime_umd.any()), flowRuntime_umd.property("computed", flowRuntime_umd.any()), flowRuntime_umd.property("customFilters", flowRuntime_umd.any()), flowRuntime_umd.property("hasMany", flowRuntime_umd.any()), flowRuntime_umd.property("hasOne", flowRuntime_umd.any()), flowRuntime_umd.property("relatedTo", flowRuntime_umd.any()))), _dec2 = extend('MapperFacadeMixin', 'Facade'), _dec(_class = _dec2(_class = MapperFacadeMixin(_class = Collection(_class = MigrateCommand(_class = RollbackCommand(_class = HttpAdapter(_class = MemoryAdapter(_class = EditableRecordMixin(_class = GenerateUuidIdMixin(_class = HideableRecordMixin(_class = HttpAdapterMixin(_class = IterableMixin(_class = MemoryAdapterMixin(_class = MemoryMigrationMixin(_class = MigratifyApplicationMediatorMixin(_class = MigratifyApplicationMixin(_class = OwnerableRecordMixin(_class = RelationsMixin(_class = TimestampsRecordMixin(_class = Migration(_class = Record(_class = Objectizer(_class = Serializer(_class = Transform(_class = Cursor(_class = ComplexArrayTransform(_class = ComplexObjectTransform(_class = ArrayTransform(_class = BooleanTransform(_class = DateTransform(_class = NumberTransform(_class = ObjectTransform(_class = PrimaryKeyTransform(_class = StringTransform(_class = initializeMixin(_class = (_class2 = (_temp = _class3 = /*#__PURE__*/function (_BaseClass) {
      inherits(Mixin, _BaseClass);

      var _super = _createSuper$y(Mixin);

      function Mixin() {
        var _this;

        classCallCheck(this, Mixin);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));

        initializerDefineProperty(_this, "HTTP_ADAPTER", _descriptor, assertThisInitialized(_this));

        initializerDefineProperty(_this, "MEMORY_ADAPTER", _descriptor2, assertThisInitialized(_this));

        initializerDefineProperty(_this, "SERIALIZER", _descriptor3, assertThisInitialized(_this));

        initializerDefineProperty(_this, "HTTP_SERIALIZER", _descriptor4, assertThisInitialized(_this));

        initializerDefineProperty(_this, "RECORD_CHANGED", _descriptor5, assertThisInitialized(_this));

        initializerDefineProperty(_this, "MIGRATE", _descriptor6, assertThisInitialized(_this));

        initializerDefineProperty(_this, "ROLLBACK", _descriptor7, assertThisInitialized(_this));

        initializerDefineProperty(_this, "STOPPED_MIGRATE", _descriptor8, assertThisInitialized(_this));

        initializerDefineProperty(_this, "STOPPED_ROLLBACK", _descriptor9, assertThisInitialized(_this));

        initializerDefineProperty(_this, "MIGRATIONS", _descriptor10, assertThisInitialized(_this));

        initializerDefineProperty(_this, "UP", _descriptor11, assertThisInitialized(_this));

        initializerDefineProperty(_this, "DOWN", _descriptor12, assertThisInitialized(_this));

        initializerDefineProperty(_this, "NON_OVERRIDDEN", _descriptor13, assertThisInitialized(_this));

        initializerDefineProperty(_this, "SUPPORTED_TYPES", _descriptor14, assertThisInitialized(_this));

        initializerDefineProperty(_this, "REVERSE_MAP", _descriptor15, assertThisInitialized(_this));

        initializerDefineProperty(_this, "attribute", _descriptor16, assertThisInitialized(_this));

        initializerDefineProperty(_this, "belongsTo", _descriptor17, assertThisInitialized(_this));

        initializerDefineProperty(_this, "computed", _descriptor18, assertThisInitialized(_this));

        initializerDefineProperty(_this, "customFilters", _descriptor19, assertThisInitialized(_this));

        initializerDefineProperty(_this, "hasMany", _descriptor20, assertThisInitialized(_this));

        initializerDefineProperty(_this, "hasOne", _descriptor21, assertThisInitialized(_this));

        initializerDefineProperty(_this, "relatedTo", _descriptor22, assertThisInitialized(_this));

        return _this;
      }

      return Mixin;
    }(BaseClass), _class3.object = {}, _temp), (applyDecoratedDescriptor(_class2, "object", [meta], (_init = Object.getOwnPropertyDescriptor(_class2, "object"), _init = _init ? _init.value : undefined, {
      enumerable: true,
      configurable: true,
      writable: true,
      initializer: function initializer() {
        return _init;
      }
    }), _class2), _descriptor = applyDecoratedDescriptor(_class2.prototype, "HTTP_ADAPTER", [constant], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return 'HTTP_ADAPTER';
      }
    }), _descriptor2 = applyDecoratedDescriptor(_class2.prototype, "MEMORY_ADAPTER", [constant], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return 'MEMORY_ADAPTER';
      }
    }), _descriptor3 = applyDecoratedDescriptor(_class2.prototype, "SERIALIZER", [constant], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return 'SERIALIZER';
      }
    }), _descriptor4 = applyDecoratedDescriptor(_class2.prototype, "HTTP_SERIALIZER", [constant], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return 'HTTP_SERIALIZER';
      }
    }), _descriptor5 = applyDecoratedDescriptor(_class2.prototype, "RECORD_CHANGED", [constant], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return 'RECORD_CHANGED';
      }
    }), _descriptor6 = applyDecoratedDescriptor(_class2.prototype, "MIGRATE", [constant], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return 'MIGRATE';
      }
    }), _descriptor7 = applyDecoratedDescriptor(_class2.prototype, "ROLLBACK", [constant], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return 'ROLLBACK';
      }
    }), _descriptor8 = applyDecoratedDescriptor(_class2.prototype, "STOPPED_MIGRATE", [constant], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return 'STOPPED_MIGRATE';
      }
    }), _descriptor9 = applyDecoratedDescriptor(_class2.prototype, "STOPPED_ROLLBACK", [constant], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return 'STOPPED_ROLLBACK';
      }
    }), _descriptor10 = applyDecoratedDescriptor(_class2.prototype, "MIGRATIONS", [constant], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return 'MigrationsCollection';
      }
    }), _descriptor11 = applyDecoratedDescriptor(_class2.prototype, "UP", [constant], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return Symbol["for"]('UP');
      }
    }), _descriptor12 = applyDecoratedDescriptor(_class2.prototype, "DOWN", [constant], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return Symbol["for"]('DOWN');
      }
    }), _descriptor13 = applyDecoratedDescriptor(_class2.prototype, "NON_OVERRIDDEN", [constant], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return Symbol["for"]('NON_OVERRIDDEN');
      }
    }), _descriptor14 = applyDecoratedDescriptor(_class2.prototype, "SUPPORTED_TYPES", [constant], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return {
          json: 'json',
          binary: 'binary',
          "boolean": 'boolean',
          date: 'date',
          datetime: 'datetime',
          number: 'number',
          decimal: 'decimal',
          "float": 'float',
          integer: 'integer',
          primary_key: 'primary_key',
          string: 'string',
          text: 'text',
          time: 'time',
          timestamp: 'timestamp',
          array: 'array',
          hash: 'hash'
        };
      }
    }), _descriptor15 = applyDecoratedDescriptor(_class2.prototype, "REVERSE_MAP", [constant], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return {
          createCollection: 'dropCollection',
          dropCollection: 'dropCollection',
          createEdgeCollection: 'dropEdgeCollection',
          dropEdgeCollection: 'dropEdgeCollection',
          addField: 'removeField',
          removeField: 'removeField',
          addIndex: 'removeIndex',
          removeIndex: 'removeIndex',
          addTimestamps: 'removeTimestamps',
          removeTimestamps: 'addTimestamps',
          changeCollection: 'changeCollection',
          changeField: 'changeField',
          renameField: 'renameField',
          renameIndex: 'renameIndex',
          renameCollection: 'renameCollection'
        };
      }
    }), _descriptor16 = applyDecoratedDescriptor(_class2.prototype, "attribute", [decorator], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return attribute;
      }
    }), _descriptor17 = applyDecoratedDescriptor(_class2.prototype, "belongsTo", [decorator], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return belongsTo;
      }
    }), _descriptor18 = applyDecoratedDescriptor(_class2.prototype, "computed", [decorator], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return computed;
      }
    }), _descriptor19 = applyDecoratedDescriptor(_class2.prototype, "customFilters", [decorator], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return customFilters;
      }
    }), _descriptor20 = applyDecoratedDescriptor(_class2.prototype, "hasMany", [decorator], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return hasMany;
      }
    }), _descriptor21 = applyDecoratedDescriptor(_class2.prototype, "hasOne", [decorator], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return hasOne;
      }
    }), _descriptor22 = applyDecoratedDescriptor(_class2.prototype, "relatedTo", [decorator], {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function initializer() {
        return relatedTo;
      }
    })), _class2)) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class) || _class);
    return Mixin;
  }];
});

exports.AttributeConfigT = AttributeConfigT;
exports.AttributeOptionsT = AttributeOptionsT;
exports.CollectionInterface = CollectionInterface;
exports.ComputedConfigT = ComputedConfigT;
exports.ComputedOptionsT = ComputedOptionsT;
exports.CursorInterface = CursorInterface;
exports.DriverInterface = DriverInterface;
exports.HttpRequestHashT = HttpRequestHashT;
exports.HttpRequestParamsT = HttpRequestParamsT;
exports.IterableInterface = IterableInterface;
exports.MigratableModule = MigratableModule;
exports.MigrationInterface = MigrationInterface;
exports.MigrationStaticInterface = MigrationStaticInterface;
exports.ObjectizerInterface = ObjectizerInterface;
exports.RecordInterface = RecordInterface;
exports.RecordStaticInterface = RecordStaticInterface;
exports.RelatableStaticInterface = RelatableStaticInterface;
exports.RelationConfigT = RelationConfigT;
exports.RelationInverseT = RelationInverseT;
exports.RelationOptionsT = RelationOptionsT;
exports.SerializableInterface = SerializableInterface;
exports.SerializerInterface = SerializerInterface;
exports.TransformStaticInterface = TransformStaticInterface;
exports.default = index;
exports.loadMigrations = loadMigrations;
exports.requireMigrations = requireMigrations;
//# sourceMappingURL=index.dev.js.map
